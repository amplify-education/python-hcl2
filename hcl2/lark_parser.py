# The file was automatically generated by Lark v1.1.5
__version__ = "1.1.5"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Sequence, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
        cls,
        type: str,
        value: Any,
        start_pos: Optional[int]=None,
        line: Optional[int]=None,
        column: Optional[int]=None,
        end_line: Optional[int]=None,
        end_column: Optional[int]=None,
        end_pos: Optional[int]=None
    ) -> 'Token':
        ...

    @overload
    def __new__(
        cls,
        type_: str,
        value: Any,
        start_pos: Optional[int]=None,
        line: Optional[int]=None,
        column: Optional[int]=None,
        end_line: Optional[int]=None,
        end_column: Optional[int]=None,
        end_pos: Optional[int]=None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state, last_token=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = md5_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_md5, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_md5 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_md5 is not None
                    f.write(cache_md5.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}], 'ignore': ['__IGNORE_0', '__IGNORE_1'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: '__int_lit_plus_3', 1: 'LSQB', 2: 'LBRACE', 3: 'heredoc_template_trim', 4: 'identifier', 5: 'conditional', 6: 'STRING_LIT', 7: 'for_object_expr', 8: 'expression', 9: '__ANON_11', 10: 'DECIMAL', 11: 'heredoc_template', 12: 'full_splat_expr_term', 13: 'object_elem', 14: 'operation', 15: 'LPAR', 16: 'expr_term', 17: '__ANON_10', 18: 'MINUS', 19: 'attr_splat_expr_term', 20: '__ANON_3', 21: 'function_call', 22: 'get_attr_expr_term', 23: 'tuple', 24: 'RBRACE', 25: 'index_expr_term', 26: 'binary_op', 27: 'unary_op', 28: 'object', 29: 'int_lit', 30: 'for_tuple_expr', 31: 'float_lit', 32: 'BANG', 33: 'COMMA', 34: '__ANON_1', 35: '__ANON_0', 36: '__ANON_2', 37: 'RPAR', 38: 'new_line_or_comment', 39: '__new_line_or_comment_plus_2', 40: 'COLON', 41: 'QMARK', 42: 'SLASH', 43: '__ANON_4', 44: '__ANON_7', 45: 'binary_term', 46: '__ANON_6', 47: '__ANON_5', 48: 'LESSTHAN', 49: '__ANON_8', 50: '__ANON_9', 51: 'PLUS', 52: 'binary_operator', 53: 'STAR', 54: 'MORETHAN', 55: 'PERCENT', 56: 'DOT', 57: '__ANON_14', 58: 'RSQB', 59: '__ANON_13', 60: '$END', 61: 'IF', 62: '__ANON_12', 63: '__ANON_15', 64: 'EQUAL', 65: 'for_cond', 66: 'IN', 67: '__body_star_0', 68: 'body', 69: 'attribute', 70: 'block', 71: 'FOR', 72: 'EXP_MARK', 73: 'arguments', 74: 'for_intro', 75: '__object_star_5', 76: 'new_line_and_or_comma', 77: 'get_attr', 78: 'index', 79: '__full_splat_star_7', 80: 'start', 81: 'attr_splat', 82: 'full_splat', 83: '__block_star_1', 84: '__attr_splat_star_6', 85: '__tuple_star_4'}, 'states': {0: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 252), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 428), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 13: (0, 5), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 24: (0, 375), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 1: {33: (0, 124), 34: (1, {'@': 177}), 35: (1, {'@': 177}), 36: (1, {'@': 177}), 37: (1, {'@': 177})}, 2: {35: (0, 515), 34: (0, 491), 38: (0, 212), 39: (0, 497), 36: (0, 509), 37: (1, {'@': 176})}, 3: {0: (0, 53), 1: (0, 61), 2: (0, 62), 38: (0, 316), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 330), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 4: {40: (0, 300), 41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 38: (0, 311), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 5: {34: (1, {'@': 440}), 35: (1, {'@': 440}), 36: (1, {'@': 440}), 24: (1, {'@': 440}), 33: (1, {'@': 440})}, 6: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 285), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 38: (0, 323), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 7: {37: (0, 146)}, 8: {50: (1, {'@': 442}), 56: (1, {'@': 442}), 37: (1, {'@': 442}), 57: (1, {'@': 442}), 58: (1, {'@': 442}), 51: (1, {'@': 442}), 33: (1, {'@': 442}), 48: (1, {'@': 442}), 59: (1, {'@': 442}), 1: (1, {'@': 442}), 42: (1, {'@': 442}), 18: (1, {'@': 442}), 34: (1, {'@': 442}), 35: (1, {'@': 442}), 40: (1, {'@': 442}), 60: (1, {'@': 442}), 24: (1, {'@': 442}), 44: (1, {'@': 442}), 20: (1, {'@': 442}), 61: (1, {'@': 442}), 47: (1, {'@': 442}), 62: (1, {'@': 442}), 43: (1, {'@': 442}), 41: (1, {'@': 442}), 54: (1, {'@': 442}), 63: (1, {'@': 442}), 64: (1, {'@': 442}), 49: (1, {'@': 442}), 36: (1, {'@': 442}), 55: (1, {'@': 442}), 53: (1, {'@': 442}), 46: (1, {'@': 442})}, 9: {50: (1, {'@': 186}), 56: (1, {'@': 186}), 37: (1, {'@': 186}), 57: (1, {'@': 186}), 58: (1, {'@': 186}), 51: (1, {'@': 186}), 33: (1, {'@': 186}), 48: (1, {'@': 186}), 1: (1, {'@': 186}), 59: (1, {'@': 186}), 42: (1, {'@': 186}), 18: (1, {'@': 186}), 34: (1, {'@': 186}), 35: (1, {'@': 186}), 40: (1, {'@': 186}), 60: (1, {'@': 186}), 24: (1, {'@': 186}), 44: (1, {'@': 186}), 20: (1, {'@': 186}), 61: (1, {'@': 186}), 47: (1, {'@': 186}), 62: (1, {'@': 186}), 43: (1, {'@': 186}), 41: (1, {'@': 186}), 54: (1, {'@': 186}), 63: (1, {'@': 186}), 64: (1, {'@': 186}), 49: (1, {'@': 186}), 36: (1, {'@': 186}), 55: (1, {'@': 186}), 53: (1, {'@': 186}), 46: (1, {'@': 186})}, 10: {24: (1, {'@': 52}), 20: (1, {'@': 52}), 60: (1, {'@': 52}), 36: (1, {'@': 52}), 34: (1, {'@': 52}), 35: (1, {'@': 52})}, 11: {58: (0, 122)}, 12: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 38: (0, 315), 58: (0, 329), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 13: {50: (1, {'@': 219}), 56: (1, {'@': 219}), 47: (1, {'@': 219}), 43: (1, {'@': 219}), 57: (1, {'@': 219}), 41: (1, {'@': 219}), 54: (1, {'@': 219}), 64: (1, {'@': 219}), 51: (1, {'@': 219}), 49: (1, {'@': 219}), 48: (1, {'@': 219}), 59: (1, {'@': 219}), 1: (1, {'@': 219}), 42: (1, {'@': 219}), 18: (1, {'@': 219}), 40: (1, {'@': 219}), 55: (1, {'@': 219}), 44: (1, {'@': 219}), 53: (1, {'@': 219}), 46: (1, {'@': 219}), 34: (1, {'@': 219}), 36: (1, {'@': 219}), 35: (1, {'@': 219}), 37: (1, {'@': 219}), 58: (1, {'@': 219}), 33: (1, {'@': 219}), 60: (1, {'@': 219}), 24: (1, {'@': 219}), 20: (1, {'@': 219}), 61: (1, {'@': 219}), 62: (1, {'@': 219}), 63: (1, {'@': 219})}, 14: {50: (1, {'@': 242}), 56: (1, {'@': 242}), 47: (1, {'@': 242}), 43: (1, {'@': 242}), 57: (1, {'@': 242}), 41: (1, {'@': 242}), 54: (1, {'@': 242}), 64: (1, {'@': 242}), 51: (1, {'@': 242}), 49: (1, {'@': 242}), 48: (1, {'@': 242}), 59: (1, {'@': 242}), 1: (1, {'@': 242}), 42: (1, {'@': 242}), 18: (1, {'@': 242}), 40: (1, {'@': 242}), 55: (1, {'@': 242}), 44: (1, {'@': 242}), 53: (1, {'@': 242}), 46: (1, {'@': 242}), 34: (1, {'@': 242}), 36: (1, {'@': 242}), 35: (1, {'@': 242}), 37: (1, {'@': 242}), 58: (1, {'@': 242}), 33: (1, {'@': 242}), 60: (1, {'@': 242}), 24: (1, {'@': 242}), 20: (1, {'@': 242}), 61: (1, {'@': 242}), 62: (1, {'@': 242}), 63: (1, {'@': 242})}, 15: {50: (1, {'@': 446}), 56: (1, {'@': 446}), 37: (1, {'@': 446}), 57: (1, {'@': 446}), 58: (1, {'@': 446}), 51: (1, {'@': 446}), 33: (1, {'@': 446}), 48: (1, {'@': 446}), 1: (1, {'@': 446}), 59: (1, {'@': 446}), 42: (1, {'@': 446}), 18: (1, {'@': 446}), 34: (1, {'@': 446}), 35: (1, {'@': 446}), 40: (1, {'@': 446}), 60: (1, {'@': 446}), 24: (1, {'@': 446}), 44: (1, {'@': 446}), 20: (1, {'@': 446}), 61: (1, {'@': 446}), 47: (1, {'@': 446}), 62: (1, {'@': 446}), 43: (1, {'@': 446}), 41: (1, {'@': 446}), 54: (1, {'@': 446}), 63: (1, {'@': 446}), 64: (1, {'@': 446}), 49: (1, {'@': 446}), 36: (1, {'@': 446}), 55: (1, {'@': 446}), 53: (1, {'@': 446}), 46: (1, {'@': 446})}, 16: {50: (1, {'@': 445}), 56: (1, {'@': 445}), 37: (1, {'@': 445}), 57: (1, {'@': 445}), 58: (1, {'@': 445}), 51: (1, {'@': 445}), 33: (1, {'@': 445}), 48: (1, {'@': 445}), 1: (1, {'@': 445}), 59: (1, {'@': 445}), 42: (1, {'@': 445}), 18: (1, {'@': 445}), 34: (1, {'@': 445}), 35: (1, {'@': 445}), 40: (1, {'@': 445}), 60: (1, {'@': 445}), 24: (1, {'@': 445}), 44: (1, {'@': 445}), 20: (1, {'@': 445}), 61: (1, {'@': 445}), 47: (1, {'@': 445}), 62: (1, {'@': 445}), 43: (1, {'@': 445}), 41: (1, {'@': 445}), 54: (1, {'@': 445}), 63: (1, {'@': 445}), 64: (1, {'@': 445}), 49: (1, {'@': 445}), 36: (1, {'@': 445}), 55: (1, {'@': 445}), 53: (1, {'@': 445}), 46: (1, {'@': 445})}, 17: {10: (0, 478), 50: (1, {'@': 111}), 56: (1, {'@': 111}), 47: (1, {'@': 111}), 43: (1, {'@': 111}), 57: (1, {'@': 111}), 41: (1, {'@': 111}), 54: (1, {'@': 111}), 64: (1, {'@': 111}), 51: (1, {'@': 111}), 49: (1, {'@': 111}), 48: (1, {'@': 111}), 59: (1, {'@': 111}), 1: (1, {'@': 111}), 42: (1, {'@': 111}), 18: (1, {'@': 111}), 40: (1, {'@': 111}), 55: (1, {'@': 111}), 44: (1, {'@': 111}), 53: (1, {'@': 111}), 46: (1, {'@': 111}), 34: (1, {'@': 111}), 36: (1, {'@': 111}), 35: (1, {'@': 111}), 37: (1, {'@': 111}), 58: (1, {'@': 111}), 33: (1, {'@': 111}), 60: (1, {'@': 111}), 24: (1, {'@': 111}), 20: (1, {'@': 111}), 61: (1, {'@': 111}), 62: (1, {'@': 111}), 63: (1, {'@': 111})}, 18: {24: (1, {'@': 53}), 20: (1, {'@': 53}), 60: (1, {'@': 53}), 36: (1, {'@': 53}), 34: (1, {'@': 53}), 35: (1, {'@': 53})}, 19: {58: (0, 30)}, 20: {18: (0, 277), 65: (0, 409), 41: (0, 510), 34: (0, 491), 38: (0, 411), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 58: (0, 78), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270)}, 21: {58: (0, 318)}, 22: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 438}), 35: (1, {'@': 438}), 36: (1, {'@': 438}), 58: (1, {'@': 438}), 33: (1, {'@': 438}), 62: (1, {'@': 438}), 37: (1, {'@': 438})}, 23: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 432}), 35: (1, {'@': 432}), 36: (1, {'@': 432}), 58: (1, {'@': 432}), 33: (1, {'@': 432}), 62: (1, {'@': 432}), 37: (1, {'@': 432})}, 24: {66: (0, 229), 38: (0, 381), 34: (0, 491), 39: (0, 497), 36: (0, 509), 35: (0, 515)}, 25: {50: (1, {'@': 136}), 56: (1, {'@': 136}), 47: (1, {'@': 136}), 43: (1, {'@': 136}), 57: (1, {'@': 136}), 41: (1, {'@': 136}), 54: (1, {'@': 136}), 64: (1, {'@': 136}), 51: (1, {'@': 136}), 49: (1, {'@': 136}), 48: (1, {'@': 136}), 59: (1, {'@': 136}), 1: (1, {'@': 136}), 42: (1, {'@': 136}), 18: (1, {'@': 136}), 40: (1, {'@': 136}), 55: (1, {'@': 136}), 44: (1, {'@': 136}), 53: (1, {'@': 136}), 46: (1, {'@': 136}), 34: (1, {'@': 136}), 36: (1, {'@': 136}), 35: (1, {'@': 136}), 37: (1, {'@': 136}), 58: (1, {'@': 136}), 33: (1, {'@': 136}), 60: (1, {'@': 136}), 24: (1, {'@': 136}), 20: (1, {'@': 136}), 61: (1, {'@': 136}), 62: (1, {'@': 136}), 63: (1, {'@': 136})}, 26: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 202), 9: (0, 419), 58: (0, 355), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 27: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 362), 9: (0, 419), 10: (0, 421), 38: (0, 366), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 58: (0, 370), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 28: {50: (1, {'@': 133}), 56: (1, {'@': 133}), 47: (1, {'@': 133}), 43: (1, {'@': 133}), 57: (1, {'@': 133}), 41: (1, {'@': 133}), 54: (1, {'@': 133}), 64: (1, {'@': 133}), 51: (1, {'@': 133}), 49: (1, {'@': 133}), 48: (1, {'@': 133}), 59: (1, {'@': 133}), 1: (1, {'@': 133}), 42: (1, {'@': 133}), 18: (1, {'@': 133}), 40: (1, {'@': 133}), 55: (1, {'@': 133}), 44: (1, {'@': 133}), 53: (1, {'@': 133}), 46: (1, {'@': 133}), 34: (1, {'@': 133}), 36: (1, {'@': 133}), 35: (1, {'@': 133}), 37: (1, {'@': 133}), 58: (1, {'@': 133}), 33: (1, {'@': 133}), 60: (1, {'@': 133}), 24: (1, {'@': 133}), 20: (1, {'@': 133}), 61: (1, {'@': 133}), 62: (1, {'@': 133}), 63: (1, {'@': 133})}, 29: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 58: (0, 293), 8: (0, 359), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 30: {50: (1, {'@': 218}), 56: (1, {'@': 218}), 47: (1, {'@': 218}), 43: (1, {'@': 218}), 57: (1, {'@': 218}), 41: (1, {'@': 218}), 54: (1, {'@': 218}), 64: (1, {'@': 218}), 51: (1, {'@': 218}), 49: (1, {'@': 218}), 48: (1, {'@': 218}), 59: (1, {'@': 218}), 1: (1, {'@': 218}), 42: (1, {'@': 218}), 18: (1, {'@': 218}), 40: (1, {'@': 218}), 55: (1, {'@': 218}), 44: (1, {'@': 218}), 53: (1, {'@': 218}), 46: (1, {'@': 218}), 34: (1, {'@': 218}), 36: (1, {'@': 218}), 35: (1, {'@': 218}), 37: (1, {'@': 218}), 58: (1, {'@': 218}), 33: (1, {'@': 218}), 60: (1, {'@': 218}), 24: (1, {'@': 218}), 20: (1, {'@': 218}), 61: (1, {'@': 218}), 62: (1, {'@': 218}), 63: (1, {'@': 218})}, 31: {50: (1, {'@': 131}), 56: (1, {'@': 131}), 47: (1, {'@': 131}), 43: (1, {'@': 131}), 57: (1, {'@': 131}), 41: (1, {'@': 131}), 54: (1, {'@': 131}), 64: (1, {'@': 131}), 51: (1, {'@': 131}), 49: (1, {'@': 131}), 48: (1, {'@': 131}), 59: (1, {'@': 131}), 1: (1, {'@': 131}), 42: (1, {'@': 131}), 18: (1, {'@': 131}), 40: (1, {'@': 131}), 55: (1, {'@': 131}), 44: (1, {'@': 131}), 53: (1, {'@': 131}), 46: (1, {'@': 131}), 34: (1, {'@': 131}), 36: (1, {'@': 131}), 35: (1, {'@': 131}), 37: (1, {'@': 131}), 58: (1, {'@': 131}), 33: (1, {'@': 131}), 60: (1, {'@': 131}), 24: (1, {'@': 131}), 20: (1, {'@': 131}), 61: (1, {'@': 131}), 62: (1, {'@': 131}), 63: (1, {'@': 131})}, 32: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 417), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 33: {20: (1, {'@': 421}), 2: (1, {'@': 421}), 6: (1, {'@': 421})}, 34: {50: (1, {'@': 245}), 56: (1, {'@': 245}), 47: (1, {'@': 245}), 43: (1, {'@': 245}), 57: (1, {'@': 245}), 41: (1, {'@': 245}), 54: (1, {'@': 245}), 64: (1, {'@': 245}), 51: (1, {'@': 245}), 49: (1, {'@': 245}), 48: (1, {'@': 245}), 59: (1, {'@': 245}), 1: (1, {'@': 245}), 42: (1, {'@': 245}), 18: (1, {'@': 245}), 40: (1, {'@': 245}), 55: (1, {'@': 245}), 44: (1, {'@': 245}), 53: (1, {'@': 245}), 46: (1, {'@': 245}), 34: (1, {'@': 245}), 36: (1, {'@': 245}), 35: (1, {'@': 245}), 37: (1, {'@': 245}), 58: (1, {'@': 245}), 33: (1, {'@': 245}), 60: (1, {'@': 245}), 24: (1, {'@': 245}), 20: (1, {'@': 245}), 61: (1, {'@': 245}), 62: (1, {'@': 245}), 63: (1, {'@': 245})}, 35: {20: (1, {'@': 419}), 2: (1, {'@': 419}), 6: (1, {'@': 419})}, 36: {38: (0, 430), 35: (0, 515), 34: (0, 491), 24: (0, 429), 39: (0, 497), 36: (0, 509)}, 37: {2: (0, 58), 6: (0, 52), 20: (0, 519), 4: (0, 33)}, 38: {50: (1, {'@': 255}), 56: (1, {'@': 255}), 47: (1, {'@': 255}), 43: (1, {'@': 255}), 57: (1, {'@': 255}), 41: (1, {'@': 255}), 54: (1, {'@': 255}), 64: (1, {'@': 255}), 51: (1, {'@': 255}), 49: (1, {'@': 255}), 48: (1, {'@': 255}), 59: (1, {'@': 255}), 1: (1, {'@': 255}), 42: (1, {'@': 255}), 18: (1, {'@': 255}), 40: (1, {'@': 255}), 55: (1, {'@': 255}), 44: (1, {'@': 255}), 53: (1, {'@': 255}), 46: (1, {'@': 255}), 34: (1, {'@': 255}), 36: (1, {'@': 255}), 35: (1, {'@': 255}), 37: (1, {'@': 255}), 58: (1, {'@': 255}), 33: (1, {'@': 255}), 60: (1, {'@': 255}), 24: (1, {'@': 255}), 20: (1, {'@': 255}), 61: (1, {'@': 255}), 62: (1, {'@': 255}), 63: (1, {'@': 255})}, 39: {67: (0, 465), 4: (0, 475), 68: (0, 59), 34: (0, 491), 38: (0, 41), 39: (0, 497), 69: (0, 504), 36: (0, 509), 35: (0, 515), 20: (0, 519), 70: (0, 524), 24: (1, {'@': 48})}, 40: {35: (0, 515), 34: (0, 491), 61: (0, 556), 38: (0, 451), 39: (0, 497), 65: (0, 454), 24: (0, 461), 36: (0, 509)}, 41: {4: (0, 475), 68: (0, 328), 67: (0, 465), 20: (0, 519), 70: (0, 524), 69: (0, 504), 24: (1, {'@': 48})}, 42: {35: (0, 515), 38: (0, 382), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 382}), 15: (1, {'@': 382}), 6: (1, {'@': 382}), 10: (1, {'@': 382}), 18: (1, {'@': 382}), 9: (1, {'@': 382}), 32: (1, {'@': 382}), 17: (1, {'@': 382}), 2: (1, {'@': 382}), 20: (1, {'@': 382})}, 43: {0: (0, 53), 38: (0, 121), 2: (0, 62), 39: (0, 497), 8: (0, 581), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 44: {20: (1, {'@': 420}), 2: (1, {'@': 420}), 6: (1, {'@': 420})}, 45: {35: (0, 515), 34: (0, 491), 38: (0, 449), 39: (0, 497), 24: (0, 447), 36: (0, 509)}, 46: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 501), 36: (0, 509), 60: (1, {'@': 44})}, 47: {50: (1, {'@': 241}), 56: (1, {'@': 241}), 47: (1, {'@': 241}), 43: (1, {'@': 241}), 57: (1, {'@': 241}), 41: (1, {'@': 241}), 54: (1, {'@': 241}), 64: (1, {'@': 241}), 51: (1, {'@': 241}), 49: (1, {'@': 241}), 48: (1, {'@': 241}), 59: (1, {'@': 241}), 1: (1, {'@': 241}), 42: (1, {'@': 241}), 18: (1, {'@': 241}), 40: (1, {'@': 241}), 55: (1, {'@': 241}), 44: (1, {'@': 241}), 53: (1, {'@': 241}), 46: (1, {'@': 241}), 34: (1, {'@': 241}), 36: (1, {'@': 241}), 35: (1, {'@': 241}), 37: (1, {'@': 241}), 58: (1, {'@': 241}), 33: (1, {'@': 241}), 60: (1, {'@': 241}), 24: (1, {'@': 241}), 20: (1, {'@': 241}), 61: (1, {'@': 241}), 62: (1, {'@': 241}), 63: (1, {'@': 241})}, 48: {36: (1, {'@': 427}), 37: (1, {'@': 427}), 34: (1, {'@': 427}), 35: (1, {'@': 427}), 1: (1, {'@': 427}), 15: (1, {'@': 427}), 6: (1, {'@': 427}), 10: (1, {'@': 427}), 18: (1, {'@': 427}), 9: (1, {'@': 427}), 32: (1, {'@': 427}), 17: (1, {'@': 427}), 2: (1, {'@': 427}), 20: (1, {'@': 427}), 40: (1, {'@': 427}), 58: (1, {'@': 427}), 61: (1, {'@': 427}), 66: (1, {'@': 427}), 24: (1, {'@': 427}), 60: (1, {'@': 427}), 71: (1, {'@': 427}), 33: (1, {'@': 427})}, 49: {35: (0, 515), 38: (0, 470), 34: (0, 491), 39: (0, 497), 24: (0, 474), 36: (0, 509)}, 50: {50: (1, {'@': 441}), 56: (1, {'@': 441}), 37: (1, {'@': 441}), 57: (1, {'@': 441}), 58: (1, {'@': 441}), 51: (1, {'@': 441}), 33: (1, {'@': 441}), 48: (1, {'@': 441}), 59: (1, {'@': 441}), 1: (1, {'@': 441}), 42: (1, {'@': 441}), 18: (1, {'@': 441}), 34: (1, {'@': 441}), 35: (1, {'@': 441}), 40: (1, {'@': 441}), 60: (1, {'@': 441}), 24: (1, {'@': 441}), 44: (1, {'@': 441}), 20: (1, {'@': 441}), 61: (1, {'@': 441}), 47: (1, {'@': 441}), 62: (1, {'@': 441}), 43: (1, {'@': 441}), 41: (1, {'@': 441}), 54: (1, {'@': 441}), 63: (1, {'@': 441}), 64: (1, {'@': 441}), 49: (1, {'@': 441}), 36: (1, {'@': 441}), 55: (1, {'@': 441}), 53: (1, {'@': 441}), 46: (1, {'@': 441})}, 51: {24: (0, 467)}, 52: {20: (1, {'@': 422}), 2: (1, {'@': 422}), 6: (1, {'@': 422})}, 53: {56: (0, 485), 72: (0, 469), 10: (0, 478), 50: (1, {'@': 110}), 47: (1, {'@': 110}), 43: (1, {'@': 110}), 57: (1, {'@': 110}), 41: (1, {'@': 110}), 54: (1, {'@': 110}), 64: (1, {'@': 110}), 51: (1, {'@': 110}), 49: (1, {'@': 110}), 48: (1, {'@': 110}), 59: (1, {'@': 110}), 1: (1, {'@': 110}), 42: (1, {'@': 110}), 18: (1, {'@': 110}), 40: (1, {'@': 110}), 55: (1, {'@': 110}), 44: (1, {'@': 110}), 53: (1, {'@': 110}), 46: (1, {'@': 110}), 34: (1, {'@': 110}), 36: (1, {'@': 110}), 35: (1, {'@': 110}), 37: (1, {'@': 110}), 58: (1, {'@': 110}), 33: (1, {'@': 110}), 60: (1, {'@': 110}), 24: (1, {'@': 110}), 20: (1, {'@': 110}), 61: (1, {'@': 110}), 62: (1, {'@': 110}), 63: (1, {'@': 110})}, 54: {38: (0, 70), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 380}), 15: (1, {'@': 380}), 6: (1, {'@': 380}), 10: (1, {'@': 380}), 18: (1, {'@': 380}), 9: (1, {'@': 380}), 32: (1, {'@': 380}), 17: (1, {'@': 380}), 2: (1, {'@': 380}), 20: (1, {'@': 380})}, 55: {1: (1, {'@': 365}), 15: (1, {'@': 365}), 6: (1, {'@': 365}), 10: (1, {'@': 365}), 18: (1, {'@': 365}), 34: (1, {'@': 365}), 36: (1, {'@': 365}), 35: (1, {'@': 365}), 9: (1, {'@': 365}), 32: (1, {'@': 365}), 17: (1, {'@': 365}), 2: (1, {'@': 365}), 20: (1, {'@': 365})}, 56: {0: (0, 53), 8: (0, 669), 2: (0, 62), 39: (0, 497), 38: (0, 646), 73: (0, 659), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 37: (0, 551), 31: (0, 484)}, 57: {38: (0, 486), 24: (0, 490), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 65: (0, 496)}, 58: {67: (0, 465), 4: (0, 475), 34: (0, 491), 39: (0, 497), 69: (0, 504), 36: (0, 509), 68: (0, 499), 35: (0, 515), 38: (0, 502), 20: (0, 519), 70: (0, 524), 24: (1, {'@': 48})}, 59: {24: (0, 518)}, 60: {1: (1, {'@': 359}), 15: (1, {'@': 359}), 6: (1, {'@': 359}), 10: (1, {'@': 359}), 18: (1, {'@': 359}), 34: (1, {'@': 359}), 36: (1, {'@': 359}), 35: (1, {'@': 359}), 9: (1, {'@': 359}), 32: (1, {'@': 359}), 17: (1, {'@': 359}), 2: (1, {'@': 359}), 20: (1, {'@': 359})}, 61: {0: (0, 53), 8: (0, 492), 71: (0, 494), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 74: (0, 228), 1: (0, 61), 38: (0, 234), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 58: (0, 242), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 62: {0: (0, 53), 74: (0, 471), 71: (0, 494), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 252), 36: (0, 509), 7: (0, 535), 38: (0, 257), 1: (0, 61), 8: (0, 428), 9: (0, 419), 14: (0, 431), 15: (0, 433), 13: (0, 266), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 24: (0, 273), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 63: {38: (0, 503), 65: (0, 514), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 24: (0, 522), 35: (0, 515)}, 64: {50: (1, {'@': 233}), 56: (1, {'@': 233}), 47: (1, {'@': 233}), 43: (1, {'@': 233}), 57: (1, {'@': 233}), 41: (1, {'@': 233}), 54: (1, {'@': 233}), 64: (1, {'@': 233}), 51: (1, {'@': 233}), 49: (1, {'@': 233}), 48: (1, {'@': 233}), 59: (1, {'@': 233}), 1: (1, {'@': 233}), 42: (1, {'@': 233}), 18: (1, {'@': 233}), 40: (1, {'@': 233}), 55: (1, {'@': 233}), 44: (1, {'@': 233}), 53: (1, {'@': 233}), 46: (1, {'@': 233}), 34: (1, {'@': 233}), 36: (1, {'@': 233}), 35: (1, {'@': 233}), 37: (1, {'@': 233}), 58: (1, {'@': 233}), 33: (1, {'@': 233}), 60: (1, {'@': 233}), 24: (1, {'@': 233}), 20: (1, {'@': 233}), 61: (1, {'@': 233}), 62: (1, {'@': 233}), 63: (1, {'@': 233})}, 65: {50: (1, {'@': 288}), 56: (1, {'@': 288}), 47: (1, {'@': 288}), 43: (1, {'@': 288}), 57: (1, {'@': 288}), 41: (1, {'@': 288}), 54: (1, {'@': 288}), 64: (1, {'@': 288}), 51: (1, {'@': 288}), 49: (1, {'@': 288}), 48: (1, {'@': 288}), 59: (1, {'@': 288}), 1: (1, {'@': 288}), 42: (1, {'@': 288}), 18: (1, {'@': 288}), 40: (1, {'@': 288}), 55: (1, {'@': 288}), 44: (1, {'@': 288}), 53: (1, {'@': 288}), 46: (1, {'@': 288}), 34: (1, {'@': 288}), 36: (1, {'@': 288}), 35: (1, {'@': 288}), 37: (1, {'@': 288}), 58: (1, {'@': 288}), 33: (1, {'@': 288}), 60: (1, {'@': 288}), 24: (1, {'@': 288}), 20: (1, {'@': 288}), 61: (1, {'@': 288}), 62: (1, {'@': 288}), 63: (1, {'@': 288})}, 66: {24: (0, 64), 35: (0, 515), 38: (0, 456), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 67: {50: (1, {'@': 260}), 56: (1, {'@': 260}), 47: (1, {'@': 260}), 43: (1, {'@': 260}), 57: (1, {'@': 260}), 41: (1, {'@': 260}), 54: (1, {'@': 260}), 64: (1, {'@': 260}), 51: (1, {'@': 260}), 49: (1, {'@': 260}), 48: (1, {'@': 260}), 59: (1, {'@': 260}), 1: (1, {'@': 260}), 42: (1, {'@': 260}), 18: (1, {'@': 260}), 40: (1, {'@': 260}), 55: (1, {'@': 260}), 44: (1, {'@': 260}), 53: (1, {'@': 260}), 46: (1, {'@': 260}), 34: (1, {'@': 260}), 36: (1, {'@': 260}), 35: (1, {'@': 260}), 37: (1, {'@': 260}), 58: (1, {'@': 260}), 33: (1, {'@': 260}), 60: (1, {'@': 260}), 24: (1, {'@': 260}), 20: (1, {'@': 260}), 61: (1, {'@': 260}), 62: (1, {'@': 260}), 63: (1, {'@': 260})}, 68: {50: (1, {'@': 234}), 56: (1, {'@': 234}), 47: (1, {'@': 234}), 43: (1, {'@': 234}), 57: (1, {'@': 234}), 41: (1, {'@': 234}), 54: (1, {'@': 234}), 64: (1, {'@': 234}), 51: (1, {'@': 234}), 49: (1, {'@': 234}), 48: (1, {'@': 234}), 59: (1, {'@': 234}), 1: (1, {'@': 234}), 42: (1, {'@': 234}), 18: (1, {'@': 234}), 40: (1, {'@': 234}), 55: (1, {'@': 234}), 44: (1, {'@': 234}), 53: (1, {'@': 234}), 46: (1, {'@': 234}), 34: (1, {'@': 234}), 36: (1, {'@': 234}), 35: (1, {'@': 234}), 37: (1, {'@': 234}), 58: (1, {'@': 234}), 33: (1, {'@': 234}), 60: (1, {'@': 234}), 24: (1, {'@': 234}), 20: (1, {'@': 234}), 61: (1, {'@': 234}), 62: (1, {'@': 234}), 63: (1, {'@': 234})}, 69: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 694), 36: (0, 509), 1: (1, {'@': 384}), 15: (1, {'@': 384}), 6: (1, {'@': 384}), 10: (1, {'@': 384}), 18: (1, {'@': 384}), 9: (1, {'@': 384}), 32: (1, {'@': 384}), 17: (1, {'@': 384}), 2: (1, {'@': 384}), 20: (1, {'@': 384})}, 70: {1: (1, {'@': 379}), 15: (1, {'@': 379}), 6: (1, {'@': 379}), 10: (1, {'@': 379}), 18: (1, {'@': 379}), 34: (1, {'@': 379}), 36: (1, {'@': 379}), 35: (1, {'@': 379}), 9: (1, {'@': 379}), 32: (1, {'@': 379}), 17: (1, {'@': 379}), 2: (1, {'@': 379}), 20: (1, {'@': 379})}, 71: {1: (1, {'@': 397}), 15: (1, {'@': 397}), 6: (1, {'@': 397}), 10: (1, {'@': 397}), 18: (1, {'@': 397}), 34: (1, {'@': 397}), 36: (1, {'@': 397}), 35: (1, {'@': 397}), 9: (1, {'@': 397}), 32: (1, {'@': 397}), 17: (1, {'@': 397}), 2: (1, {'@': 397}), 20: (1, {'@': 397})}, 72: {1: (1, {'@': 355}), 15: (1, {'@': 355}), 6: (1, {'@': 355}), 10: (1, {'@': 355}), 18: (1, {'@': 355}), 34: (1, {'@': 355}), 36: (1, {'@': 355}), 35: (1, {'@': 355}), 9: (1, {'@': 355}), 32: (1, {'@': 355}), 17: (1, {'@': 355}), 2: (1, {'@': 355}), 20: (1, {'@': 355})}, 73: {41: (0, 510), 38: (0, 704), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 40: (0, 707), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 74: {40: (0, 531)}, 75: {35: (0, 515), 38: (0, 700), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 348}), 15: (1, {'@': 348}), 6: (1, {'@': 348}), 10: (1, {'@': 348}), 18: (1, {'@': 348}), 9: (1, {'@': 348}), 32: (1, {'@': 348}), 17: (1, {'@': 348}), 2: (1, {'@': 348}), 20: (1, {'@': 348})}, 76: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 527), 36: (0, 509), 1: (1, {'@': 354}), 15: (1, {'@': 354}), 6: (1, {'@': 354}), 10: (1, {'@': 354}), 18: (1, {'@': 354}), 9: (1, {'@': 354}), 32: (1, {'@': 354}), 17: (1, {'@': 354}), 2: (1, {'@': 354}), 20: (1, {'@': 354})}, 77: {63: (0, 575), 18: (0, 277), 41: (0, 510), 43: (0, 423), 44: (0, 425), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270)}, 78: {50: (1, {'@': 199}), 56: (1, {'@': 199}), 47: (1, {'@': 199}), 43: (1, {'@': 199}), 57: (1, {'@': 199}), 41: (1, {'@': 199}), 54: (1, {'@': 199}), 64: (1, {'@': 199}), 51: (1, {'@': 199}), 49: (1, {'@': 199}), 48: (1, {'@': 199}), 59: (1, {'@': 199}), 1: (1, {'@': 199}), 42: (1, {'@': 199}), 18: (1, {'@': 199}), 40: (1, {'@': 199}), 55: (1, {'@': 199}), 44: (1, {'@': 199}), 53: (1, {'@': 199}), 46: (1, {'@': 199}), 34: (1, {'@': 199}), 36: (1, {'@': 199}), 35: (1, {'@': 199}), 37: (1, {'@': 199}), 58: (1, {'@': 199}), 33: (1, {'@': 199}), 60: (1, {'@': 199}), 24: (1, {'@': 199}), 20: (1, {'@': 199}), 61: (1, {'@': 199}), 62: (1, {'@': 199}), 63: (1, {'@': 199})}, 79: {50: (1, {'@': 205}), 56: (1, {'@': 205}), 47: (1, {'@': 205}), 43: (1, {'@': 205}), 57: (1, {'@': 205}), 41: (1, {'@': 205}), 54: (1, {'@': 205}), 64: (1, {'@': 205}), 51: (1, {'@': 205}), 49: (1, {'@': 205}), 48: (1, {'@': 205}), 59: (1, {'@': 205}), 1: (1, {'@': 205}), 42: (1, {'@': 205}), 18: (1, {'@': 205}), 40: (1, {'@': 205}), 55: (1, {'@': 205}), 44: (1, {'@': 205}), 53: (1, {'@': 205}), 46: (1, {'@': 205}), 34: (1, {'@': 205}), 36: (1, {'@': 205}), 35: (1, {'@': 205}), 37: (1, {'@': 205}), 58: (1, {'@': 205}), 33: (1, {'@': 205}), 60: (1, {'@': 205}), 24: (1, {'@': 205}), 20: (1, {'@': 205}), 61: (1, {'@': 205}), 62: (1, {'@': 205}), 63: (1, {'@': 205})}, 80: {40: (0, 76)}, 81: {75: (0, 624), 34: (0, 491), 33: (0, 354), 39: (0, 497), 24: (0, 616), 76: (0, 561), 38: (0, 460), 36: (0, 509), 35: (0, 515)}, 82: {50: (1, {'@': 139}), 56: (1, {'@': 139}), 47: (1, {'@': 139}), 43: (1, {'@': 139}), 57: (1, {'@': 139}), 41: (1, {'@': 139}), 54: (1, {'@': 139}), 64: (1, {'@': 139}), 51: (1, {'@': 139}), 49: (1, {'@': 139}), 48: (1, {'@': 139}), 59: (1, {'@': 139}), 1: (1, {'@': 139}), 42: (1, {'@': 139}), 18: (1, {'@': 139}), 40: (1, {'@': 139}), 55: (1, {'@': 139}), 44: (1, {'@': 139}), 53: (1, {'@': 139}), 46: (1, {'@': 139}), 34: (1, {'@': 139}), 36: (1, {'@': 139}), 35: (1, {'@': 139}), 37: (1, {'@': 139}), 58: (1, {'@': 139}), 33: (1, {'@': 139}), 60: (1, {'@': 139}), 24: (1, {'@': 139}), 20: (1, {'@': 139}), 61: (1, {'@': 139}), 62: (1, {'@': 139}), 63: (1, {'@': 139})}, 83: {41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 38: (0, 314), 45: (0, 455), 46: (0, 442), 40: (0, 54), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 42: (0, 536), 55: (0, 224), 18: (0, 277)}, 84: {50: (1, {'@': 209}), 56: (1, {'@': 209}), 47: (1, {'@': 209}), 43: (1, {'@': 209}), 57: (1, {'@': 209}), 41: (1, {'@': 209}), 54: (1, {'@': 209}), 64: (1, {'@': 209}), 51: (1, {'@': 209}), 49: (1, {'@': 209}), 48: (1, {'@': 209}), 59: (1, {'@': 209}), 1: (1, {'@': 209}), 42: (1, {'@': 209}), 18: (1, {'@': 209}), 40: (1, {'@': 209}), 55: (1, {'@': 209}), 44: (1, {'@': 209}), 53: (1, {'@': 209}), 46: (1, {'@': 209}), 34: (1, {'@': 209}), 36: (1, {'@': 209}), 35: (1, {'@': 209}), 37: (1, {'@': 209}), 58: (1, {'@': 209}), 33: (1, {'@': 209}), 60: (1, {'@': 209}), 24: (1, {'@': 209}), 20: (1, {'@': 209}), 61: (1, {'@': 209}), 62: (1, {'@': 209}), 63: (1, {'@': 209})}, 85: {50: (1, {'@': 148}), 56: (1, {'@': 148}), 47: (1, {'@': 148}), 43: (1, {'@': 148}), 57: (1, {'@': 148}), 41: (1, {'@': 148}), 54: (1, {'@': 148}), 64: (1, {'@': 148}), 51: (1, {'@': 148}), 49: (1, {'@': 148}), 48: (1, {'@': 148}), 59: (1, {'@': 148}), 1: (1, {'@': 148}), 42: (1, {'@': 148}), 18: (1, {'@': 148}), 40: (1, {'@': 148}), 55: (1, {'@': 148}), 44: (1, {'@': 148}), 53: (1, {'@': 148}), 46: (1, {'@': 148}), 34: (1, {'@': 148}), 36: (1, {'@': 148}), 35: (1, {'@': 148}), 37: (1, {'@': 148}), 58: (1, {'@': 148}), 33: (1, {'@': 148}), 60: (1, {'@': 148}), 24: (1, {'@': 148}), 20: (1, {'@': 148}), 61: (1, {'@': 148}), 62: (1, {'@': 148}), 63: (1, {'@': 148})}, 86: {58: (0, 190)}, 87: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 362), 9: (0, 419), 58: (0, 239), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 38: (0, 245), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 88: {40: (0, 498)}, 89: {38: (0, 361), 41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 40: (0, 372), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 90: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 291), 36: (0, 509), 1: (1, {'@': 410}), 15: (1, {'@': 410}), 6: (1, {'@': 410}), 10: (1, {'@': 410}), 18: (1, {'@': 410}), 9: (1, {'@': 410}), 32: (1, {'@': 410}), 17: (1, {'@': 410}), 2: (1, {'@': 410}), 20: (1, {'@': 410})}, 91: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 232), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 92: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 332), 36: (0, 509), 1: (1, {'@': 404}), 15: (1, {'@': 404}), 6: (1, {'@': 404}), 10: (1, {'@': 404}), 18: (1, {'@': 404}), 9: (1, {'@': 404}), 32: (1, {'@': 404}), 17: (1, {'@': 404}), 2: (1, {'@': 404}), 20: (1, {'@': 404})}, 93: {77: (0, 8), 56: (0, 667), 50: (1, {'@': 189}), 37: (1, {'@': 189}), 57: (1, {'@': 189}), 58: (1, {'@': 189}), 51: (1, {'@': 189}), 33: (1, {'@': 189}), 48: (1, {'@': 189}), 59: (1, {'@': 189}), 1: (1, {'@': 189}), 42: (1, {'@': 189}), 18: (1, {'@': 189}), 34: (1, {'@': 189}), 35: (1, {'@': 189}), 40: (1, {'@': 189}), 60: (1, {'@': 189}), 24: (1, {'@': 189}), 44: (1, {'@': 189}), 20: (1, {'@': 189}), 61: (1, {'@': 189}), 47: (1, {'@': 189}), 62: (1, {'@': 189}), 43: (1, {'@': 189}), 41: (1, {'@': 189}), 54: (1, {'@': 189}), 63: (1, {'@': 189}), 64: (1, {'@': 189}), 49: (1, {'@': 189}), 36: (1, {'@': 189}), 55: (1, {'@': 189}), 53: (1, {'@': 189}), 46: (1, {'@': 189})}, 94: {50: (1, {'@': 119}), 56: (1, {'@': 119}), 47: (1, {'@': 119}), 43: (1, {'@': 119}), 57: (1, {'@': 119}), 41: (1, {'@': 119}), 54: (1, {'@': 119}), 64: (1, {'@': 119}), 51: (1, {'@': 119}), 49: (1, {'@': 119}), 48: (1, {'@': 119}), 59: (1, {'@': 119}), 1: (1, {'@': 119}), 42: (1, {'@': 119}), 18: (1, {'@': 119}), 40: (1, {'@': 119}), 55: (1, {'@': 119}), 44: (1, {'@': 119}), 53: (1, {'@': 119}), 46: (1, {'@': 119}), 34: (1, {'@': 119}), 36: (1, {'@': 119}), 35: (1, {'@': 119}), 37: (1, {'@': 119}), 58: (1, {'@': 119}), 33: (1, {'@': 119}), 60: (1, {'@': 119}), 24: (1, {'@': 119}), 20: (1, {'@': 119}), 61: (1, {'@': 119}), 62: (1, {'@': 119}), 63: (1, {'@': 119})}, 95: {24: (0, 566)}, 96: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 590), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 38: (0, 102), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488), 37: (1, {'@': 174})}, 97: {62: (0, 139), 41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 44: (0, 425), 65: (0, 151), 36: (0, 509), 45: (0, 455), 46: (0, 442), 38: (0, 157), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 24: (0, 166), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 50: (0, 270), 18: (0, 277)}, 98: {40: (0, 42)}, 99: {58: (0, 319)}, 100: {0: (0, 53), 1: (0, 61), 2: (0, 62), 8: (0, 344), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 101: {1: (0, 284), 78: (0, 15), 56: (0, 303), 77: (0, 16), 50: (1, {'@': 191}), 37: (1, {'@': 191}), 57: (1, {'@': 191}), 58: (1, {'@': 191}), 51: (1, {'@': 191}), 33: (1, {'@': 191}), 48: (1, {'@': 191}), 59: (1, {'@': 191}), 42: (1, {'@': 191}), 18: (1, {'@': 191}), 34: (1, {'@': 191}), 35: (1, {'@': 191}), 40: (1, {'@': 191}), 60: (1, {'@': 191}), 24: (1, {'@': 191}), 44: (1, {'@': 191}), 20: (1, {'@': 191}), 61: (1, {'@': 191}), 47: (1, {'@': 191}), 62: (1, {'@': 191}), 43: (1, {'@': 191}), 41: (1, {'@': 191}), 54: (1, {'@': 191}), 63: (1, {'@': 191}), 64: (1, {'@': 191}), 49: (1, {'@': 191}), 36: (1, {'@': 191}), 55: (1, {'@': 191}), 53: (1, {'@': 191}), 46: (1, {'@': 191})}, 102: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 542), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488), 34: (1, {'@': 173}), 35: (1, {'@': 173}), 36: (1, {'@': 173}), 37: (1, {'@': 173})}, 103: {50: (1, {'@': 117}), 56: (1, {'@': 117}), 47: (1, {'@': 117}), 43: (1, {'@': 117}), 57: (1, {'@': 117}), 41: (1, {'@': 117}), 54: (1, {'@': 117}), 64: (1, {'@': 117}), 51: (1, {'@': 117}), 49: (1, {'@': 117}), 48: (1, {'@': 117}), 59: (1, {'@': 117}), 1: (1, {'@': 117}), 42: (1, {'@': 117}), 18: (1, {'@': 117}), 40: (1, {'@': 117}), 55: (1, {'@': 117}), 44: (1, {'@': 117}), 53: (1, {'@': 117}), 46: (1, {'@': 117}), 34: (1, {'@': 117}), 36: (1, {'@': 117}), 35: (1, {'@': 117}), 37: (1, {'@': 117}), 58: (1, {'@': 117}), 33: (1, {'@': 117}), 60: (1, {'@': 117}), 24: (1, {'@': 117}), 20: (1, {'@': 117}), 61: (1, {'@': 117}), 62: (1, {'@': 117}), 63: (1, {'@': 117})}, 104: {35: (0, 515), 38: (0, 72), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 356}), 15: (1, {'@': 356}), 6: (1, {'@': 356}), 10: (1, {'@': 356}), 18: (1, {'@': 356}), 9: (1, {'@': 356}), 32: (1, {'@': 356}), 17: (1, {'@': 356}), 2: (1, {'@': 356}), 20: (1, {'@': 356})}, 105: {50: (1, {'@': 444}), 56: (1, {'@': 444}), 37: (1, {'@': 444}), 57: (1, {'@': 444}), 58: (1, {'@': 444}), 51: (1, {'@': 444}), 33: (1, {'@': 444}), 48: (1, {'@': 444}), 1: (1, {'@': 444}), 59: (1, {'@': 444}), 42: (1, {'@': 444}), 18: (1, {'@': 444}), 34: (1, {'@': 444}), 35: (1, {'@': 444}), 40: (1, {'@': 444}), 60: (1, {'@': 444}), 24: (1, {'@': 444}), 44: (1, {'@': 444}), 20: (1, {'@': 444}), 61: (1, {'@': 444}), 47: (1, {'@': 444}), 62: (1, {'@': 444}), 43: (1, {'@': 444}), 41: (1, {'@': 444}), 54: (1, {'@': 444}), 63: (1, {'@': 444}), 64: (1, {'@': 444}), 49: (1, {'@': 444}), 36: (1, {'@': 444}), 55: (1, {'@': 444}), 53: (1, {'@': 444}), 46: (1, {'@': 444})}, 106: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 38: (0, 74), 45: (0, 455), 46: (0, 442), 40: (0, 75), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 107: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 12), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 108: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 47: (0, 452), 48: (0, 440), 42: (0, 536), 55: (0, 224), 50: (0, 270), 18: (0, 277), 33: (1, {'@': 155}), 24: (1, {'@': 155}), 36: (1, {'@': 155}), 34: (1, {'@': 155}), 35: (1, {'@': 155})}, 109: {50: (1, {'@': 149}), 56: (1, {'@': 149}), 47: (1, {'@': 149}), 43: (1, {'@': 149}), 57: (1, {'@': 149}), 41: (1, {'@': 149}), 54: (1, {'@': 149}), 64: (1, {'@': 149}), 51: (1, {'@': 149}), 49: (1, {'@': 149}), 48: (1, {'@': 149}), 59: (1, {'@': 149}), 1: (1, {'@': 149}), 42: (1, {'@': 149}), 18: (1, {'@': 149}), 40: (1, {'@': 149}), 55: (1, {'@': 149}), 44: (1, {'@': 149}), 53: (1, {'@': 149}), 46: (1, {'@': 149}), 34: (1, {'@': 149}), 36: (1, {'@': 149}), 35: (1, {'@': 149}), 37: (1, {'@': 149}), 58: (1, {'@': 149}), 33: (1, {'@': 149}), 60: (1, {'@': 149}), 24: (1, {'@': 149}), 20: (1, {'@': 149}), 61: (1, {'@': 149}), 62: (1, {'@': 149}), 63: (1, {'@': 149})}, 110: {40: (0, 353)}, 111: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 715), 36: (0, 509), 1: (1, {'@': 358}), 15: (1, {'@': 358}), 6: (1, {'@': 358}), 10: (1, {'@': 358}), 18: (1, {'@': 358}), 9: (1, {'@': 358}), 32: (1, {'@': 358}), 17: (1, {'@': 358}), 2: (1, {'@': 358}), 20: (1, {'@': 358})}, 112: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 249), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 38: (0, 211), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 113: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 699), 36: (0, 509), 1: (1, {'@': 352}), 15: (1, {'@': 352}), 6: (1, {'@': 352}), 10: (1, {'@': 352}), 18: (1, {'@': 352}), 9: (1, {'@': 352}), 32: (1, {'@': 352}), 17: (1, {'@': 352}), 2: (1, {'@': 352}), 20: (1, {'@': 352})}, 114: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 58: (0, 233), 8: (0, 359), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 115: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 38: (0, 11), 58: (0, 9), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 116: {38: (0, 86), 35: (0, 515), 58: (0, 407), 34: (0, 491), 39: (0, 497), 65: (0, 405), 36: (0, 509), 61: (0, 556)}, 117: {40: (0, 298)}, 118: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 73), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 119: {35: (0, 515), 34: (0, 491), 38: (0, 19), 39: (0, 497), 58: (0, 13), 36: (0, 509)}, 120: {40: (0, 508)}, 121: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 20), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 122: {50: (1, {'@': 185}), 56: (1, {'@': 185}), 37: (1, {'@': 185}), 57: (1, {'@': 185}), 58: (1, {'@': 185}), 51: (1, {'@': 185}), 33: (1, {'@': 185}), 48: (1, {'@': 185}), 1: (1, {'@': 185}), 59: (1, {'@': 185}), 42: (1, {'@': 185}), 18: (1, {'@': 185}), 34: (1, {'@': 185}), 35: (1, {'@': 185}), 40: (1, {'@': 185}), 60: (1, {'@': 185}), 24: (1, {'@': 185}), 44: (1, {'@': 185}), 20: (1, {'@': 185}), 61: (1, {'@': 185}), 47: (1, {'@': 185}), 62: (1, {'@': 185}), 43: (1, {'@': 185}), 41: (1, {'@': 185}), 54: (1, {'@': 185}), 63: (1, {'@': 185}), 64: (1, {'@': 185}), 49: (1, {'@': 185}), 36: (1, {'@': 185}), 55: (1, {'@': 185}), 53: (1, {'@': 185}), 46: (1, {'@': 185})}, 123: {38: (0, 295), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 396}), 15: (1, {'@': 396}), 6: (1, {'@': 396}), 10: (1, {'@': 396}), 18: (1, {'@': 396}), 9: (1, {'@': 396}), 32: (1, {'@': 396}), 17: (1, {'@': 396}), 2: (1, {'@': 396}), 20: (1, {'@': 396})}, 124: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 23), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 38: (0, 159), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 125: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 202), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 58: (0, 223), 32: (0, 488)}, 126: {1: (1, {'@': 387}), 15: (1, {'@': 387}), 6: (1, {'@': 387}), 10: (1, {'@': 387}), 18: (1, {'@': 387}), 34: (1, {'@': 387}), 36: (1, {'@': 387}), 35: (1, {'@': 387}), 9: (1, {'@': 387}), 32: (1, {'@': 387}), 17: (1, {'@': 387}), 2: (1, {'@': 387}), 20: (1, {'@': 387})}, 127: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 590), 9: (0, 419), 38: (0, 192), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 58: (0, 189), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 128: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 38: (0, 91), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 388), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 129: {1: (1, {'@': 369}), 15: (1, {'@': 369}), 6: (1, {'@': 369}), 10: (1, {'@': 369}), 18: (1, {'@': 369}), 34: (1, {'@': 369}), 36: (1, {'@': 369}), 35: (1, {'@': 369}), 9: (1, {'@': 369}), 32: (1, {'@': 369}), 17: (1, {'@': 369}), 2: (1, {'@': 369}), 20: (1, {'@': 369})}, 130: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 22), 58: (0, 28), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 38: (0, 29), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 131: {66: (0, 3)}, 132: {50: (1, {'@': 122}), 56: (1, {'@': 122}), 47: (1, {'@': 122}), 43: (1, {'@': 122}), 57: (1, {'@': 122}), 41: (1, {'@': 122}), 54: (1, {'@': 122}), 64: (1, {'@': 122}), 51: (1, {'@': 122}), 49: (1, {'@': 122}), 48: (1, {'@': 122}), 59: (1, {'@': 122}), 1: (1, {'@': 122}), 42: (1, {'@': 122}), 18: (1, {'@': 122}), 40: (1, {'@': 122}), 55: (1, {'@': 122}), 44: (1, {'@': 122}), 53: (1, {'@': 122}), 46: (1, {'@': 122}), 34: (1, {'@': 122}), 36: (1, {'@': 122}), 35: (1, {'@': 122}), 37: (1, {'@': 122}), 58: (1, {'@': 122}), 33: (1, {'@': 122}), 60: (1, {'@': 122}), 24: (1, {'@': 122}), 20: (1, {'@': 122}), 61: (1, {'@': 122}), 62: (1, {'@': 122}), 63: (1, {'@': 122})}, 133: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 697), 36: (0, 509), 1: (1, {'@': 386}), 15: (1, {'@': 386}), 6: (1, {'@': 386}), 10: (1, {'@': 386}), 18: (1, {'@': 386}), 9: (1, {'@': 386}), 32: (1, {'@': 386}), 17: (1, {'@': 386}), 2: (1, {'@': 386}), 20: (1, {'@': 386})}, 134: {50: (1, {'@': 443}), 56: (1, {'@': 443}), 37: (1, {'@': 443}), 57: (1, {'@': 443}), 58: (1, {'@': 443}), 51: (1, {'@': 443}), 33: (1, {'@': 443}), 48: (1, {'@': 443}), 1: (1, {'@': 443}), 59: (1, {'@': 443}), 42: (1, {'@': 443}), 18: (1, {'@': 443}), 34: (1, {'@': 443}), 35: (1, {'@': 443}), 40: (1, {'@': 443}), 60: (1, {'@': 443}), 24: (1, {'@': 443}), 44: (1, {'@': 443}), 20: (1, {'@': 443}), 61: (1, {'@': 443}), 47: (1, {'@': 443}), 62: (1, {'@': 443}), 43: (1, {'@': 443}), 41: (1, {'@': 443}), 54: (1, {'@': 443}), 63: (1, {'@': 443}), 64: (1, {'@': 443}), 49: (1, {'@': 443}), 36: (1, {'@': 443}), 55: (1, {'@': 443}), 53: (1, {'@': 443}), 46: (1, {'@': 443})}, 135: {66: (0, 180)}, 136: {1: (1, {'@': 363}), 15: (1, {'@': 363}), 6: (1, {'@': 363}), 10: (1, {'@': 363}), 18: (1, {'@': 363}), 34: (1, {'@': 363}), 36: (1, {'@': 363}), 35: (1, {'@': 363}), 9: (1, {'@': 363}), 32: (1, {'@': 363}), 17: (1, {'@': 363}), 2: (1, {'@': 363}), 20: (1, {'@': 363})}, 137: {24: (1, {'@': 54}), 20: (1, {'@': 54}), 60: (1, {'@': 54}), 36: (1, {'@': 54}), 34: (1, {'@': 54}), 35: (1, {'@': 54})}, 138: {35: (0, 515), 65: (0, 368), 34: (0, 491), 61: (0, 556), 39: (0, 497), 36: (0, 509), 38: (0, 399), 58: (0, 401)}, 139: {65: (0, 259), 38: (0, 265), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 35: (0, 515), 24: (0, 278)}, 140: {0: (0, 53), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 8: (0, 248), 1: (0, 61), 38: (0, 549), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 141: {35: (0, 515), 38: (0, 60), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 360}), 15: (1, {'@': 360}), 6: (1, {'@': 360}), 10: (1, {'@': 360}), 18: (1, {'@': 360}), 9: (1, {'@': 360}), 32: (1, {'@': 360}), 17: (1, {'@': 360}), 2: (1, {'@': 360}), 20: (1, {'@': 360})}, 142: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 435}), 35: (1, {'@': 435}), 36: (1, {'@': 435}), 58: (1, {'@': 435}), 33: (1, {'@': 435}), 62: (1, {'@': 435}), 37: (1, {'@': 435})}, 143: {50: (1, {'@': 277}), 56: (1, {'@': 277}), 47: (1, {'@': 277}), 43: (1, {'@': 277}), 57: (1, {'@': 277}), 41: (1, {'@': 277}), 54: (1, {'@': 277}), 64: (1, {'@': 277}), 51: (1, {'@': 277}), 49: (1, {'@': 277}), 48: (1, {'@': 277}), 59: (1, {'@': 277}), 1: (1, {'@': 277}), 42: (1, {'@': 277}), 18: (1, {'@': 277}), 40: (1, {'@': 277}), 55: (1, {'@': 277}), 44: (1, {'@': 277}), 53: (1, {'@': 277}), 46: (1, {'@': 277}), 34: (1, {'@': 277}), 36: (1, {'@': 277}), 35: (1, {'@': 277}), 37: (1, {'@': 277}), 58: (1, {'@': 277}), 33: (1, {'@': 277}), 60: (1, {'@': 277}), 24: (1, {'@': 277}), 20: (1, {'@': 277}), 61: (1, {'@': 277}), 62: (1, {'@': 277}), 63: (1, {'@': 277})}, 144: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 8: (0, 395), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 145: {35: (0, 515), 34: (0, 491), 39: (0, 497), 24: (0, 585), 38: (0, 626), 36: (0, 509)}, 146: {50: (1, {'@': 91}), 56: (1, {'@': 91}), 47: (1, {'@': 91}), 43: (1, {'@': 91}), 57: (1, {'@': 91}), 41: (1, {'@': 91}), 54: (1, {'@': 91}), 64: (1, {'@': 91}), 51: (1, {'@': 91}), 49: (1, {'@': 91}), 48: (1, {'@': 91}), 59: (1, {'@': 91}), 1: (1, {'@': 91}), 42: (1, {'@': 91}), 18: (1, {'@': 91}), 40: (1, {'@': 91}), 55: (1, {'@': 91}), 44: (1, {'@': 91}), 53: (1, {'@': 91}), 46: (1, {'@': 91}), 34: (1, {'@': 91}), 36: (1, {'@': 91}), 35: (1, {'@': 91}), 37: (1, {'@': 91}), 58: (1, {'@': 91}), 33: (1, {'@': 91}), 60: (1, {'@': 91}), 24: (1, {'@': 91}), 20: (1, {'@': 91}), 61: (1, {'@': 91}), 62: (1, {'@': 91}), 63: (1, {'@': 91})}, 147: {40: (0, 111)}, 148: {50: (1, {'@': 138}), 56: (1, {'@': 138}), 47: (1, {'@': 138}), 43: (1, {'@': 138}), 57: (1, {'@': 138}), 41: (1, {'@': 138}), 54: (1, {'@': 138}), 64: (1, {'@': 138}), 51: (1, {'@': 138}), 49: (1, {'@': 138}), 48: (1, {'@': 138}), 59: (1, {'@': 138}), 1: (1, {'@': 138}), 42: (1, {'@': 138}), 18: (1, {'@': 138}), 40: (1, {'@': 138}), 55: (1, {'@': 138}), 44: (1, {'@': 138}), 53: (1, {'@': 138}), 46: (1, {'@': 138}), 34: (1, {'@': 138}), 36: (1, {'@': 138}), 35: (1, {'@': 138}), 37: (1, {'@': 138}), 58: (1, {'@': 138}), 33: (1, {'@': 138}), 60: (1, {'@': 138}), 24: (1, {'@': 138}), 20: (1, {'@': 138}), 61: (1, {'@': 138}), 62: (1, {'@': 138}), 63: (1, {'@': 138})}, 149: {50: (1, {'@': 323}), 56: (1, {'@': 323}), 47: (1, {'@': 323}), 43: (1, {'@': 323}), 57: (1, {'@': 323}), 41: (1, {'@': 323}), 54: (1, {'@': 323}), 64: (1, {'@': 323}), 51: (1, {'@': 323}), 49: (1, {'@': 323}), 48: (1, {'@': 323}), 59: (1, {'@': 323}), 1: (1, {'@': 323}), 42: (1, {'@': 323}), 18: (1, {'@': 323}), 40: (1, {'@': 323}), 55: (1, {'@': 323}), 44: (1, {'@': 323}), 53: (1, {'@': 323}), 46: (1, {'@': 323}), 34: (1, {'@': 323}), 36: (1, {'@': 323}), 35: (1, {'@': 323}), 37: (1, {'@': 323}), 58: (1, {'@': 323}), 33: (1, {'@': 323}), 60: (1, {'@': 323}), 24: (1, {'@': 323}), 20: (1, {'@': 323}), 61: (1, {'@': 323}), 62: (1, {'@': 323}), 63: (1, {'@': 323})}, 150: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 23), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 58: (0, 25), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 38: (0, 26), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 151: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 160), 24: (0, 260), 36: (0, 509)}, 152: {33: (0, 636), 34: (0, 491), 39: (0, 497), 62: (0, 264), 38: (0, 274), 36: (0, 509), 35: (0, 515), 37: (1, {'@': 172})}, 153: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 66}), 40: (1, {'@': 66}), 34: (1, {'@': 66}), 36: (1, {'@': 66}), 35: (1, {'@': 66}), 37: (1, {'@': 66}), 58: (1, {'@': 66}), 33: (1, {'@': 66}), 60: (1, {'@': 66}), 24: (1, {'@': 66}), 20: (1, {'@': 66}), 61: (1, {'@': 66}), 62: (1, {'@': 66}), 63: (1, {'@': 66})}, 154: {50: (1, {'@': 321}), 56: (1, {'@': 321}), 47: (1, {'@': 321}), 43: (1, {'@': 321}), 57: (1, {'@': 321}), 41: (1, {'@': 321}), 54: (1, {'@': 321}), 64: (1, {'@': 321}), 51: (1, {'@': 321}), 49: (1, {'@': 321}), 48: (1, {'@': 321}), 59: (1, {'@': 321}), 1: (1, {'@': 321}), 42: (1, {'@': 321}), 18: (1, {'@': 321}), 40: (1, {'@': 321}), 55: (1, {'@': 321}), 44: (1, {'@': 321}), 53: (1, {'@': 321}), 46: (1, {'@': 321}), 34: (1, {'@': 321}), 36: (1, {'@': 321}), 35: (1, {'@': 321}), 37: (1, {'@': 321}), 58: (1, {'@': 321}), 33: (1, {'@': 321}), 60: (1, {'@': 321}), 24: (1, {'@': 321}), 20: (1, {'@': 321}), 61: (1, {'@': 321}), 62: (1, {'@': 321}), 63: (1, {'@': 321})}, 155: {0: (0, 53), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 8: (0, 412), 38: (0, 238), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 156: {35: (0, 515), 34: (0, 491), 39: (0, 497), 58: (0, 393), 38: (0, 379), 36: (0, 509)}, 157: {24: (0, 236), 35: (0, 515), 65: (0, 283), 38: (0, 290), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556)}, 158: {50: (1, {'@': 326}), 56: (1, {'@': 326}), 47: (1, {'@': 326}), 43: (1, {'@': 326}), 57: (1, {'@': 326}), 41: (1, {'@': 326}), 54: (1, {'@': 326}), 64: (1, {'@': 326}), 51: (1, {'@': 326}), 49: (1, {'@': 326}), 48: (1, {'@': 326}), 59: (1, {'@': 326}), 1: (1, {'@': 326}), 42: (1, {'@': 326}), 18: (1, {'@': 326}), 40: (1, {'@': 326}), 55: (1, {'@': 326}), 44: (1, {'@': 326}), 53: (1, {'@': 326}), 46: (1, {'@': 326}), 34: (1, {'@': 326}), 36: (1, {'@': 326}), 35: (1, {'@': 326}), 37: (1, {'@': 326}), 58: (1, {'@': 326}), 33: (1, {'@': 326}), 60: (1, {'@': 326}), 24: (1, {'@': 326}), 20: (1, {'@': 326}), 61: (1, {'@': 326}), 62: (1, {'@': 326}), 63: (1, {'@': 326})}, 159: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 202), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 160: {24: (0, 208)}, 161: {24: (0, 570)}, 162: {58: (0, 668)}, 163: {50: (1, {'@': 213}), 56: (1, {'@': 213}), 47: (1, {'@': 213}), 43: (1, {'@': 213}), 57: (1, {'@': 213}), 41: (1, {'@': 213}), 54: (1, {'@': 213}), 64: (1, {'@': 213}), 51: (1, {'@': 213}), 49: (1, {'@': 213}), 48: (1, {'@': 213}), 59: (1, {'@': 213}), 1: (1, {'@': 213}), 42: (1, {'@': 213}), 18: (1, {'@': 213}), 40: (1, {'@': 213}), 55: (1, {'@': 213}), 44: (1, {'@': 213}), 53: (1, {'@': 213}), 46: (1, {'@': 213}), 34: (1, {'@': 213}), 36: (1, {'@': 213}), 35: (1, {'@': 213}), 37: (1, {'@': 213}), 58: (1, {'@': 213}), 33: (1, {'@': 213}), 60: (1, {'@': 213}), 24: (1, {'@': 213}), 20: (1, {'@': 213}), 61: (1, {'@': 213}), 62: (1, {'@': 213}), 63: (1, {'@': 213})}, 164: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 269), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 38: (0, 331), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 165: {50: (1, {'@': 320}), 56: (1, {'@': 320}), 47: (1, {'@': 320}), 43: (1, {'@': 320}), 57: (1, {'@': 320}), 41: (1, {'@': 320}), 54: (1, {'@': 320}), 64: (1, {'@': 320}), 51: (1, {'@': 320}), 49: (1, {'@': 320}), 48: (1, {'@': 320}), 59: (1, {'@': 320}), 1: (1, {'@': 320}), 42: (1, {'@': 320}), 18: (1, {'@': 320}), 40: (1, {'@': 320}), 55: (1, {'@': 320}), 44: (1, {'@': 320}), 53: (1, {'@': 320}), 46: (1, {'@': 320}), 34: (1, {'@': 320}), 36: (1, {'@': 320}), 35: (1, {'@': 320}), 37: (1, {'@': 320}), 58: (1, {'@': 320}), 33: (1, {'@': 320}), 60: (1, {'@': 320}), 24: (1, {'@': 320}), 20: (1, {'@': 320}), 61: (1, {'@': 320}), 62: (1, {'@': 320}), 63: (1, {'@': 320})}, 166: {50: (1, {'@': 332}), 56: (1, {'@': 332}), 47: (1, {'@': 332}), 43: (1, {'@': 332}), 57: (1, {'@': 332}), 41: (1, {'@': 332}), 54: (1, {'@': 332}), 64: (1, {'@': 332}), 51: (1, {'@': 332}), 49: (1, {'@': 332}), 48: (1, {'@': 332}), 59: (1, {'@': 332}), 1: (1, {'@': 332}), 42: (1, {'@': 332}), 18: (1, {'@': 332}), 40: (1, {'@': 332}), 55: (1, {'@': 332}), 44: (1, {'@': 332}), 53: (1, {'@': 332}), 46: (1, {'@': 332}), 34: (1, {'@': 332}), 36: (1, {'@': 332}), 35: (1, {'@': 332}), 37: (1, {'@': 332}), 58: (1, {'@': 332}), 33: (1, {'@': 332}), 60: (1, {'@': 332}), 24: (1, {'@': 332}), 20: (1, {'@': 332}), 61: (1, {'@': 332}), 62: (1, {'@': 332}), 63: (1, {'@': 332})}, 167: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 350), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 168: {50: (1, {'@': 216}), 56: (1, {'@': 216}), 47: (1, {'@': 216}), 43: (1, {'@': 216}), 57: (1, {'@': 216}), 41: (1, {'@': 216}), 54: (1, {'@': 216}), 64: (1, {'@': 216}), 51: (1, {'@': 216}), 49: (1, {'@': 216}), 48: (1, {'@': 216}), 59: (1, {'@': 216}), 1: (1, {'@': 216}), 42: (1, {'@': 216}), 18: (1, {'@': 216}), 40: (1, {'@': 216}), 55: (1, {'@': 216}), 44: (1, {'@': 216}), 53: (1, {'@': 216}), 46: (1, {'@': 216}), 34: (1, {'@': 216}), 36: (1, {'@': 216}), 35: (1, {'@': 216}), 37: (1, {'@': 216}), 58: (1, {'@': 216}), 33: (1, {'@': 216}), 60: (1, {'@': 216}), 24: (1, {'@': 216}), 20: (1, {'@': 216}), 61: (1, {'@': 216}), 62: (1, {'@': 216}), 63: (1, {'@': 216})}, 169: {33: (0, 27), 35: (0, 515), 38: (0, 21), 34: (0, 491), 58: (0, 31), 39: (0, 497), 36: (0, 509)}, 170: {24: (0, 710)}, 171: {35: (0, 515), 33: (0, 591), 34: (0, 491), 39: (0, 497), 38: (0, 194), 58: (0, 198), 36: (0, 509)}, 172: {58: (0, 79), 35: (0, 515), 38: (0, 204), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 173: {50: (1, {'@': 276}), 56: (1, {'@': 276}), 47: (1, {'@': 276}), 43: (1, {'@': 276}), 57: (1, {'@': 276}), 41: (1, {'@': 276}), 54: (1, {'@': 276}), 64: (1, {'@': 276}), 51: (1, {'@': 276}), 49: (1, {'@': 276}), 48: (1, {'@': 276}), 59: (1, {'@': 276}), 1: (1, {'@': 276}), 42: (1, {'@': 276}), 18: (1, {'@': 276}), 40: (1, {'@': 276}), 55: (1, {'@': 276}), 44: (1, {'@': 276}), 53: (1, {'@': 276}), 46: (1, {'@': 276}), 34: (1, {'@': 276}), 36: (1, {'@': 276}), 35: (1, {'@': 276}), 37: (1, {'@': 276}), 58: (1, {'@': 276}), 33: (1, {'@': 276}), 60: (1, {'@': 276}), 24: (1, {'@': 276}), 20: (1, {'@': 276}), 61: (1, {'@': 276}), 62: (1, {'@': 276}), 63: (1, {'@': 276})}, 174: {50: (1, {'@': 310}), 56: (1, {'@': 310}), 47: (1, {'@': 310}), 43: (1, {'@': 310}), 57: (1, {'@': 310}), 41: (1, {'@': 310}), 54: (1, {'@': 310}), 64: (1, {'@': 310}), 51: (1, {'@': 310}), 49: (1, {'@': 310}), 48: (1, {'@': 310}), 59: (1, {'@': 310}), 1: (1, {'@': 310}), 42: (1, {'@': 310}), 18: (1, {'@': 310}), 40: (1, {'@': 310}), 55: (1, {'@': 310}), 44: (1, {'@': 310}), 53: (1, {'@': 310}), 46: (1, {'@': 310}), 34: (1, {'@': 310}), 36: (1, {'@': 310}), 35: (1, {'@': 310}), 37: (1, {'@': 310}), 58: (1, {'@': 310}), 33: (1, {'@': 310}), 60: (1, {'@': 310}), 24: (1, {'@': 310}), 20: (1, {'@': 310}), 61: (1, {'@': 310}), 62: (1, {'@': 310}), 63: (1, {'@': 310})}, 175: {35: (0, 515), 34: (0, 491), 38: (0, 706), 39: (0, 497), 24: (0, 709), 36: (0, 509)}, 176: {50: (1, {'@': 134}), 56: (1, {'@': 134}), 47: (1, {'@': 134}), 43: (1, {'@': 134}), 57: (1, {'@': 134}), 41: (1, {'@': 134}), 54: (1, {'@': 134}), 64: (1, {'@': 134}), 51: (1, {'@': 134}), 49: (1, {'@': 134}), 48: (1, {'@': 134}), 59: (1, {'@': 134}), 1: (1, {'@': 134}), 42: (1, {'@': 134}), 18: (1, {'@': 134}), 40: (1, {'@': 134}), 55: (1, {'@': 134}), 44: (1, {'@': 134}), 53: (1, {'@': 134}), 46: (1, {'@': 134}), 34: (1, {'@': 134}), 36: (1, {'@': 134}), 35: (1, {'@': 134}), 37: (1, {'@': 134}), 58: (1, {'@': 134}), 33: (1, {'@': 134}), 60: (1, {'@': 134}), 24: (1, {'@': 134}), 20: (1, {'@': 134}), 61: (1, {'@': 134}), 62: (1, {'@': 134}), 63: (1, {'@': 134})}, 177: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 541), 24: (0, 538), 36: (0, 509)}, 178: {50: (1, {'@': 300}), 56: (1, {'@': 300}), 47: (1, {'@': 300}), 43: (1, {'@': 300}), 57: (1, {'@': 300}), 41: (1, {'@': 300}), 54: (1, {'@': 300}), 64: (1, {'@': 300}), 51: (1, {'@': 300}), 49: (1, {'@': 300}), 48: (1, {'@': 300}), 59: (1, {'@': 300}), 1: (1, {'@': 300}), 42: (1, {'@': 300}), 18: (1, {'@': 300}), 40: (1, {'@': 300}), 55: (1, {'@': 300}), 44: (1, {'@': 300}), 53: (1, {'@': 300}), 46: (1, {'@': 300}), 34: (1, {'@': 300}), 36: (1, {'@': 300}), 35: (1, {'@': 300}), 37: (1, {'@': 300}), 58: (1, {'@': 300}), 33: (1, {'@': 300}), 60: (1, {'@': 300}), 24: (1, {'@': 300}), 20: (1, {'@': 300}), 61: (1, {'@': 300}), 62: (1, {'@': 300}), 63: (1, {'@': 300})}, 179: {50: (1, {'@': 206}), 56: (1, {'@': 206}), 47: (1, {'@': 206}), 43: (1, {'@': 206}), 57: (1, {'@': 206}), 41: (1, {'@': 206}), 54: (1, {'@': 206}), 64: (1, {'@': 206}), 51: (1, {'@': 206}), 49: (1, {'@': 206}), 48: (1, {'@': 206}), 59: (1, {'@': 206}), 1: (1, {'@': 206}), 42: (1, {'@': 206}), 18: (1, {'@': 206}), 40: (1, {'@': 206}), 55: (1, {'@': 206}), 44: (1, {'@': 206}), 53: (1, {'@': 206}), 46: (1, {'@': 206}), 34: (1, {'@': 206}), 36: (1, {'@': 206}), 35: (1, {'@': 206}), 37: (1, {'@': 206}), 58: (1, {'@': 206}), 33: (1, {'@': 206}), 60: (1, {'@': 206}), 24: (1, {'@': 206}), 20: (1, {'@': 206}), 61: (1, {'@': 206}), 62: (1, {'@': 206}), 63: (1, {'@': 206})}, 180: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 685), 8: (0, 83), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 181: {50: (1, {'@': 308}), 56: (1, {'@': 308}), 47: (1, {'@': 308}), 43: (1, {'@': 308}), 57: (1, {'@': 308}), 41: (1, {'@': 308}), 54: (1, {'@': 308}), 64: (1, {'@': 308}), 51: (1, {'@': 308}), 49: (1, {'@': 308}), 48: (1, {'@': 308}), 59: (1, {'@': 308}), 1: (1, {'@': 308}), 42: (1, {'@': 308}), 18: (1, {'@': 308}), 40: (1, {'@': 308}), 55: (1, {'@': 308}), 44: (1, {'@': 308}), 53: (1, {'@': 308}), 46: (1, {'@': 308}), 34: (1, {'@': 308}), 36: (1, {'@': 308}), 35: (1, {'@': 308}), 37: (1, {'@': 308}), 58: (1, {'@': 308}), 33: (1, {'@': 308}), 60: (1, {'@': 308}), 24: (1, {'@': 308}), 20: (1, {'@': 308}), 61: (1, {'@': 308}), 62: (1, {'@': 308}), 63: (1, {'@': 308})}, 182: {38: (0, 294), 41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 62: (0, 253), 24: (0, 543), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 65: (0, 546), 50: (0, 270), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 18: (0, 277)}, 183: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 542), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 58: (0, 82), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 184: {50: (1, {'@': 120}), 56: (1, {'@': 120}), 47: (1, {'@': 120}), 43: (1, {'@': 120}), 57: (1, {'@': 120}), 41: (1, {'@': 120}), 54: (1, {'@': 120}), 64: (1, {'@': 120}), 51: (1, {'@': 120}), 49: (1, {'@': 120}), 48: (1, {'@': 120}), 59: (1, {'@': 120}), 1: (1, {'@': 120}), 42: (1, {'@': 120}), 18: (1, {'@': 120}), 40: (1, {'@': 120}), 55: (1, {'@': 120}), 44: (1, {'@': 120}), 53: (1, {'@': 120}), 46: (1, {'@': 120}), 34: (1, {'@': 120}), 36: (1, {'@': 120}), 35: (1, {'@': 120}), 37: (1, {'@': 120}), 58: (1, {'@': 120}), 33: (1, {'@': 120}), 60: (1, {'@': 120}), 24: (1, {'@': 120}), 20: (1, {'@': 120}), 61: (1, {'@': 120}), 62: (1, {'@': 120}), 63: (1, {'@': 120})}, 185: {24: (0, 705)}, 186: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 33: (1, {'@': 154}), 24: (1, {'@': 154}), 36: (1, {'@': 154}), 34: (1, {'@': 154}), 35: (1, {'@': 154})}, 187: {38: (0, 577), 24: (0, 587), 34: (0, 491), 65: (0, 596), 39: (0, 497), 61: (0, 556), 36: (0, 509), 35: (0, 515)}, 188: {50: (1, {'@': 140}), 56: (1, {'@': 140}), 47: (1, {'@': 140}), 43: (1, {'@': 140}), 57: (1, {'@': 140}), 41: (1, {'@': 140}), 54: (1, {'@': 140}), 64: (1, {'@': 140}), 51: (1, {'@': 140}), 49: (1, {'@': 140}), 48: (1, {'@': 140}), 59: (1, {'@': 140}), 1: (1, {'@': 140}), 42: (1, {'@': 140}), 18: (1, {'@': 140}), 40: (1, {'@': 140}), 55: (1, {'@': 140}), 44: (1, {'@': 140}), 53: (1, {'@': 140}), 46: (1, {'@': 140}), 34: (1, {'@': 140}), 36: (1, {'@': 140}), 35: (1, {'@': 140}), 37: (1, {'@': 140}), 58: (1, {'@': 140}), 33: (1, {'@': 140}), 60: (1, {'@': 140}), 24: (1, {'@': 140}), 20: (1, {'@': 140}), 61: (1, {'@': 140}), 62: (1, {'@': 140}), 63: (1, {'@': 140})}, 189: {50: (1, {'@': 126}), 56: (1, {'@': 126}), 47: (1, {'@': 126}), 43: (1, {'@': 126}), 57: (1, {'@': 126}), 41: (1, {'@': 126}), 54: (1, {'@': 126}), 64: (1, {'@': 126}), 51: (1, {'@': 126}), 49: (1, {'@': 126}), 48: (1, {'@': 126}), 59: (1, {'@': 126}), 1: (1, {'@': 126}), 42: (1, {'@': 126}), 18: (1, {'@': 126}), 40: (1, {'@': 126}), 55: (1, {'@': 126}), 44: (1, {'@': 126}), 53: (1, {'@': 126}), 46: (1, {'@': 126}), 34: (1, {'@': 126}), 36: (1, {'@': 126}), 35: (1, {'@': 126}), 37: (1, {'@': 126}), 58: (1, {'@': 126}), 33: (1, {'@': 126}), 60: (1, {'@': 126}), 24: (1, {'@': 126}), 20: (1, {'@': 126}), 61: (1, {'@': 126}), 62: (1, {'@': 126}), 63: (1, {'@': 126})}, 190: {50: (1, {'@': 202}), 56: (1, {'@': 202}), 47: (1, {'@': 202}), 43: (1, {'@': 202}), 57: (1, {'@': 202}), 41: (1, {'@': 202}), 54: (1, {'@': 202}), 64: (1, {'@': 202}), 51: (1, {'@': 202}), 49: (1, {'@': 202}), 48: (1, {'@': 202}), 59: (1, {'@': 202}), 1: (1, {'@': 202}), 42: (1, {'@': 202}), 18: (1, {'@': 202}), 40: (1, {'@': 202}), 55: (1, {'@': 202}), 44: (1, {'@': 202}), 53: (1, {'@': 202}), 46: (1, {'@': 202}), 34: (1, {'@': 202}), 36: (1, {'@': 202}), 35: (1, {'@': 202}), 37: (1, {'@': 202}), 58: (1, {'@': 202}), 33: (1, {'@': 202}), 60: (1, {'@': 202}), 24: (1, {'@': 202}), 20: (1, {'@': 202}), 61: (1, {'@': 202}), 62: (1, {'@': 202}), 63: (1, {'@': 202})}, 191: {50: (1, {'@': 316}), 56: (1, {'@': 316}), 47: (1, {'@': 316}), 43: (1, {'@': 316}), 57: (1, {'@': 316}), 41: (1, {'@': 316}), 54: (1, {'@': 316}), 64: (1, {'@': 316}), 51: (1, {'@': 316}), 49: (1, {'@': 316}), 48: (1, {'@': 316}), 59: (1, {'@': 316}), 1: (1, {'@': 316}), 42: (1, {'@': 316}), 18: (1, {'@': 316}), 40: (1, {'@': 316}), 55: (1, {'@': 316}), 44: (1, {'@': 316}), 53: (1, {'@': 316}), 46: (1, {'@': 316}), 34: (1, {'@': 316}), 36: (1, {'@': 316}), 35: (1, {'@': 316}), 37: (1, {'@': 316}), 58: (1, {'@': 316}), 33: (1, {'@': 316}), 60: (1, {'@': 316}), 24: (1, {'@': 316}), 20: (1, {'@': 316}), 61: (1, {'@': 316}), 62: (1, {'@': 316}), 63: (1, {'@': 316})}, 192: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 542), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 58: (0, 210), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 193: {24: (0, 712)}, 194: {58: (0, 364)}, 195: {50: (1, {'@': 92}), 56: (1, {'@': 92}), 47: (1, {'@': 92}), 43: (1, {'@': 92}), 57: (1, {'@': 92}), 41: (1, {'@': 92}), 54: (1, {'@': 92}), 64: (1, {'@': 92}), 51: (1, {'@': 92}), 49: (1, {'@': 92}), 48: (1, {'@': 92}), 59: (1, {'@': 92}), 1: (1, {'@': 92}), 42: (1, {'@': 92}), 18: (1, {'@': 92}), 40: (1, {'@': 92}), 55: (1, {'@': 92}), 44: (1, {'@': 92}), 53: (1, {'@': 92}), 46: (1, {'@': 92}), 34: (1, {'@': 92}), 36: (1, {'@': 92}), 35: (1, {'@': 92}), 37: (1, {'@': 92}), 58: (1, {'@': 92}), 33: (1, {'@': 92}), 60: (1, {'@': 92}), 24: (1, {'@': 92}), 20: (1, {'@': 92}), 61: (1, {'@': 92}), 62: (1, {'@': 92}), 63: (1, {'@': 92})}, 196: {50: (1, {'@': 313}), 56: (1, {'@': 313}), 47: (1, {'@': 313}), 43: (1, {'@': 313}), 57: (1, {'@': 313}), 41: (1, {'@': 313}), 54: (1, {'@': 313}), 64: (1, {'@': 313}), 51: (1, {'@': 313}), 49: (1, {'@': 313}), 48: (1, {'@': 313}), 59: (1, {'@': 313}), 1: (1, {'@': 313}), 42: (1, {'@': 313}), 18: (1, {'@': 313}), 40: (1, {'@': 313}), 55: (1, {'@': 313}), 44: (1, {'@': 313}), 53: (1, {'@': 313}), 46: (1, {'@': 313}), 34: (1, {'@': 313}), 36: (1, {'@': 313}), 35: (1, {'@': 313}), 37: (1, {'@': 313}), 58: (1, {'@': 313}), 33: (1, {'@': 313}), 60: (1, {'@': 313}), 24: (1, {'@': 313}), 20: (1, {'@': 313}), 61: (1, {'@': 313}), 62: (1, {'@': 313}), 63: (1, {'@': 313})}, 197: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 89}), 40: (1, {'@': 89}), 36: (1, {'@': 89}), 35: (1, {'@': 89}), 58: (1, {'@': 89}), 61: (1, {'@': 89}), 37: (1, {'@': 89}), 33: (1, {'@': 89}), 62: (1, {'@': 89}), 63: (1, {'@': 89}), 24: (1, {'@': 89}), 60: (1, {'@': 89}), 20: (1, {'@': 89}), 64: (1, {'@': 89})}, 198: {50: (1, {'@': 124}), 56: (1, {'@': 124}), 47: (1, {'@': 124}), 43: (1, {'@': 124}), 57: (1, {'@': 124}), 41: (1, {'@': 124}), 54: (1, {'@': 124}), 64: (1, {'@': 124}), 51: (1, {'@': 124}), 49: (1, {'@': 124}), 48: (1, {'@': 124}), 59: (1, {'@': 124}), 1: (1, {'@': 124}), 42: (1, {'@': 124}), 18: (1, {'@': 124}), 40: (1, {'@': 124}), 55: (1, {'@': 124}), 44: (1, {'@': 124}), 53: (1, {'@': 124}), 46: (1, {'@': 124}), 34: (1, {'@': 124}), 36: (1, {'@': 124}), 35: (1, {'@': 124}), 37: (1, {'@': 124}), 58: (1, {'@': 124}), 33: (1, {'@': 124}), 60: (1, {'@': 124}), 24: (1, {'@': 124}), 20: (1, {'@': 124}), 61: (1, {'@': 124}), 62: (1, {'@': 124}), 63: (1, {'@': 124})}, 199: {1: (1, {'@': 88}), 15: (1, {'@': 88}), 6: (1, {'@': 88}), 10: (1, {'@': 88}), 18: (1, {'@': 88}), 34: (1, {'@': 88}), 36: (1, {'@': 88}), 35: (1, {'@': 88}), 9: (1, {'@': 88}), 32: (1, {'@': 88}), 17: (1, {'@': 88}), 2: (1, {'@': 88}), 20: (1, {'@': 88})}, 200: {58: (0, 578)}, 201: {58: (0, 683)}, 202: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 431}), 35: (1, {'@': 431}), 36: (1, {'@': 431}), 58: (1, {'@': 431}), 33: (1, {'@': 431}), 62: (1, {'@': 431}), 37: (1, {'@': 431})}, 203: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 597), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 38: (0, 473), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 204: {58: (0, 347)}, 205: {35: (0, 515), 38: (0, 216), 34: (0, 491), 39: (0, 497), 58: (0, 219), 36: (0, 509)}, 206: {35: (0, 515), 34: (0, 491), 38: (0, 136), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 364}), 15: (1, {'@': 364}), 6: (1, {'@': 364}), 10: (1, {'@': 364}), 18: (1, {'@': 364}), 9: (1, {'@': 364}), 32: (1, {'@': 364}), 17: (1, {'@': 364}), 2: (1, {'@': 364}), 20: (1, {'@': 364})}, 207: {66: (0, 610), 38: (0, 664), 34: (0, 491), 39: (0, 497), 36: (0, 509), 35: (0, 515)}, 208: {50: (1, {'@': 330}), 56: (1, {'@': 330}), 47: (1, {'@': 330}), 43: (1, {'@': 330}), 57: (1, {'@': 330}), 41: (1, {'@': 330}), 54: (1, {'@': 330}), 64: (1, {'@': 330}), 51: (1, {'@': 330}), 49: (1, {'@': 330}), 48: (1, {'@': 330}), 59: (1, {'@': 330}), 1: (1, {'@': 330}), 42: (1, {'@': 330}), 18: (1, {'@': 330}), 40: (1, {'@': 330}), 55: (1, {'@': 330}), 44: (1, {'@': 330}), 53: (1, {'@': 330}), 46: (1, {'@': 330}), 34: (1, {'@': 330}), 36: (1, {'@': 330}), 35: (1, {'@': 330}), 37: (1, {'@': 330}), 58: (1, {'@': 330}), 33: (1, {'@': 330}), 60: (1, {'@': 330}), 24: (1, {'@': 330}), 20: (1, {'@': 330}), 61: (1, {'@': 330}), 62: (1, {'@': 330}), 63: (1, {'@': 330})}, 209: {4: (0, 24), 20: (0, 519)}, 210: {50: (1, {'@': 125}), 56: (1, {'@': 125}), 47: (1, {'@': 125}), 43: (1, {'@': 125}), 57: (1, {'@': 125}), 41: (1, {'@': 125}), 54: (1, {'@': 125}), 64: (1, {'@': 125}), 51: (1, {'@': 125}), 49: (1, {'@': 125}), 48: (1, {'@': 125}), 59: (1, {'@': 125}), 1: (1, {'@': 125}), 42: (1, {'@': 125}), 18: (1, {'@': 125}), 40: (1, {'@': 125}), 55: (1, {'@': 125}), 44: (1, {'@': 125}), 53: (1, {'@': 125}), 46: (1, {'@': 125}), 34: (1, {'@': 125}), 36: (1, {'@': 125}), 35: (1, {'@': 125}), 37: (1, {'@': 125}), 58: (1, {'@': 125}), 33: (1, {'@': 125}), 60: (1, {'@': 125}), 24: (1, {'@': 125}), 20: (1, {'@': 125}), 61: (1, {'@': 125}), 62: (1, {'@': 125}), 63: (1, {'@': 125})}, 211: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 320), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 212: {34: (1, {'@': 175}), 35: (1, {'@': 175}), 36: (1, {'@': 175}), 37: (1, {'@': 175})}, 213: {50: (1, {'@': 200}), 56: (1, {'@': 200}), 47: (1, {'@': 200}), 43: (1, {'@': 200}), 57: (1, {'@': 200}), 41: (1, {'@': 200}), 54: (1, {'@': 200}), 64: (1, {'@': 200}), 51: (1, {'@': 200}), 49: (1, {'@': 200}), 48: (1, {'@': 200}), 59: (1, {'@': 200}), 1: (1, {'@': 200}), 42: (1, {'@': 200}), 18: (1, {'@': 200}), 40: (1, {'@': 200}), 55: (1, {'@': 200}), 44: (1, {'@': 200}), 53: (1, {'@': 200}), 46: (1, {'@': 200}), 34: (1, {'@': 200}), 36: (1, {'@': 200}), 35: (1, {'@': 200}), 37: (1, {'@': 200}), 58: (1, {'@': 200}), 33: (1, {'@': 200}), 60: (1, {'@': 200}), 24: (1, {'@': 200}), 20: (1, {'@': 200}), 61: (1, {'@': 200}), 62: (1, {'@': 200}), 63: (1, {'@': 200})}, 214: {1: (1, {'@': 83}), 15: (1, {'@': 83}), 6: (1, {'@': 83}), 10: (1, {'@': 83}), 18: (1, {'@': 83}), 34: (1, {'@': 83}), 36: (1, {'@': 83}), 35: (1, {'@': 83}), 9: (1, {'@': 83}), 32: (1, {'@': 83}), 17: (1, {'@': 83}), 2: (1, {'@': 83}), 20: (1, {'@': 83})}, 215: {50: (1, {'@': 201}), 56: (1, {'@': 201}), 47: (1, {'@': 201}), 43: (1, {'@': 201}), 57: (1, {'@': 201}), 41: (1, {'@': 201}), 54: (1, {'@': 201}), 64: (1, {'@': 201}), 51: (1, {'@': 201}), 49: (1, {'@': 201}), 48: (1, {'@': 201}), 59: (1, {'@': 201}), 1: (1, {'@': 201}), 42: (1, {'@': 201}), 18: (1, {'@': 201}), 40: (1, {'@': 201}), 55: (1, {'@': 201}), 44: (1, {'@': 201}), 53: (1, {'@': 201}), 46: (1, {'@': 201}), 34: (1, {'@': 201}), 36: (1, {'@': 201}), 35: (1, {'@': 201}), 37: (1, {'@': 201}), 58: (1, {'@': 201}), 33: (1, {'@': 201}), 60: (1, {'@': 201}), 24: (1, {'@': 201}), 20: (1, {'@': 201}), 61: (1, {'@': 201}), 62: (1, {'@': 201}), 63: (1, {'@': 201})}, 216: {58: (0, 602)}, 217: {1: (1, {'@': 411}), 15: (1, {'@': 411}), 6: (1, {'@': 411}), 10: (1, {'@': 411}), 18: (1, {'@': 411}), 34: (1, {'@': 411}), 36: (1, {'@': 411}), 35: (1, {'@': 411}), 9: (1, {'@': 411}), 32: (1, {'@': 411}), 17: (1, {'@': 411}), 2: (1, {'@': 411}), 20: (1, {'@': 411})}, 218: {1: (1, {'@': 79}), 15: (1, {'@': 79}), 6: (1, {'@': 79}), 10: (1, {'@': 79}), 18: (1, {'@': 79}), 34: (1, {'@': 79}), 36: (1, {'@': 79}), 35: (1, {'@': 79}), 9: (1, {'@': 79}), 32: (1, {'@': 79}), 17: (1, {'@': 79}), 2: (1, {'@': 79}), 20: (1, {'@': 79})}, 219: {50: (1, {'@': 194}), 56: (1, {'@': 194}), 47: (1, {'@': 194}), 43: (1, {'@': 194}), 57: (1, {'@': 194}), 41: (1, {'@': 194}), 54: (1, {'@': 194}), 64: (1, {'@': 194}), 51: (1, {'@': 194}), 49: (1, {'@': 194}), 48: (1, {'@': 194}), 59: (1, {'@': 194}), 1: (1, {'@': 194}), 42: (1, {'@': 194}), 18: (1, {'@': 194}), 40: (1, {'@': 194}), 55: (1, {'@': 194}), 44: (1, {'@': 194}), 53: (1, {'@': 194}), 46: (1, {'@': 194}), 34: (1, {'@': 194}), 36: (1, {'@': 194}), 35: (1, {'@': 194}), 37: (1, {'@': 194}), 58: (1, {'@': 194}), 33: (1, {'@': 194}), 60: (1, {'@': 194}), 24: (1, {'@': 194}), 20: (1, {'@': 194}), 61: (1, {'@': 194}), 62: (1, {'@': 194}), 63: (1, {'@': 194})}, 220: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 414), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 221: {38: (0, 80), 41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 40: (0, 104), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 54: (0, 218), 50: (0, 270), 18: (0, 277)}, 222: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 40: (0, 92), 46: (0, 442), 38: (0, 117), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 223: {50: (1, {'@': 121}), 56: (1, {'@': 121}), 47: (1, {'@': 121}), 43: (1, {'@': 121}), 57: (1, {'@': 121}), 41: (1, {'@': 121}), 54: (1, {'@': 121}), 64: (1, {'@': 121}), 51: (1, {'@': 121}), 49: (1, {'@': 121}), 48: (1, {'@': 121}), 59: (1, {'@': 121}), 1: (1, {'@': 121}), 42: (1, {'@': 121}), 18: (1, {'@': 121}), 40: (1, {'@': 121}), 55: (1, {'@': 121}), 44: (1, {'@': 121}), 53: (1, {'@': 121}), 46: (1, {'@': 121}), 34: (1, {'@': 121}), 36: (1, {'@': 121}), 35: (1, {'@': 121}), 37: (1, {'@': 121}), 58: (1, {'@': 121}), 33: (1, {'@': 121}), 60: (1, {'@': 121}), 24: (1, {'@': 121}), 20: (1, {'@': 121}), 61: (1, {'@': 121}), 62: (1, {'@': 121}), 63: (1, {'@': 121})}, 224: {1: (1, {'@': 85}), 15: (1, {'@': 85}), 6: (1, {'@': 85}), 10: (1, {'@': 85}), 18: (1, {'@': 85}), 34: (1, {'@': 85}), 36: (1, {'@': 85}), 35: (1, {'@': 85}), 9: (1, {'@': 85}), 32: (1, {'@': 85}), 17: (1, {'@': 85}), 2: (1, {'@': 85}), 20: (1, {'@': 85})}, 225: {50: (1, {'@': 128}), 56: (1, {'@': 128}), 47: (1, {'@': 128}), 43: (1, {'@': 128}), 57: (1, {'@': 128}), 41: (1, {'@': 128}), 54: (1, {'@': 128}), 64: (1, {'@': 128}), 51: (1, {'@': 128}), 49: (1, {'@': 128}), 48: (1, {'@': 128}), 59: (1, {'@': 128}), 1: (1, {'@': 128}), 42: (1, {'@': 128}), 18: (1, {'@': 128}), 40: (1, {'@': 128}), 55: (1, {'@': 128}), 44: (1, {'@': 128}), 53: (1, {'@': 128}), 46: (1, {'@': 128}), 34: (1, {'@': 128}), 36: (1, {'@': 128}), 35: (1, {'@': 128}), 37: (1, {'@': 128}), 58: (1, {'@': 128}), 33: (1, {'@': 128}), 60: (1, {'@': 128}), 24: (1, {'@': 128}), 20: (1, {'@': 128}), 61: (1, {'@': 128}), 62: (1, {'@': 128}), 63: (1, {'@': 128})}, 226: {41: (0, 510), 40: (0, 618), 34: (0, 491), 42: (0, 536), 38: (0, 595), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 54: (0, 218), 50: (0, 270), 18: (0, 277)}, 227: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 334), 36: (0, 509), 1: (1, {'@': 406}), 15: (1, {'@': 406}), 6: (1, {'@': 406}), 10: (1, {'@': 406}), 18: (1, {'@': 406}), 9: (1, {'@': 406}), 32: (1, {'@': 406}), 17: (1, {'@': 406}), 2: (1, {'@': 406}), 20: (1, {'@': 406})}, 228: {0: (0, 53), 2: (0, 62), 39: (0, 497), 8: (0, 521), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 38: (0, 580), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 229: {0: (0, 53), 8: (0, 255), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 267), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 230: {50: (1, {'@': 114}), 56: (1, {'@': 114}), 47: (1, {'@': 114}), 43: (1, {'@': 114}), 57: (1, {'@': 114}), 41: (1, {'@': 114}), 54: (1, {'@': 114}), 64: (1, {'@': 114}), 51: (1, {'@': 114}), 49: (1, {'@': 114}), 48: (1, {'@': 114}), 59: (1, {'@': 114}), 1: (1, {'@': 114}), 42: (1, {'@': 114}), 18: (1, {'@': 114}), 40: (1, {'@': 114}), 55: (1, {'@': 114}), 44: (1, {'@': 114}), 53: (1, {'@': 114}), 46: (1, {'@': 114}), 34: (1, {'@': 114}), 36: (1, {'@': 114}), 35: (1, {'@': 114}), 37: (1, {'@': 114}), 58: (1, {'@': 114}), 33: (1, {'@': 114}), 60: (1, {'@': 114}), 24: (1, {'@': 114}), 20: (1, {'@': 114}), 61: (1, {'@': 114}), 62: (1, {'@': 114}), 63: (1, {'@': 114})}, 231: {24: (0, 149)}, 232: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 40: (0, 287), 38: (0, 625), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 233: {50: (1, {'@': 118}), 56: (1, {'@': 118}), 47: (1, {'@': 118}), 43: (1, {'@': 118}), 57: (1, {'@': 118}), 41: (1, {'@': 118}), 54: (1, {'@': 118}), 64: (1, {'@': 118}), 51: (1, {'@': 118}), 49: (1, {'@': 118}), 48: (1, {'@': 118}), 59: (1, {'@': 118}), 1: (1, {'@': 118}), 42: (1, {'@': 118}), 18: (1, {'@': 118}), 40: (1, {'@': 118}), 55: (1, {'@': 118}), 44: (1, {'@': 118}), 53: (1, {'@': 118}), 46: (1, {'@': 118}), 34: (1, {'@': 118}), 36: (1, {'@': 118}), 35: (1, {'@': 118}), 37: (1, {'@': 118}), 58: (1, {'@': 118}), 33: (1, {'@': 118}), 60: (1, {'@': 118}), 24: (1, {'@': 118}), 20: (1, {'@': 118}), 61: (1, {'@': 118}), 62: (1, {'@': 118}), 63: (1, {'@': 118})}, 234: {0: (0, 53), 74: (0, 43), 71: (0, 494), 2: (0, 62), 6: (0, 530), 4: (0, 520), 7: (0, 535), 1: (0, 61), 8: (0, 604), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 58: (0, 638), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 235: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 36: (0, 509), 8: (0, 362), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 38: (0, 312), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 236: {50: (1, {'@': 329}), 56: (1, {'@': 329}), 47: (1, {'@': 329}), 43: (1, {'@': 329}), 57: (1, {'@': 329}), 41: (1, {'@': 329}), 54: (1, {'@': 329}), 64: (1, {'@': 329}), 51: (1, {'@': 329}), 49: (1, {'@': 329}), 48: (1, {'@': 329}), 59: (1, {'@': 329}), 1: (1, {'@': 329}), 42: (1, {'@': 329}), 18: (1, {'@': 329}), 40: (1, {'@': 329}), 55: (1, {'@': 329}), 44: (1, {'@': 329}), 53: (1, {'@': 329}), 46: (1, {'@': 329}), 34: (1, {'@': 329}), 36: (1, {'@': 329}), 35: (1, {'@': 329}), 37: (1, {'@': 329}), 58: (1, {'@': 329}), 33: (1, {'@': 329}), 60: (1, {'@': 329}), 24: (1, {'@': 329}), 20: (1, {'@': 329}), 61: (1, {'@': 329}), 62: (1, {'@': 329}), 63: (1, {'@': 329})}, 237: {1: (1, {'@': 407}), 15: (1, {'@': 407}), 6: (1, {'@': 407}), 10: (1, {'@': 407}), 18: (1, {'@': 407}), 34: (1, {'@': 407}), 36: (1, {'@': 407}), 35: (1, {'@': 407}), 9: (1, {'@': 407}), 32: (1, {'@': 407}), 17: (1, {'@': 407}), 2: (1, {'@': 407}), 20: (1, {'@': 407})}, 238: {0: (0, 53), 8: (0, 310), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 239: {50: (1, {'@': 115}), 56: (1, {'@': 115}), 47: (1, {'@': 115}), 43: (1, {'@': 115}), 57: (1, {'@': 115}), 41: (1, {'@': 115}), 54: (1, {'@': 115}), 64: (1, {'@': 115}), 51: (1, {'@': 115}), 49: (1, {'@': 115}), 48: (1, {'@': 115}), 59: (1, {'@': 115}), 1: (1, {'@': 115}), 42: (1, {'@': 115}), 18: (1, {'@': 115}), 40: (1, {'@': 115}), 55: (1, {'@': 115}), 44: (1, {'@': 115}), 53: (1, {'@': 115}), 46: (1, {'@': 115}), 34: (1, {'@': 115}), 36: (1, {'@': 115}), 35: (1, {'@': 115}), 37: (1, {'@': 115}), 58: (1, {'@': 115}), 33: (1, {'@': 115}), 60: (1, {'@': 115}), 24: (1, {'@': 115}), 20: (1, {'@': 115}), 61: (1, {'@': 115}), 62: (1, {'@': 115}), 63: (1, {'@': 115})}, 240: {50: (1, {'@': 324}), 56: (1, {'@': 324}), 47: (1, {'@': 324}), 43: (1, {'@': 324}), 57: (1, {'@': 324}), 41: (1, {'@': 324}), 54: (1, {'@': 324}), 64: (1, {'@': 324}), 51: (1, {'@': 324}), 49: (1, {'@': 324}), 48: (1, {'@': 324}), 59: (1, {'@': 324}), 1: (1, {'@': 324}), 42: (1, {'@': 324}), 18: (1, {'@': 324}), 40: (1, {'@': 324}), 55: (1, {'@': 324}), 44: (1, {'@': 324}), 53: (1, {'@': 324}), 46: (1, {'@': 324}), 34: (1, {'@': 324}), 36: (1, {'@': 324}), 35: (1, {'@': 324}), 37: (1, {'@': 324}), 58: (1, {'@': 324}), 33: (1, {'@': 324}), 60: (1, {'@': 324}), 24: (1, {'@': 324}), 20: (1, {'@': 324}), 61: (1, {'@': 324}), 62: (1, {'@': 324}), 63: (1, {'@': 324})}, 241: {50: (1, {'@': 328}), 56: (1, {'@': 328}), 47: (1, {'@': 328}), 43: (1, {'@': 328}), 57: (1, {'@': 328}), 41: (1, {'@': 328}), 54: (1, {'@': 328}), 64: (1, {'@': 328}), 51: (1, {'@': 328}), 49: (1, {'@': 328}), 48: (1, {'@': 328}), 59: (1, {'@': 328}), 1: (1, {'@': 328}), 42: (1, {'@': 328}), 18: (1, {'@': 328}), 40: (1, {'@': 328}), 55: (1, {'@': 328}), 44: (1, {'@': 328}), 53: (1, {'@': 328}), 46: (1, {'@': 328}), 34: (1, {'@': 328}), 36: (1, {'@': 328}), 35: (1, {'@': 328}), 37: (1, {'@': 328}), 58: (1, {'@': 328}), 33: (1, {'@': 328}), 60: (1, {'@': 328}), 24: (1, {'@': 328}), 20: (1, {'@': 328}), 61: (1, {'@': 328}), 62: (1, {'@': 328}), 63: (1, {'@': 328})}, 242: {50: (1, {'@': 143}), 56: (1, {'@': 143}), 47: (1, {'@': 143}), 43: (1, {'@': 143}), 57: (1, {'@': 143}), 41: (1, {'@': 143}), 54: (1, {'@': 143}), 64: (1, {'@': 143}), 51: (1, {'@': 143}), 49: (1, {'@': 143}), 48: (1, {'@': 143}), 59: (1, {'@': 143}), 1: (1, {'@': 143}), 42: (1, {'@': 143}), 18: (1, {'@': 143}), 40: (1, {'@': 143}), 55: (1, {'@': 143}), 44: (1, {'@': 143}), 53: (1, {'@': 143}), 46: (1, {'@': 143}), 34: (1, {'@': 143}), 36: (1, {'@': 143}), 35: (1, {'@': 143}), 37: (1, {'@': 143}), 58: (1, {'@': 143}), 33: (1, {'@': 143}), 60: (1, {'@': 143}), 24: (1, {'@': 143}), 20: (1, {'@': 143}), 61: (1, {'@': 143}), 62: (1, {'@': 143}), 63: (1, {'@': 143})}, 243: {35: (0, 515), 65: (0, 145), 34: (0, 491), 24: (0, 568), 39: (0, 497), 61: (0, 556), 38: (0, 572), 36: (0, 509)}, 244: {38: (0, 237), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 408}), 15: (1, {'@': 408}), 6: (1, {'@': 408}), 10: (1, {'@': 408}), 18: (1, {'@': 408}), 9: (1, {'@': 408}), 32: (1, {'@': 408}), 17: (1, {'@': 408}), 2: (1, {'@': 408}), 20: (1, {'@': 408})}, 245: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 142), 58: (0, 230), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 246: {50: (1, {'@': 198}), 56: (1, {'@': 198}), 47: (1, {'@': 198}), 43: (1, {'@': 198}), 57: (1, {'@': 198}), 41: (1, {'@': 198}), 54: (1, {'@': 198}), 64: (1, {'@': 198}), 51: (1, {'@': 198}), 49: (1, {'@': 198}), 48: (1, {'@': 198}), 59: (1, {'@': 198}), 1: (1, {'@': 198}), 42: (1, {'@': 198}), 18: (1, {'@': 198}), 40: (1, {'@': 198}), 55: (1, {'@': 198}), 44: (1, {'@': 198}), 53: (1, {'@': 198}), 46: (1, {'@': 198}), 34: (1, {'@': 198}), 36: (1, {'@': 198}), 35: (1, {'@': 198}), 37: (1, {'@': 198}), 58: (1, {'@': 198}), 33: (1, {'@': 198}), 60: (1, {'@': 198}), 24: (1, {'@': 198}), 20: (1, {'@': 198}), 61: (1, {'@': 198}), 62: (1, {'@': 198}), 63: (1, {'@': 198})}, 247: {24: (0, 158)}, 248: {62: (0, 582), 41: (0, 510), 65: (0, 608), 34: (0, 491), 39: (0, 497), 43: (0, 423), 38: (0, 657), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 24: (0, 671), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 249: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 68}), 40: (1, {'@': 68}), 34: (1, {'@': 68}), 36: (1, {'@': 68}), 35: (1, {'@': 68}), 37: (1, {'@': 68}), 58: (1, {'@': 68}), 33: (1, {'@': 68}), 60: (1, {'@': 68}), 24: (1, {'@': 68}), 20: (1, {'@': 68}), 61: (1, {'@': 68}), 62: (1, {'@': 68}), 63: (1, {'@': 68})}, 250: {40: (0, 227)}, 251: {50: (1, {'@': 322}), 56: (1, {'@': 322}), 47: (1, {'@': 322}), 43: (1, {'@': 322}), 57: (1, {'@': 322}), 41: (1, {'@': 322}), 54: (1, {'@': 322}), 64: (1, {'@': 322}), 51: (1, {'@': 322}), 49: (1, {'@': 322}), 48: (1, {'@': 322}), 59: (1, {'@': 322}), 1: (1, {'@': 322}), 42: (1, {'@': 322}), 18: (1, {'@': 322}), 40: (1, {'@': 322}), 55: (1, {'@': 322}), 44: (1, {'@': 322}), 53: (1, {'@': 322}), 46: (1, {'@': 322}), 34: (1, {'@': 322}), 36: (1, {'@': 322}), 35: (1, {'@': 322}), 37: (1, {'@': 322}), 58: (1, {'@': 322}), 33: (1, {'@': 322}), 60: (1, {'@': 322}), 24: (1, {'@': 322}), 20: (1, {'@': 322}), 61: (1, {'@': 322}), 62: (1, {'@': 322}), 63: (1, {'@': 322})}, 252: {15: (0, 56), 64: (0, 507), 40: (0, 437), 50: (1, {'@': 103}), 56: (1, {'@': 103}), 47: (1, {'@': 103}), 43: (1, {'@': 103}), 57: (1, {'@': 103}), 41: (1, {'@': 103}), 54: (1, {'@': 103}), 51: (1, {'@': 103}), 49: (1, {'@': 103}), 48: (1, {'@': 103}), 59: (1, {'@': 103}), 1: (1, {'@': 103}), 42: (1, {'@': 103}), 18: (1, {'@': 103}), 55: (1, {'@': 103}), 44: (1, {'@': 103}), 53: (1, {'@': 103}), 46: (1, {'@': 103})}, 253: {24: (0, 321), 65: (0, 601), 38: (0, 648), 34: (0, 491), 39: (0, 497), 61: (0, 556), 36: (0, 509), 35: (0, 515)}, 254: {50: (1, {'@': 164}), 56: (1, {'@': 164}), 47: (1, {'@': 164}), 43: (1, {'@': 164}), 57: (1, {'@': 164}), 41: (1, {'@': 164}), 54: (1, {'@': 164}), 64: (1, {'@': 164}), 51: (1, {'@': 164}), 49: (1, {'@': 164}), 48: (1, {'@': 164}), 59: (1, {'@': 164}), 1: (1, {'@': 164}), 42: (1, {'@': 164}), 18: (1, {'@': 164}), 40: (1, {'@': 164}), 55: (1, {'@': 164}), 44: (1, {'@': 164}), 53: (1, {'@': 164}), 46: (1, {'@': 164}), 34: (1, {'@': 164}), 36: (1, {'@': 164}), 35: (1, {'@': 164}), 37: (1, {'@': 164}), 58: (1, {'@': 164}), 33: (1, {'@': 164}), 60: (1, {'@': 164}), 24: (1, {'@': 164}), 20: (1, {'@': 164}), 61: (1, {'@': 164}), 62: (1, {'@': 164}), 63: (1, {'@': 164})}, 255: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 40: (0, 123), 38: (0, 110), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 256: {24: (0, 154)}, 257: {0: (0, 53), 74: (0, 325), 71: (0, 494), 2: (0, 62), 6: (0, 530), 4: (0, 252), 7: (0, 535), 1: (0, 61), 8: (0, 428), 13: (0, 81), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 24: (0, 85), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 258: {37: (0, 391)}, 259: {35: (0, 515), 34: (0, 491), 24: (0, 240), 39: (0, 497), 36: (0, 509), 38: (0, 231)}, 260: {50: (1, {'@': 331}), 56: (1, {'@': 331}), 47: (1, {'@': 331}), 43: (1, {'@': 331}), 57: (1, {'@': 331}), 41: (1, {'@': 331}), 54: (1, {'@': 331}), 64: (1, {'@': 331}), 51: (1, {'@': 331}), 49: (1, {'@': 331}), 48: (1, {'@': 331}), 59: (1, {'@': 331}), 1: (1, {'@': 331}), 42: (1, {'@': 331}), 18: (1, {'@': 331}), 40: (1, {'@': 331}), 55: (1, {'@': 331}), 44: (1, {'@': 331}), 53: (1, {'@': 331}), 46: (1, {'@': 331}), 34: (1, {'@': 331}), 36: (1, {'@': 331}), 35: (1, {'@': 331}), 37: (1, {'@': 331}), 58: (1, {'@': 331}), 33: (1, {'@': 331}), 60: (1, {'@': 331}), 24: (1, {'@': 331}), 20: (1, {'@': 331}), 61: (1, {'@': 331}), 62: (1, {'@': 331}), 63: (1, {'@': 331})}, 261: {38: (0, 161), 35: (0, 515), 34: (0, 491), 24: (0, 165), 39: (0, 497), 36: (0, 509)}, 262: {50: (1, {'@': 211}), 56: (1, {'@': 211}), 47: (1, {'@': 211}), 43: (1, {'@': 211}), 57: (1, {'@': 211}), 41: (1, {'@': 211}), 54: (1, {'@': 211}), 64: (1, {'@': 211}), 51: (1, {'@': 211}), 49: (1, {'@': 211}), 48: (1, {'@': 211}), 59: (1, {'@': 211}), 1: (1, {'@': 211}), 42: (1, {'@': 211}), 18: (1, {'@': 211}), 40: (1, {'@': 211}), 55: (1, {'@': 211}), 44: (1, {'@': 211}), 53: (1, {'@': 211}), 46: (1, {'@': 211}), 34: (1, {'@': 211}), 36: (1, {'@': 211}), 35: (1, {'@': 211}), 37: (1, {'@': 211}), 58: (1, {'@': 211}), 33: (1, {'@': 211}), 60: (1, {'@': 211}), 24: (1, {'@': 211}), 20: (1, {'@': 211}), 61: (1, {'@': 211}), 62: (1, {'@': 211}), 63: (1, {'@': 211})}, 263: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 40: (0, 533), 36: (0, 509), 45: (0, 455), 46: (0, 442), 38: (0, 692), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 264: {35: (0, 515), 34: (0, 491), 38: (0, 396), 39: (0, 497), 36: (0, 509), 37: (1, {'@': 170})}, 265: {24: (0, 251), 35: (0, 515), 38: (0, 256), 65: (0, 261), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556)}, 266: {34: (0, 491), 33: (0, 354), 39: (0, 497), 76: (0, 495), 38: (0, 460), 36: (0, 509), 24: (0, 489), 35: (0, 515), 75: (0, 622)}, 267: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 271), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 268: {50: (1, {'@': 214}), 56: (1, {'@': 214}), 47: (1, {'@': 214}), 43: (1, {'@': 214}), 57: (1, {'@': 214}), 41: (1, {'@': 214}), 54: (1, {'@': 214}), 64: (1, {'@': 214}), 51: (1, {'@': 214}), 49: (1, {'@': 214}), 48: (1, {'@': 214}), 59: (1, {'@': 214}), 1: (1, {'@': 214}), 42: (1, {'@': 214}), 18: (1, {'@': 214}), 40: (1, {'@': 214}), 55: (1, {'@': 214}), 44: (1, {'@': 214}), 53: (1, {'@': 214}), 46: (1, {'@': 214}), 34: (1, {'@': 214}), 36: (1, {'@': 214}), 35: (1, {'@': 214}), 37: (1, {'@': 214}), 58: (1, {'@': 214}), 33: (1, {'@': 214}), 60: (1, {'@': 214}), 24: (1, {'@': 214}), 20: (1, {'@': 214}), 61: (1, {'@': 214}), 62: (1, {'@': 214}), 63: (1, {'@': 214})}, 269: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 64}), 40: (1, {'@': 64}), 34: (1, {'@': 64}), 36: (1, {'@': 64}), 35: (1, {'@': 64}), 37: (1, {'@': 64}), 58: (1, {'@': 64}), 33: (1, {'@': 64}), 60: (1, {'@': 64}), 24: (1, {'@': 64}), 20: (1, {'@': 64}), 61: (1, {'@': 64}), 62: (1, {'@': 64}), 63: (1, {'@': 64})}, 270: {1: (1, {'@': 87}), 15: (1, {'@': 87}), 6: (1, {'@': 87}), 10: (1, {'@': 87}), 18: (1, {'@': 87}), 34: (1, {'@': 87}), 36: (1, {'@': 87}), 35: (1, {'@': 87}), 9: (1, {'@': 87}), 32: (1, {'@': 87}), 17: (1, {'@': 87}), 2: (1, {'@': 87}), 20: (1, {'@': 87})}, 271: {38: (0, 637), 41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 40: (0, 678), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 272: {50: (1, {'@': 327}), 56: (1, {'@': 327}), 47: (1, {'@': 327}), 43: (1, {'@': 327}), 57: (1, {'@': 327}), 41: (1, {'@': 327}), 54: (1, {'@': 327}), 64: (1, {'@': 327}), 51: (1, {'@': 327}), 49: (1, {'@': 327}), 48: (1, {'@': 327}), 59: (1, {'@': 327}), 1: (1, {'@': 327}), 42: (1, {'@': 327}), 18: (1, {'@': 327}), 40: (1, {'@': 327}), 55: (1, {'@': 327}), 44: (1, {'@': 327}), 53: (1, {'@': 327}), 46: (1, {'@': 327}), 34: (1, {'@': 327}), 36: (1, {'@': 327}), 35: (1, {'@': 327}), 37: (1, {'@': 327}), 58: (1, {'@': 327}), 33: (1, {'@': 327}), 60: (1, {'@': 327}), 24: (1, {'@': 327}), 20: (1, {'@': 327}), 61: (1, {'@': 327}), 62: (1, {'@': 327}), 63: (1, {'@': 327})}, 273: {50: (1, {'@': 153}), 56: (1, {'@': 153}), 47: (1, {'@': 153}), 43: (1, {'@': 153}), 57: (1, {'@': 153}), 41: (1, {'@': 153}), 54: (1, {'@': 153}), 64: (1, {'@': 153}), 51: (1, {'@': 153}), 49: (1, {'@': 153}), 48: (1, {'@': 153}), 59: (1, {'@': 153}), 1: (1, {'@': 153}), 42: (1, {'@': 153}), 18: (1, {'@': 153}), 40: (1, {'@': 153}), 55: (1, {'@': 153}), 44: (1, {'@': 153}), 53: (1, {'@': 153}), 46: (1, {'@': 153}), 34: (1, {'@': 153}), 36: (1, {'@': 153}), 35: (1, {'@': 153}), 37: (1, {'@': 153}), 58: (1, {'@': 153}), 33: (1, {'@': 153}), 60: (1, {'@': 153}), 24: (1, {'@': 153}), 20: (1, {'@': 153}), 61: (1, {'@': 153}), 62: (1, {'@': 153}), 63: (1, {'@': 153})}, 274: {33: (0, 235), 34: (1, {'@': 171}), 35: (1, {'@': 171}), 36: (1, {'@': 171}), 37: (1, {'@': 171})}, 275: {58: (0, 213)}, 276: {50: (1, {'@': 275}), 56: (1, {'@': 275}), 47: (1, {'@': 275}), 43: (1, {'@': 275}), 57: (1, {'@': 275}), 41: (1, {'@': 275}), 54: (1, {'@': 275}), 64: (1, {'@': 275}), 51: (1, {'@': 275}), 49: (1, {'@': 275}), 48: (1, {'@': 275}), 59: (1, {'@': 275}), 1: (1, {'@': 275}), 42: (1, {'@': 275}), 18: (1, {'@': 275}), 40: (1, {'@': 275}), 55: (1, {'@': 275}), 44: (1, {'@': 275}), 53: (1, {'@': 275}), 46: (1, {'@': 275}), 34: (1, {'@': 275}), 36: (1, {'@': 275}), 35: (1, {'@': 275}), 37: (1, {'@': 275}), 58: (1, {'@': 275}), 33: (1, {'@': 275}), 60: (1, {'@': 275}), 24: (1, {'@': 275}), 20: (1, {'@': 275}), 61: (1, {'@': 275}), 62: (1, {'@': 275}), 63: (1, {'@': 275})}, 277: {1: (1, {'@': 82}), 15: (1, {'@': 82}), 6: (1, {'@': 82}), 10: (1, {'@': 82}), 18: (1, {'@': 82}), 34: (1, {'@': 82}), 36: (1, {'@': 82}), 35: (1, {'@': 82}), 9: (1, {'@': 82}), 32: (1, {'@': 82}), 17: (1, {'@': 82}), 2: (1, {'@': 82}), 20: (1, {'@': 82})}, 278: {50: (1, {'@': 325}), 56: (1, {'@': 325}), 47: (1, {'@': 325}), 43: (1, {'@': 325}), 57: (1, {'@': 325}), 41: (1, {'@': 325}), 54: (1, {'@': 325}), 64: (1, {'@': 325}), 51: (1, {'@': 325}), 49: (1, {'@': 325}), 48: (1, {'@': 325}), 59: (1, {'@': 325}), 1: (1, {'@': 325}), 42: (1, {'@': 325}), 18: (1, {'@': 325}), 40: (1, {'@': 325}), 55: (1, {'@': 325}), 44: (1, {'@': 325}), 53: (1, {'@': 325}), 46: (1, {'@': 325}), 34: (1, {'@': 325}), 36: (1, {'@': 325}), 35: (1, {'@': 325}), 37: (1, {'@': 325}), 58: (1, {'@': 325}), 33: (1, {'@': 325}), 60: (1, {'@': 325}), 24: (1, {'@': 325}), 20: (1, {'@': 325}), 61: (1, {'@': 325}), 62: (1, {'@': 325}), 63: (1, {'@': 325})}, 279: {50: (1, {'@': 161}), 56: (1, {'@': 161}), 47: (1, {'@': 161}), 43: (1, {'@': 161}), 57: (1, {'@': 161}), 41: (1, {'@': 161}), 54: (1, {'@': 161}), 64: (1, {'@': 161}), 51: (1, {'@': 161}), 49: (1, {'@': 161}), 48: (1, {'@': 161}), 59: (1, {'@': 161}), 1: (1, {'@': 161}), 42: (1, {'@': 161}), 18: (1, {'@': 161}), 40: (1, {'@': 161}), 55: (1, {'@': 161}), 44: (1, {'@': 161}), 53: (1, {'@': 161}), 46: (1, {'@': 161}), 34: (1, {'@': 161}), 36: (1, {'@': 161}), 35: (1, {'@': 161}), 37: (1, {'@': 161}), 58: (1, {'@': 161}), 33: (1, {'@': 161}), 60: (1, {'@': 161}), 24: (1, {'@': 161}), 20: (1, {'@': 161}), 61: (1, {'@': 161}), 62: (1, {'@': 161}), 63: (1, {'@': 161})}, 280: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 193), 24: (0, 196), 36: (0, 509)}, 281: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 576), 1: (1, {'@': 372}), 15: (1, {'@': 372}), 6: (1, {'@': 372}), 10: (1, {'@': 372}), 18: (1, {'@': 372}), 9: (1, {'@': 372}), 32: (1, {'@': 372}), 17: (1, {'@': 372}), 2: (1, {'@': 372}), 20: (1, {'@': 372})}, 282: {50: (1, {'@': 315}), 56: (1, {'@': 315}), 47: (1, {'@': 315}), 43: (1, {'@': 315}), 57: (1, {'@': 315}), 41: (1, {'@': 315}), 54: (1, {'@': 315}), 64: (1, {'@': 315}), 51: (1, {'@': 315}), 49: (1, {'@': 315}), 48: (1, {'@': 315}), 59: (1, {'@': 315}), 1: (1, {'@': 315}), 42: (1, {'@': 315}), 18: (1, {'@': 315}), 40: (1, {'@': 315}), 55: (1, {'@': 315}), 44: (1, {'@': 315}), 53: (1, {'@': 315}), 46: (1, {'@': 315}), 34: (1, {'@': 315}), 36: (1, {'@': 315}), 35: (1, {'@': 315}), 37: (1, {'@': 315}), 58: (1, {'@': 315}), 33: (1, {'@': 315}), 60: (1, {'@': 315}), 24: (1, {'@': 315}), 20: (1, {'@': 315}), 61: (1, {'@': 315}), 62: (1, {'@': 315}), 63: (1, {'@': 315})}, 283: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 247), 24: (0, 272), 36: (0, 509)}, 284: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 107), 8: (0, 115), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 285: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 70}), 40: (1, {'@': 70}), 34: (1, {'@': 70}), 36: (1, {'@': 70}), 35: (1, {'@': 70}), 37: (1, {'@': 70}), 58: (1, {'@': 70}), 33: (1, {'@': 70}), 60: (1, {'@': 70}), 24: (1, {'@': 70}), 20: (1, {'@': 70}), 61: (1, {'@': 70}), 62: (1, {'@': 70}), 63: (1, {'@': 70})}, 286: {40: (0, 307)}, 287: {35: (0, 515), 34: (0, 491), 38: (0, 617), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 368}), 15: (1, {'@': 368}), 6: (1, {'@': 368}), 10: (1, {'@': 368}), 18: (1, {'@': 368}), 9: (1, {'@': 368}), 32: (1, {'@': 368}), 17: (1, {'@': 368}), 2: (1, {'@': 368}), 20: (1, {'@': 368})}, 288: {10: (0, 478), 72: (0, 586), 50: (1, {'@': 112}), 56: (1, {'@': 112}), 47: (1, {'@': 112}), 43: (1, {'@': 112}), 57: (1, {'@': 112}), 41: (1, {'@': 112}), 54: (1, {'@': 112}), 64: (1, {'@': 112}), 51: (1, {'@': 112}), 49: (1, {'@': 112}), 48: (1, {'@': 112}), 59: (1, {'@': 112}), 1: (1, {'@': 112}), 42: (1, {'@': 112}), 18: (1, {'@': 112}), 40: (1, {'@': 112}), 55: (1, {'@': 112}), 44: (1, {'@': 112}), 53: (1, {'@': 112}), 46: (1, {'@': 112}), 34: (1, {'@': 112}), 36: (1, {'@': 112}), 35: (1, {'@': 112}), 37: (1, {'@': 112}), 58: (1, {'@': 112}), 33: (1, {'@': 112}), 60: (1, {'@': 112}), 24: (1, {'@': 112}), 20: (1, {'@': 112}), 61: (1, {'@': 112}), 62: (1, {'@': 112}), 63: (1, {'@': 112})}, 289: {50: (1, {'@': 311}), 56: (1, {'@': 311}), 47: (1, {'@': 311}), 43: (1, {'@': 311}), 57: (1, {'@': 311}), 41: (1, {'@': 311}), 54: (1, {'@': 311}), 64: (1, {'@': 311}), 51: (1, {'@': 311}), 49: (1, {'@': 311}), 48: (1, {'@': 311}), 59: (1, {'@': 311}), 1: (1, {'@': 311}), 42: (1, {'@': 311}), 18: (1, {'@': 311}), 40: (1, {'@': 311}), 55: (1, {'@': 311}), 44: (1, {'@': 311}), 53: (1, {'@': 311}), 46: (1, {'@': 311}), 34: (1, {'@': 311}), 36: (1, {'@': 311}), 35: (1, {'@': 311}), 37: (1, {'@': 311}), 58: (1, {'@': 311}), 33: (1, {'@': 311}), 60: (1, {'@': 311}), 24: (1, {'@': 311}), 20: (1, {'@': 311}), 61: (1, {'@': 311}), 62: (1, {'@': 311}), 63: (1, {'@': 311})}, 290: {24: (0, 241)}, 291: {1: (1, {'@': 409}), 15: (1, {'@': 409}), 6: (1, {'@': 409}), 10: (1, {'@': 409}), 18: (1, {'@': 409}), 34: (1, {'@': 409}), 36: (1, {'@': 409}), 35: (1, {'@': 409}), 9: (1, {'@': 409}), 32: (1, {'@': 409}), 17: (1, {'@': 409}), 2: (1, {'@': 409}), 20: (1, {'@': 409})}, 292: {35: (0, 515), 34: (0, 491), 61: (0, 556), 39: (0, 497), 65: (0, 175), 24: (0, 181), 38: (0, 185), 36: (0, 509)}, 293: {50: (1, {'@': 132}), 56: (1, {'@': 132}), 47: (1, {'@': 132}), 43: (1, {'@': 132}), 57: (1, {'@': 132}), 41: (1, {'@': 132}), 54: (1, {'@': 132}), 64: (1, {'@': 132}), 51: (1, {'@': 132}), 49: (1, {'@': 132}), 48: (1, {'@': 132}), 59: (1, {'@': 132}), 1: (1, {'@': 132}), 42: (1, {'@': 132}), 18: (1, {'@': 132}), 40: (1, {'@': 132}), 55: (1, {'@': 132}), 44: (1, {'@': 132}), 53: (1, {'@': 132}), 46: (1, {'@': 132}), 34: (1, {'@': 132}), 36: (1, {'@': 132}), 35: (1, {'@': 132}), 37: (1, {'@': 132}), 58: (1, {'@': 132}), 33: (1, {'@': 132}), 60: (1, {'@': 132}), 24: (1, {'@': 132}), 20: (1, {'@': 132}), 61: (1, {'@': 132}), 62: (1, {'@': 132}), 63: (1, {'@': 132})}, 294: {65: (0, 177), 35: (0, 515), 34: (0, 491), 24: (0, 333), 39: (0, 497), 38: (0, 327), 36: (0, 509), 61: (0, 556)}, 295: {1: (1, {'@': 395}), 15: (1, {'@': 395}), 6: (1, {'@': 395}), 10: (1, {'@': 395}), 18: (1, {'@': 395}), 34: (1, {'@': 395}), 36: (1, {'@': 395}), 35: (1, {'@': 395}), 9: (1, {'@': 395}), 32: (1, {'@': 395}), 17: (1, {'@': 395}), 2: (1, {'@': 395}), 20: (1, {'@': 395})}, 296: {35: (0, 515), 34: (0, 491), 38: (0, 10), 39: (0, 497), 36: (0, 509)}, 297: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 69}), 40: (1, {'@': 69}), 34: (1, {'@': 69}), 36: (1, {'@': 69}), 35: (1, {'@': 69}), 37: (1, {'@': 69}), 58: (1, {'@': 69}), 33: (1, {'@': 69}), 60: (1, {'@': 69}), 24: (1, {'@': 69}), 20: (1, {'@': 69}), 61: (1, {'@': 69}), 62: (1, {'@': 69}), 63: (1, {'@': 69})}, 298: {35: (0, 515), 38: (0, 680), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 402}), 15: (1, {'@': 402}), 6: (1, {'@': 402}), 10: (1, {'@': 402}), 18: (1, {'@': 402}), 9: (1, {'@': 402}), 32: (1, {'@': 402}), 17: (1, {'@': 402}), 2: (1, {'@': 402}), 20: (1, {'@': 402})}, 299: {50: (1, {'@': 317}), 56: (1, {'@': 317}), 47: (1, {'@': 317}), 43: (1, {'@': 317}), 57: (1, {'@': 317}), 41: (1, {'@': 317}), 54: (1, {'@': 317}), 64: (1, {'@': 317}), 51: (1, {'@': 317}), 49: (1, {'@': 317}), 48: (1, {'@': 317}), 59: (1, {'@': 317}), 1: (1, {'@': 317}), 42: (1, {'@': 317}), 18: (1, {'@': 317}), 40: (1, {'@': 317}), 55: (1, {'@': 317}), 44: (1, {'@': 317}), 53: (1, {'@': 317}), 46: (1, {'@': 317}), 34: (1, {'@': 317}), 36: (1, {'@': 317}), 35: (1, {'@': 317}), 37: (1, {'@': 317}), 58: (1, {'@': 317}), 33: (1, {'@': 317}), 60: (1, {'@': 317}), 24: (1, {'@': 317}), 20: (1, {'@': 317}), 61: (1, {'@': 317}), 62: (1, {'@': 317}), 63: (1, {'@': 317})}, 300: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 153), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 38: (0, 167), 32: (0, 488)}, 301: {38: (0, 335), 41: (0, 510), 34: (0, 491), 62: (0, 348), 65: (0, 547), 39: (0, 497), 43: (0, 423), 24: (0, 552), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 302: {50: (1, {'@': 303}), 56: (1, {'@': 303}), 47: (1, {'@': 303}), 43: (1, {'@': 303}), 57: (1, {'@': 303}), 41: (1, {'@': 303}), 54: (1, {'@': 303}), 64: (1, {'@': 303}), 51: (1, {'@': 303}), 49: (1, {'@': 303}), 48: (1, {'@': 303}), 59: (1, {'@': 303}), 1: (1, {'@': 303}), 42: (1, {'@': 303}), 18: (1, {'@': 303}), 40: (1, {'@': 303}), 55: (1, {'@': 303}), 44: (1, {'@': 303}), 53: (1, {'@': 303}), 46: (1, {'@': 303}), 34: (1, {'@': 303}), 36: (1, {'@': 303}), 35: (1, {'@': 303}), 37: (1, {'@': 303}), 58: (1, {'@': 303}), 33: (1, {'@': 303}), 60: (1, {'@': 303}), 24: (1, {'@': 303}), 20: (1, {'@': 303}), 61: (1, {'@': 303}), 62: (1, {'@': 303}), 63: (1, {'@': 303})}, 303: {4: (0, 562), 10: (0, 421), 0: (0, 615), 20: (0, 519)}, 304: {38: (0, 207), 34: (0, 491), 66: (0, 305), 39: (0, 497), 36: (0, 509), 35: (0, 515)}, 305: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 221), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 38: (0, 670), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 306: {24: (0, 289), 38: (0, 292), 34: (0, 491), 39: (0, 497), 65: (0, 308), 61: (0, 556), 36: (0, 509), 35: (0, 515)}, 307: {38: (0, 129), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 370}), 15: (1, {'@': 370}), 6: (1, {'@': 370}), 10: (1, {'@': 370}), 18: (1, {'@': 370}), 9: (1, {'@': 370}), 32: (1, {'@': 370}), 17: (1, {'@': 370}), 2: (1, {'@': 370}), 20: (1, {'@': 370})}, 308: {35: (0, 515), 34: (0, 491), 24: (0, 174), 39: (0, 497), 38: (0, 170), 36: (0, 509)}, 309: {34: (1, {'@': 439}), 35: (1, {'@': 439}), 36: (1, {'@': 439}), 24: (1, {'@': 439}), 33: (1, {'@': 439})}, 310: {41: (0, 510), 38: (0, 611), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 62: (0, 623), 24: (0, 643), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 65: (0, 649), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 311: {40: (0, 164)}, 312: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 142), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 313: {50: (1, {'@': 179}), 56: (1, {'@': 179}), 47: (1, {'@': 179}), 43: (1, {'@': 179}), 57: (1, {'@': 179}), 41: (1, {'@': 179}), 54: (1, {'@': 179}), 64: (1, {'@': 179}), 51: (1, {'@': 179}), 49: (1, {'@': 179}), 48: (1, {'@': 179}), 59: (1, {'@': 179}), 1: (1, {'@': 179}), 42: (1, {'@': 179}), 18: (1, {'@': 179}), 40: (1, {'@': 179}), 55: (1, {'@': 179}), 44: (1, {'@': 179}), 53: (1, {'@': 179}), 46: (1, {'@': 179}), 34: (1, {'@': 179}), 36: (1, {'@': 179}), 35: (1, {'@': 179}), 37: (1, {'@': 179}), 58: (1, {'@': 179}), 33: (1, {'@': 179}), 60: (1, {'@': 179}), 24: (1, {'@': 179}), 20: (1, {'@': 179}), 61: (1, {'@': 179}), 62: (1, {'@': 179}), 63: (1, {'@': 179})}, 314: {40: (0, 528)}, 315: {58: (0, 416)}, 316: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 640), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 317: {50: (1, {'@': 182}), 56: (1, {'@': 182}), 47: (1, {'@': 182}), 43: (1, {'@': 182}), 57: (1, {'@': 182}), 41: (1, {'@': 182}), 54: (1, {'@': 182}), 64: (1, {'@': 182}), 51: (1, {'@': 182}), 49: (1, {'@': 182}), 48: (1, {'@': 182}), 59: (1, {'@': 182}), 1: (1, {'@': 182}), 42: (1, {'@': 182}), 18: (1, {'@': 182}), 40: (1, {'@': 182}), 55: (1, {'@': 182}), 44: (1, {'@': 182}), 53: (1, {'@': 182}), 46: (1, {'@': 182}), 34: (1, {'@': 182}), 36: (1, {'@': 182}), 35: (1, {'@': 182}), 37: (1, {'@': 182}), 58: (1, {'@': 182}), 33: (1, {'@': 182}), 60: (1, {'@': 182}), 24: (1, {'@': 182}), 20: (1, {'@': 182}), 61: (1, {'@': 182}), 62: (1, {'@': 182}), 63: (1, {'@': 182})}, 318: {50: (1, {'@': 130}), 56: (1, {'@': 130}), 47: (1, {'@': 130}), 43: (1, {'@': 130}), 57: (1, {'@': 130}), 41: (1, {'@': 130}), 54: (1, {'@': 130}), 64: (1, {'@': 130}), 51: (1, {'@': 130}), 49: (1, {'@': 130}), 48: (1, {'@': 130}), 59: (1, {'@': 130}), 1: (1, {'@': 130}), 42: (1, {'@': 130}), 18: (1, {'@': 130}), 40: (1, {'@': 130}), 55: (1, {'@': 130}), 44: (1, {'@': 130}), 53: (1, {'@': 130}), 46: (1, {'@': 130}), 34: (1, {'@': 130}), 36: (1, {'@': 130}), 35: (1, {'@': 130}), 37: (1, {'@': 130}), 58: (1, {'@': 130}), 33: (1, {'@': 130}), 60: (1, {'@': 130}), 24: (1, {'@': 130}), 20: (1, {'@': 130}), 61: (1, {'@': 130}), 62: (1, {'@': 130}), 63: (1, {'@': 130})}, 319: {50: (1, {'@': 116}), 56: (1, {'@': 116}), 47: (1, {'@': 116}), 43: (1, {'@': 116}), 57: (1, {'@': 116}), 41: (1, {'@': 116}), 54: (1, {'@': 116}), 64: (1, {'@': 116}), 51: (1, {'@': 116}), 49: (1, {'@': 116}), 48: (1, {'@': 116}), 59: (1, {'@': 116}), 1: (1, {'@': 116}), 42: (1, {'@': 116}), 18: (1, {'@': 116}), 40: (1, {'@': 116}), 55: (1, {'@': 116}), 44: (1, {'@': 116}), 53: (1, {'@': 116}), 46: (1, {'@': 116}), 34: (1, {'@': 116}), 36: (1, {'@': 116}), 35: (1, {'@': 116}), 37: (1, {'@': 116}), 58: (1, {'@': 116}), 33: (1, {'@': 116}), 60: (1, {'@': 116}), 24: (1, {'@': 116}), 20: (1, {'@': 116}), 61: (1, {'@': 116}), 62: (1, {'@': 116}), 63: (1, {'@': 116})}, 320: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 67}), 40: (1, {'@': 67}), 34: (1, {'@': 67}), 36: (1, {'@': 67}), 35: (1, {'@': 67}), 37: (1, {'@': 67}), 58: (1, {'@': 67}), 33: (1, {'@': 67}), 60: (1, {'@': 67}), 24: (1, {'@': 67}), 20: (1, {'@': 67}), 61: (1, {'@': 67}), 62: (1, {'@': 67}), 63: (1, {'@': 67})}, 321: {50: (1, {'@': 297}), 56: (1, {'@': 297}), 47: (1, {'@': 297}), 43: (1, {'@': 297}), 57: (1, {'@': 297}), 41: (1, {'@': 297}), 54: (1, {'@': 297}), 64: (1, {'@': 297}), 51: (1, {'@': 297}), 49: (1, {'@': 297}), 48: (1, {'@': 297}), 59: (1, {'@': 297}), 1: (1, {'@': 297}), 42: (1, {'@': 297}), 18: (1, {'@': 297}), 40: (1, {'@': 297}), 55: (1, {'@': 297}), 44: (1, {'@': 297}), 53: (1, {'@': 297}), 46: (1, {'@': 297}), 34: (1, {'@': 297}), 36: (1, {'@': 297}), 35: (1, {'@': 297}), 37: (1, {'@': 297}), 58: (1, {'@': 297}), 33: (1, {'@': 297}), 60: (1, {'@': 297}), 24: (1, {'@': 297}), 20: (1, {'@': 297}), 61: (1, {'@': 297}), 62: (1, {'@': 297}), 63: (1, {'@': 297})}, 322: {1: (0, 284), 78: (0, 105), 56: (0, 303), 79: (0, 101), 77: (0, 134), 50: (1, {'@': 192}), 37: (1, {'@': 192}), 57: (1, {'@': 192}), 58: (1, {'@': 192}), 51: (1, {'@': 192}), 33: (1, {'@': 192}), 48: (1, {'@': 192}), 59: (1, {'@': 192}), 42: (1, {'@': 192}), 18: (1, {'@': 192}), 34: (1, {'@': 192}), 35: (1, {'@': 192}), 40: (1, {'@': 192}), 60: (1, {'@': 192}), 24: (1, {'@': 192}), 44: (1, {'@': 192}), 20: (1, {'@': 192}), 61: (1, {'@': 192}), 47: (1, {'@': 192}), 62: (1, {'@': 192}), 43: (1, {'@': 192}), 41: (1, {'@': 192}), 54: (1, {'@': 192}), 63: (1, {'@': 192}), 64: (1, {'@': 192}), 49: (1, {'@': 192}), 36: (1, {'@': 192}), 55: (1, {'@': 192}), 53: (1, {'@': 192}), 46: (1, {'@': 192})}, 323: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 297), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 324: {1: (1, {'@': 391}), 15: (1, {'@': 391}), 6: (1, {'@': 391}), 10: (1, {'@': 391}), 18: (1, {'@': 391}), 34: (1, {'@': 391}), 36: (1, {'@': 391}), 35: (1, {'@': 391}), 9: (1, {'@': 391}), 32: (1, {'@': 391}), 17: (1, {'@': 391}), 2: (1, {'@': 391}), 20: (1, {'@': 391})}, 325: {0: (0, 53), 8: (0, 684), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 38: (0, 620), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 326: {35: (0, 515), 34: (0, 491), 61: (0, 556), 39: (0, 497), 38: (0, 688), 36: (0, 509), 24: (0, 282), 65: (0, 280)}, 327: {24: (0, 178)}, 328: {24: (0, 513)}, 329: {50: (1, {'@': 184}), 56: (1, {'@': 184}), 37: (1, {'@': 184}), 57: (1, {'@': 184}), 58: (1, {'@': 184}), 51: (1, {'@': 184}), 33: (1, {'@': 184}), 48: (1, {'@': 184}), 1: (1, {'@': 184}), 59: (1, {'@': 184}), 42: (1, {'@': 184}), 18: (1, {'@': 184}), 34: (1, {'@': 184}), 35: (1, {'@': 184}), 40: (1, {'@': 184}), 60: (1, {'@': 184}), 24: (1, {'@': 184}), 44: (1, {'@': 184}), 20: (1, {'@': 184}), 61: (1, {'@': 184}), 47: (1, {'@': 184}), 62: (1, {'@': 184}), 43: (1, {'@': 184}), 41: (1, {'@': 184}), 54: (1, {'@': 184}), 63: (1, {'@': 184}), 64: (1, {'@': 184}), 49: (1, {'@': 184}), 36: (1, {'@': 184}), 55: (1, {'@': 184}), 53: (1, {'@': 184}), 46: (1, {'@': 184})}, 330: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 38: (0, 633), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 40: (0, 206), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 331: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 356), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 332: {1: (1, {'@': 403}), 15: (1, {'@': 403}), 6: (1, {'@': 403}), 10: (1, {'@': 403}), 18: (1, {'@': 403}), 34: (1, {'@': 403}), 36: (1, {'@': 403}), 35: (1, {'@': 403}), 9: (1, {'@': 403}), 32: (1, {'@': 403}), 17: (1, {'@': 403}), 2: (1, {'@': 403}), 20: (1, {'@': 403})}, 333: {50: (1, {'@': 301}), 56: (1, {'@': 301}), 47: (1, {'@': 301}), 43: (1, {'@': 301}), 57: (1, {'@': 301}), 41: (1, {'@': 301}), 54: (1, {'@': 301}), 64: (1, {'@': 301}), 51: (1, {'@': 301}), 49: (1, {'@': 301}), 48: (1, {'@': 301}), 59: (1, {'@': 301}), 1: (1, {'@': 301}), 42: (1, {'@': 301}), 18: (1, {'@': 301}), 40: (1, {'@': 301}), 55: (1, {'@': 301}), 44: (1, {'@': 301}), 53: (1, {'@': 301}), 46: (1, {'@': 301}), 34: (1, {'@': 301}), 36: (1, {'@': 301}), 35: (1, {'@': 301}), 37: (1, {'@': 301}), 58: (1, {'@': 301}), 33: (1, {'@': 301}), 60: (1, {'@': 301}), 24: (1, {'@': 301}), 20: (1, {'@': 301}), 61: (1, {'@': 301}), 62: (1, {'@': 301}), 63: (1, {'@': 301})}, 334: {1: (1, {'@': 405}), 15: (1, {'@': 405}), 6: (1, {'@': 405}), 10: (1, {'@': 405}), 18: (1, {'@': 405}), 34: (1, {'@': 405}), 36: (1, {'@': 405}), 35: (1, {'@': 405}), 9: (1, {'@': 405}), 32: (1, {'@': 405}), 17: (1, {'@': 405}), 2: (1, {'@': 405}), 20: (1, {'@': 405})}, 335: {35: (0, 515), 34: (0, 491), 65: (0, 545), 39: (0, 497), 36: (0, 509), 24: (0, 550), 61: (0, 556), 38: (0, 553)}, 336: {35: (0, 515), 38: (0, 126), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 388}), 15: (1, {'@': 388}), 6: (1, {'@': 388}), 10: (1, {'@': 388}), 18: (1, {'@': 388}), 9: (1, {'@': 388}), 32: (1, {'@': 388}), 17: (1, {'@': 388}), 2: (1, {'@': 388}), 20: (1, {'@': 388})}, 337: {10: (0, 478), 50: (1, {'@': 113}), 56: (1, {'@': 113}), 47: (1, {'@': 113}), 43: (1, {'@': 113}), 57: (1, {'@': 113}), 41: (1, {'@': 113}), 54: (1, {'@': 113}), 64: (1, {'@': 113}), 51: (1, {'@': 113}), 49: (1, {'@': 113}), 48: (1, {'@': 113}), 59: (1, {'@': 113}), 1: (1, {'@': 113}), 42: (1, {'@': 113}), 18: (1, {'@': 113}), 40: (1, {'@': 113}), 55: (1, {'@': 113}), 44: (1, {'@': 113}), 53: (1, {'@': 113}), 46: (1, {'@': 113}), 34: (1, {'@': 113}), 36: (1, {'@': 113}), 35: (1, {'@': 113}), 37: (1, {'@': 113}), 58: (1, {'@': 113}), 33: (1, {'@': 113}), 60: (1, {'@': 113}), 24: (1, {'@': 113}), 20: (1, {'@': 113}), 61: (1, {'@': 113}), 62: (1, {'@': 113}), 63: (1, {'@': 113})}, 338: {24: (1, {'@': 51}), 20: (1, {'@': 51}), 60: (1, {'@': 51}), 36: (1, {'@': 51}), 34: (1, {'@': 51}), 35: (1, {'@': 51})}, 339: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 557), 24: (0, 299), 36: (0, 509)}, 340: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 71), 36: (0, 509), 1: (1, {'@': 398}), 15: (1, {'@': 398}), 6: (1, {'@': 398}), 10: (1, {'@': 398}), 18: (1, {'@': 398}), 9: (1, {'@': 398}), 32: (1, {'@': 398}), 17: (1, {'@': 398}), 2: (1, {'@': 398}), 20: (1, {'@': 398})}, 341: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 598), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 342: {58: (0, 660)}, 343: {18: (0, 277), 41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 38: (0, 57), 62: (0, 63), 65: (0, 66), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 24: (0, 68), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270)}, 344: {41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 40: (0, 244), 45: (0, 455), 46: (0, 442), 38: (0, 250), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 345: {50: (1, {'@': 318}), 56: (1, {'@': 318}), 47: (1, {'@': 318}), 43: (1, {'@': 318}), 57: (1, {'@': 318}), 41: (1, {'@': 318}), 54: (1, {'@': 318}), 64: (1, {'@': 318}), 51: (1, {'@': 318}), 49: (1, {'@': 318}), 48: (1, {'@': 318}), 59: (1, {'@': 318}), 1: (1, {'@': 318}), 42: (1, {'@': 318}), 18: (1, {'@': 318}), 40: (1, {'@': 318}), 55: (1, {'@': 318}), 44: (1, {'@': 318}), 53: (1, {'@': 318}), 46: (1, {'@': 318}), 34: (1, {'@': 318}), 36: (1, {'@': 318}), 35: (1, {'@': 318}), 37: (1, {'@': 318}), 58: (1, {'@': 318}), 33: (1, {'@': 318}), 60: (1, {'@': 318}), 24: (1, {'@': 318}), 20: (1, {'@': 318}), 61: (1, {'@': 318}), 62: (1, {'@': 318}), 63: (1, {'@': 318})}, 346: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 359), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488), 34: (1, {'@': 167}), 35: (1, {'@': 167}), 36: (1, {'@': 167}), 37: (1, {'@': 167})}, 347: {50: (1, {'@': 204}), 56: (1, {'@': 204}), 47: (1, {'@': 204}), 43: (1, {'@': 204}), 57: (1, {'@': 204}), 41: (1, {'@': 204}), 54: (1, {'@': 204}), 64: (1, {'@': 204}), 51: (1, {'@': 204}), 49: (1, {'@': 204}), 48: (1, {'@': 204}), 59: (1, {'@': 204}), 1: (1, {'@': 204}), 42: (1, {'@': 204}), 18: (1, {'@': 204}), 40: (1, {'@': 204}), 55: (1, {'@': 204}), 44: (1, {'@': 204}), 53: (1, {'@': 204}), 46: (1, {'@': 204}), 34: (1, {'@': 204}), 36: (1, {'@': 204}), 35: (1, {'@': 204}), 37: (1, {'@': 204}), 58: (1, {'@': 204}), 33: (1, {'@': 204}), 60: (1, {'@': 204}), 24: (1, {'@': 204}), 20: (1, {'@': 204}), 61: (1, {'@': 204}), 62: (1, {'@': 204}), 63: (1, {'@': 204})}, 348: {34: (0, 491), 39: (0, 497), 24: (0, 560), 38: (0, 564), 65: (0, 574), 61: (0, 556), 36: (0, 509), 35: (0, 515)}, 349: {33: (0, 594), 34: (0, 491), 66: (0, 128), 39: (0, 497), 38: (0, 131), 36: (0, 509), 35: (0, 515)}, 350: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 65}), 40: (1, {'@': 65}), 34: (1, {'@': 65}), 36: (1, {'@': 65}), 35: (1, {'@': 65}), 37: (1, {'@': 65}), 58: (1, {'@': 65}), 33: (1, {'@': 65}), 60: (1, {'@': 65}), 24: (1, {'@': 65}), 20: (1, {'@': 65}), 61: (1, {'@': 65}), 62: (1, {'@': 65}), 63: (1, {'@': 65})}, 351: {58: (0, 148), 35: (0, 515), 33: (0, 150), 34: (0, 491), 39: (0, 497), 38: (0, 162), 36: (0, 509)}, 352: {50: (1, {'@': 196}), 56: (1, {'@': 196}), 47: (1, {'@': 196}), 43: (1, {'@': 196}), 57: (1, {'@': 196}), 41: (1, {'@': 196}), 54: (1, {'@': 196}), 64: (1, {'@': 196}), 51: (1, {'@': 196}), 49: (1, {'@': 196}), 48: (1, {'@': 196}), 59: (1, {'@': 196}), 1: (1, {'@': 196}), 42: (1, {'@': 196}), 18: (1, {'@': 196}), 40: (1, {'@': 196}), 55: (1, {'@': 196}), 44: (1, {'@': 196}), 53: (1, {'@': 196}), 46: (1, {'@': 196}), 34: (1, {'@': 196}), 36: (1, {'@': 196}), 35: (1, {'@': 196}), 37: (1, {'@': 196}), 58: (1, {'@': 196}), 33: (1, {'@': 196}), 60: (1, {'@': 196}), 24: (1, {'@': 196}), 20: (1, {'@': 196}), 61: (1, {'@': 196}), 62: (1, {'@': 196}), 63: (1, {'@': 196})}, 353: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 662), 1: (1, {'@': 394}), 15: (1, {'@': 394}), 6: (1, {'@': 394}), 10: (1, {'@': 394}), 18: (1, {'@': 394}), 9: (1, {'@': 394}), 32: (1, {'@': 394}), 17: (1, {'@': 394}), 2: (1, {'@': 394}), 20: (1, {'@': 394})}, 354: {35: (0, 515), 38: (0, 687), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 56}), 15: (1, {'@': 56}), 6: (1, {'@': 56}), 10: (1, {'@': 56}), 18: (1, {'@': 56}), 9: (1, {'@': 56}), 32: (1, {'@': 56}), 24: (1, {'@': 56}), 17: (1, {'@': 56}), 2: (1, {'@': 56}), 20: (1, {'@': 56})}, 355: {50: (1, {'@': 135}), 56: (1, {'@': 135}), 47: (1, {'@': 135}), 43: (1, {'@': 135}), 57: (1, {'@': 135}), 41: (1, {'@': 135}), 54: (1, {'@': 135}), 64: (1, {'@': 135}), 51: (1, {'@': 135}), 49: (1, {'@': 135}), 48: (1, {'@': 135}), 59: (1, {'@': 135}), 1: (1, {'@': 135}), 42: (1, {'@': 135}), 18: (1, {'@': 135}), 40: (1, {'@': 135}), 55: (1, {'@': 135}), 44: (1, {'@': 135}), 53: (1, {'@': 135}), 46: (1, {'@': 135}), 34: (1, {'@': 135}), 36: (1, {'@': 135}), 35: (1, {'@': 135}), 37: (1, {'@': 135}), 58: (1, {'@': 135}), 33: (1, {'@': 135}), 60: (1, {'@': 135}), 24: (1, {'@': 135}), 20: (1, {'@': 135}), 61: (1, {'@': 135}), 62: (1, {'@': 135}), 63: (1, {'@': 135})}, 356: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 64: (1, {'@': 63}), 40: (1, {'@': 63}), 34: (1, {'@': 63}), 36: (1, {'@': 63}), 35: (1, {'@': 63}), 37: (1, {'@': 63}), 58: (1, {'@': 63}), 33: (1, {'@': 63}), 60: (1, {'@': 63}), 24: (1, {'@': 63}), 20: (1, {'@': 63}), 61: (1, {'@': 63}), 62: (1, {'@': 63}), 63: (1, {'@': 63})}, 357: {1: (1, {'@': 399}), 15: (1, {'@': 399}), 6: (1, {'@': 399}), 10: (1, {'@': 399}), 18: (1, {'@': 399}), 34: (1, {'@': 399}), 36: (1, {'@': 399}), 35: (1, {'@': 399}), 9: (1, {'@': 399}), 32: (1, {'@': 399}), 17: (1, {'@': 399}), 2: (1, {'@': 399}), 20: (1, {'@': 399})}, 358: {50: (1, {'@': 230}), 56: (1, {'@': 230}), 47: (1, {'@': 230}), 43: (1, {'@': 230}), 57: (1, {'@': 230}), 41: (1, {'@': 230}), 54: (1, {'@': 230}), 64: (1, {'@': 230}), 51: (1, {'@': 230}), 49: (1, {'@': 230}), 48: (1, {'@': 230}), 59: (1, {'@': 230}), 1: (1, {'@': 230}), 42: (1, {'@': 230}), 18: (1, {'@': 230}), 40: (1, {'@': 230}), 55: (1, {'@': 230}), 44: (1, {'@': 230}), 53: (1, {'@': 230}), 46: (1, {'@': 230}), 34: (1, {'@': 230}), 36: (1, {'@': 230}), 35: (1, {'@': 230}), 37: (1, {'@': 230}), 58: (1, {'@': 230}), 33: (1, {'@': 230}), 60: (1, {'@': 230}), 24: (1, {'@': 230}), 20: (1, {'@': 230}), 61: (1, {'@': 230}), 62: (1, {'@': 230}), 63: (1, {'@': 230})}, 359: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 437}), 35: (1, {'@': 437}), 36: (1, {'@': 437}), 58: (1, {'@': 437}), 33: (1, {'@': 437}), 62: (1, {'@': 437}), 37: (1, {'@': 437})}, 360: {24: (0, 402)}, 361: {40: (0, 90)}, 362: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 436}), 35: (1, {'@': 436}), 36: (1, {'@': 436}), 58: (1, {'@': 436}), 33: (1, {'@': 436}), 62: (1, {'@': 436}), 37: (1, {'@': 436})}, 363: {50: (1, {'@': 229}), 56: (1, {'@': 229}), 47: (1, {'@': 229}), 43: (1, {'@': 229}), 57: (1, {'@': 229}), 41: (1, {'@': 229}), 54: (1, {'@': 229}), 64: (1, {'@': 229}), 51: (1, {'@': 229}), 49: (1, {'@': 229}), 48: (1, {'@': 229}), 59: (1, {'@': 229}), 1: (1, {'@': 229}), 42: (1, {'@': 229}), 18: (1, {'@': 229}), 40: (1, {'@': 229}), 55: (1, {'@': 229}), 44: (1, {'@': 229}), 53: (1, {'@': 229}), 46: (1, {'@': 229}), 34: (1, {'@': 229}), 36: (1, {'@': 229}), 35: (1, {'@': 229}), 37: (1, {'@': 229}), 58: (1, {'@': 229}), 33: (1, {'@': 229}), 60: (1, {'@': 229}), 24: (1, {'@': 229}), 20: (1, {'@': 229}), 61: (1, {'@': 229}), 62: (1, {'@': 229}), 63: (1, {'@': 229})}, 364: {50: (1, {'@': 123}), 56: (1, {'@': 123}), 47: (1, {'@': 123}), 43: (1, {'@': 123}), 57: (1, {'@': 123}), 41: (1, {'@': 123}), 54: (1, {'@': 123}), 64: (1, {'@': 123}), 51: (1, {'@': 123}), 49: (1, {'@': 123}), 48: (1, {'@': 123}), 59: (1, {'@': 123}), 1: (1, {'@': 123}), 42: (1, {'@': 123}), 18: (1, {'@': 123}), 40: (1, {'@': 123}), 55: (1, {'@': 123}), 44: (1, {'@': 123}), 53: (1, {'@': 123}), 46: (1, {'@': 123}), 34: (1, {'@': 123}), 36: (1, {'@': 123}), 35: (1, {'@': 123}), 37: (1, {'@': 123}), 58: (1, {'@': 123}), 33: (1, {'@': 123}), 60: (1, {'@': 123}), 24: (1, {'@': 123}), 20: (1, {'@': 123}), 61: (1, {'@': 123}), 62: (1, {'@': 123}), 63: (1, {'@': 123})}, 365: {24: (0, 406)}, 366: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 142), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 58: (0, 225), 32: (0, 488)}, 367: {50: (1, {'@': 226}), 56: (1, {'@': 226}), 47: (1, {'@': 226}), 43: (1, {'@': 226}), 57: (1, {'@': 226}), 41: (1, {'@': 226}), 54: (1, {'@': 226}), 64: (1, {'@': 226}), 51: (1, {'@': 226}), 49: (1, {'@': 226}), 48: (1, {'@': 226}), 59: (1, {'@': 226}), 1: (1, {'@': 226}), 42: (1, {'@': 226}), 18: (1, {'@': 226}), 40: (1, {'@': 226}), 55: (1, {'@': 226}), 44: (1, {'@': 226}), 53: (1, {'@': 226}), 46: (1, {'@': 226}), 34: (1, {'@': 226}), 36: (1, {'@': 226}), 35: (1, {'@': 226}), 37: (1, {'@': 226}), 58: (1, {'@': 226}), 33: (1, {'@': 226}), 60: (1, {'@': 226}), 24: (1, {'@': 226}), 20: (1, {'@': 226}), 61: (1, {'@': 226}), 62: (1, {'@': 226}), 63: (1, {'@': 226})}, 368: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 200), 58: (0, 403)}, 369: {24: (0, 404)}, 370: {50: (1, {'@': 129}), 56: (1, {'@': 129}), 47: (1, {'@': 129}), 43: (1, {'@': 129}), 57: (1, {'@': 129}), 41: (1, {'@': 129}), 54: (1, {'@': 129}), 64: (1, {'@': 129}), 51: (1, {'@': 129}), 49: (1, {'@': 129}), 48: (1, {'@': 129}), 59: (1, {'@': 129}), 1: (1, {'@': 129}), 42: (1, {'@': 129}), 18: (1, {'@': 129}), 40: (1, {'@': 129}), 55: (1, {'@': 129}), 44: (1, {'@': 129}), 53: (1, {'@': 129}), 46: (1, {'@': 129}), 34: (1, {'@': 129}), 36: (1, {'@': 129}), 35: (1, {'@': 129}), 37: (1, {'@': 129}), 58: (1, {'@': 129}), 33: (1, {'@': 129}), 60: (1, {'@': 129}), 24: (1, {'@': 129}), 20: (1, {'@': 129}), 61: (1, {'@': 129}), 62: (1, {'@': 129}), 63: (1, {'@': 129})}, 371: {35: (0, 515), 34: (0, 491), 39: (0, 497), 24: (0, 408), 38: (0, 410), 36: (0, 509)}, 372: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 217), 36: (0, 509), 1: (1, {'@': 412}), 15: (1, {'@': 412}), 6: (1, {'@': 412}), 10: (1, {'@': 412}), 18: (1, {'@': 412}), 9: (1, {'@': 412}), 32: (1, {'@': 412}), 17: (1, {'@': 412}), 2: (1, {'@': 412}), 20: (1, {'@': 412})}, 373: {50: (1, {'@': 224}), 56: (1, {'@': 224}), 47: (1, {'@': 224}), 43: (1, {'@': 224}), 57: (1, {'@': 224}), 41: (1, {'@': 224}), 54: (1, {'@': 224}), 64: (1, {'@': 224}), 51: (1, {'@': 224}), 49: (1, {'@': 224}), 48: (1, {'@': 224}), 59: (1, {'@': 224}), 1: (1, {'@': 224}), 42: (1, {'@': 224}), 18: (1, {'@': 224}), 40: (1, {'@': 224}), 55: (1, {'@': 224}), 44: (1, {'@': 224}), 53: (1, {'@': 224}), 46: (1, {'@': 224}), 34: (1, {'@': 224}), 36: (1, {'@': 224}), 35: (1, {'@': 224}), 37: (1, {'@': 224}), 58: (1, {'@': 224}), 33: (1, {'@': 224}), 60: (1, {'@': 224}), 24: (1, {'@': 224}), 20: (1, {'@': 224}), 61: (1, {'@': 224}), 62: (1, {'@': 224}), 63: (1, {'@': 224})}, 374: {50: (1, {'@': 215}), 56: (1, {'@': 215}), 47: (1, {'@': 215}), 43: (1, {'@': 215}), 57: (1, {'@': 215}), 41: (1, {'@': 215}), 54: (1, {'@': 215}), 64: (1, {'@': 215}), 51: (1, {'@': 215}), 49: (1, {'@': 215}), 48: (1, {'@': 215}), 59: (1, {'@': 215}), 1: (1, {'@': 215}), 42: (1, {'@': 215}), 18: (1, {'@': 215}), 40: (1, {'@': 215}), 55: (1, {'@': 215}), 44: (1, {'@': 215}), 53: (1, {'@': 215}), 46: (1, {'@': 215}), 34: (1, {'@': 215}), 36: (1, {'@': 215}), 35: (1, {'@': 215}), 37: (1, {'@': 215}), 58: (1, {'@': 215}), 33: (1, {'@': 215}), 60: (1, {'@': 215}), 24: (1, {'@': 215}), 20: (1, {'@': 215}), 61: (1, {'@': 215}), 62: (1, {'@': 215}), 63: (1, {'@': 215})}, 375: {50: (1, {'@': 144}), 56: (1, {'@': 144}), 47: (1, {'@': 144}), 43: (1, {'@': 144}), 57: (1, {'@': 144}), 41: (1, {'@': 144}), 54: (1, {'@': 144}), 64: (1, {'@': 144}), 51: (1, {'@': 144}), 49: (1, {'@': 144}), 48: (1, {'@': 144}), 59: (1, {'@': 144}), 1: (1, {'@': 144}), 42: (1, {'@': 144}), 18: (1, {'@': 144}), 40: (1, {'@': 144}), 55: (1, {'@': 144}), 44: (1, {'@': 144}), 53: (1, {'@': 144}), 46: (1, {'@': 144}), 34: (1, {'@': 144}), 36: (1, {'@': 144}), 35: (1, {'@': 144}), 37: (1, {'@': 144}), 58: (1, {'@': 144}), 33: (1, {'@': 144}), 60: (1, {'@': 144}), 24: (1, {'@': 144}), 20: (1, {'@': 144}), 61: (1, {'@': 144}), 62: (1, {'@': 144}), 63: (1, {'@': 144})}, 376: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 693), 36: (0, 509), 1: (1, {'@': 342}), 15: (1, {'@': 342}), 6: (1, {'@': 342}), 10: (1, {'@': 342}), 18: (1, {'@': 342}), 9: (1, {'@': 342}), 32: (1, {'@': 342}), 17: (1, {'@': 342}), 2: (1, {'@': 342}), 20: (1, {'@': 342})}, 377: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 415), 36: (0, 509), 1: (1, {'@': 374}), 15: (1, {'@': 374}), 6: (1, {'@': 374}), 10: (1, {'@': 374}), 18: (1, {'@': 374}), 9: (1, {'@': 374}), 32: (1, {'@': 374}), 17: (1, {'@': 374}), 2: (1, {'@': 374}), 20: (1, {'@': 374})}, 378: {1: (1, {'@': 375}), 15: (1, {'@': 375}), 6: (1, {'@': 375}), 10: (1, {'@': 375}), 18: (1, {'@': 375}), 34: (1, {'@': 375}), 36: (1, {'@': 375}), 35: (1, {'@': 375}), 9: (1, {'@': 375}), 32: (1, {'@': 375}), 17: (1, {'@': 375}), 2: (1, {'@': 375}), 20: (1, {'@': 375})}, 379: {58: (0, 262)}, 380: {1: (1, {'@': 377}), 15: (1, {'@': 377}), 6: (1, {'@': 377}), 10: (1, {'@': 377}), 18: (1, {'@': 377}), 34: (1, {'@': 377}), 36: (1, {'@': 377}), 35: (1, {'@': 377}), 9: (1, {'@': 377}), 32: (1, {'@': 377}), 17: (1, {'@': 377}), 2: (1, {'@': 377}), 20: (1, {'@': 377})}, 381: {38: (0, 135), 66: (0, 390), 34: (0, 491), 39: (0, 497), 36: (0, 509), 35: (0, 515)}, 382: {1: (1, {'@': 381}), 15: (1, {'@': 381}), 6: (1, {'@': 381}), 10: (1, {'@': 381}), 18: (1, {'@': 381}), 34: (1, {'@': 381}), 36: (1, {'@': 381}), 35: (1, {'@': 381}), 9: (1, {'@': 381}), 32: (1, {'@': 381}), 17: (1, {'@': 381}), 2: (1, {'@': 381}), 20: (1, {'@': 381})}, 383: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 226), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 384: {1: (1, {'@': 345}), 15: (1, {'@': 345}), 6: (1, {'@': 345}), 10: (1, {'@': 345}), 18: (1, {'@': 345}), 34: (1, {'@': 345}), 36: (1, {'@': 345}), 35: (1, {'@': 345}), 9: (1, {'@': 345}), 32: (1, {'@': 345}), 17: (1, {'@': 345}), 2: (1, {'@': 345}), 20: (1, {'@': 345})}, 385: {58: (0, 268)}, 386: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 301), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 387: {1: (1, {'@': 343}), 15: (1, {'@': 343}), 6: (1, {'@': 343}), 10: (1, {'@': 343}), 18: (1, {'@': 343}), 34: (1, {'@': 343}), 36: (1, {'@': 343}), 35: (1, {'@': 343}), 9: (1, {'@': 343}), 32: (1, {'@': 343}), 17: (1, {'@': 343}), 2: (1, {'@': 343}), 20: (1, {'@': 343})}, 388: {41: (0, 510), 34: (0, 491), 43: (0, 423), 39: (0, 497), 38: (0, 286), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 40: (0, 281), 54: (0, 218), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 42: (0, 536), 55: (0, 224), 18: (0, 277)}, 389: {1: (1, {'@': 339}), 15: (1, {'@': 339}), 6: (1, {'@': 339}), 10: (1, {'@': 339}), 18: (1, {'@': 339}), 34: (1, {'@': 339}), 36: (1, {'@': 339}), 35: (1, {'@': 339}), 9: (1, {'@': 339}), 32: (1, {'@': 339}), 17: (1, {'@': 339}), 2: (1, {'@': 339}), 20: (1, {'@': 339})}, 390: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 38: (0, 592), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 630), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 391: {50: (1, {'@': 160}), 56: (1, {'@': 160}), 47: (1, {'@': 160}), 43: (1, {'@': 160}), 57: (1, {'@': 160}), 41: (1, {'@': 160}), 54: (1, {'@': 160}), 64: (1, {'@': 160}), 51: (1, {'@': 160}), 49: (1, {'@': 160}), 48: (1, {'@': 160}), 59: (1, {'@': 160}), 1: (1, {'@': 160}), 42: (1, {'@': 160}), 18: (1, {'@': 160}), 40: (1, {'@': 160}), 55: (1, {'@': 160}), 44: (1, {'@': 160}), 53: (1, {'@': 160}), 46: (1, {'@': 160}), 34: (1, {'@': 160}), 36: (1, {'@': 160}), 35: (1, {'@': 160}), 37: (1, {'@': 160}), 58: (1, {'@': 160}), 33: (1, {'@': 160}), 60: (1, {'@': 160}), 24: (1, {'@': 160}), 20: (1, {'@': 160}), 61: (1, {'@': 160}), 62: (1, {'@': 160}), 63: (1, {'@': 160})}, 392: {40: (0, 413)}, 393: {50: (1, {'@': 212}), 56: (1, {'@': 212}), 47: (1, {'@': 212}), 43: (1, {'@': 212}), 57: (1, {'@': 212}), 41: (1, {'@': 212}), 54: (1, {'@': 212}), 64: (1, {'@': 212}), 51: (1, {'@': 212}), 49: (1, {'@': 212}), 48: (1, {'@': 212}), 59: (1, {'@': 212}), 1: (1, {'@': 212}), 42: (1, {'@': 212}), 18: (1, {'@': 212}), 40: (1, {'@': 212}), 55: (1, {'@': 212}), 44: (1, {'@': 212}), 53: (1, {'@': 212}), 46: (1, {'@': 212}), 34: (1, {'@': 212}), 36: (1, {'@': 212}), 35: (1, {'@': 212}), 37: (1, {'@': 212}), 58: (1, {'@': 212}), 33: (1, {'@': 212}), 60: (1, {'@': 212}), 24: (1, {'@': 212}), 20: (1, {'@': 212}), 61: (1, {'@': 212}), 62: (1, {'@': 212}), 63: (1, {'@': 212})}, 394: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 695), 36: (0, 509), 1: (1, {'@': 336}), 15: (1, {'@': 336}), 6: (1, {'@': 336}), 10: (1, {'@': 336}), 18: (1, {'@': 336}), 9: (1, {'@': 336}), 32: (1, {'@': 336}), 17: (1, {'@': 336}), 2: (1, {'@': 336}), 20: (1, {'@': 336})}, 395: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 58: (1, {'@': 413}), 34: (1, {'@': 413}), 35: (1, {'@': 413}), 36: (1, {'@': 413}), 24: (1, {'@': 413})}, 396: {34: (1, {'@': 169}), 35: (1, {'@': 169}), 36: (1, {'@': 169}), 37: (1, {'@': 169})}, 397: {1: (1, {'@': 349}), 15: (1, {'@': 349}), 6: (1, {'@': 349}), 10: (1, {'@': 349}), 18: (1, {'@': 349}), 34: (1, {'@': 349}), 36: (1, {'@': 349}), 35: (1, {'@': 349}), 9: (1, {'@': 349}), 32: (1, {'@': 349}), 17: (1, {'@': 349}), 2: (1, {'@': 349}), 20: (1, {'@': 349})}, 398: {50: (1, {'@': 249}), 56: (1, {'@': 249}), 47: (1, {'@': 249}), 43: (1, {'@': 249}), 57: (1, {'@': 249}), 41: (1, {'@': 249}), 54: (1, {'@': 249}), 64: (1, {'@': 249}), 51: (1, {'@': 249}), 49: (1, {'@': 249}), 48: (1, {'@': 249}), 59: (1, {'@': 249}), 1: (1, {'@': 249}), 42: (1, {'@': 249}), 18: (1, {'@': 249}), 40: (1, {'@': 249}), 55: (1, {'@': 249}), 44: (1, {'@': 249}), 53: (1, {'@': 249}), 46: (1, {'@': 249}), 34: (1, {'@': 249}), 36: (1, {'@': 249}), 35: (1, {'@': 249}), 37: (1, {'@': 249}), 58: (1, {'@': 249}), 33: (1, {'@': 249}), 60: (1, {'@': 249}), 24: (1, {'@': 249}), 20: (1, {'@': 249}), 61: (1, {'@': 249}), 62: (1, {'@': 249}), 63: (1, {'@': 249})}, 399: {58: (0, 84)}, 400: {50: (1, {'@': 235}), 56: (1, {'@': 235}), 47: (1, {'@': 235}), 43: (1, {'@': 235}), 57: (1, {'@': 235}), 41: (1, {'@': 235}), 54: (1, {'@': 235}), 64: (1, {'@': 235}), 51: (1, {'@': 235}), 49: (1, {'@': 235}), 48: (1, {'@': 235}), 59: (1, {'@': 235}), 1: (1, {'@': 235}), 42: (1, {'@': 235}), 18: (1, {'@': 235}), 40: (1, {'@': 235}), 55: (1, {'@': 235}), 44: (1, {'@': 235}), 53: (1, {'@': 235}), 46: (1, {'@': 235}), 34: (1, {'@': 235}), 36: (1, {'@': 235}), 35: (1, {'@': 235}), 37: (1, {'@': 235}), 58: (1, {'@': 235}), 33: (1, {'@': 235}), 60: (1, {'@': 235}), 24: (1, {'@': 235}), 20: (1, {'@': 235}), 61: (1, {'@': 235}), 62: (1, {'@': 235}), 63: (1, {'@': 235})}, 401: {50: (1, {'@': 210}), 56: (1, {'@': 210}), 47: (1, {'@': 210}), 43: (1, {'@': 210}), 57: (1, {'@': 210}), 41: (1, {'@': 210}), 54: (1, {'@': 210}), 64: (1, {'@': 210}), 51: (1, {'@': 210}), 49: (1, {'@': 210}), 48: (1, {'@': 210}), 59: (1, {'@': 210}), 1: (1, {'@': 210}), 42: (1, {'@': 210}), 18: (1, {'@': 210}), 40: (1, {'@': 210}), 55: (1, {'@': 210}), 44: (1, {'@': 210}), 53: (1, {'@': 210}), 46: (1, {'@': 210}), 34: (1, {'@': 210}), 36: (1, {'@': 210}), 35: (1, {'@': 210}), 37: (1, {'@': 210}), 58: (1, {'@': 210}), 33: (1, {'@': 210}), 60: (1, {'@': 210}), 24: (1, {'@': 210}), 20: (1, {'@': 210}), 61: (1, {'@': 210}), 62: (1, {'@': 210}), 63: (1, {'@': 210})}, 402: {50: (1, {'@': 228}), 56: (1, {'@': 228}), 47: (1, {'@': 228}), 43: (1, {'@': 228}), 57: (1, {'@': 228}), 41: (1, {'@': 228}), 54: (1, {'@': 228}), 64: (1, {'@': 228}), 51: (1, {'@': 228}), 49: (1, {'@': 228}), 48: (1, {'@': 228}), 59: (1, {'@': 228}), 1: (1, {'@': 228}), 42: (1, {'@': 228}), 18: (1, {'@': 228}), 40: (1, {'@': 228}), 55: (1, {'@': 228}), 44: (1, {'@': 228}), 53: (1, {'@': 228}), 46: (1, {'@': 228}), 34: (1, {'@': 228}), 36: (1, {'@': 228}), 35: (1, {'@': 228}), 37: (1, {'@': 228}), 58: (1, {'@': 228}), 33: (1, {'@': 228}), 60: (1, {'@': 228}), 24: (1, {'@': 228}), 20: (1, {'@': 228}), 61: (1, {'@': 228}), 62: (1, {'@': 228}), 63: (1, {'@': 228})}, 403: {50: (1, {'@': 208}), 56: (1, {'@': 208}), 47: (1, {'@': 208}), 43: (1, {'@': 208}), 57: (1, {'@': 208}), 41: (1, {'@': 208}), 54: (1, {'@': 208}), 64: (1, {'@': 208}), 51: (1, {'@': 208}), 49: (1, {'@': 208}), 48: (1, {'@': 208}), 59: (1, {'@': 208}), 1: (1, {'@': 208}), 42: (1, {'@': 208}), 18: (1, {'@': 208}), 40: (1, {'@': 208}), 55: (1, {'@': 208}), 44: (1, {'@': 208}), 53: (1, {'@': 208}), 46: (1, {'@': 208}), 34: (1, {'@': 208}), 36: (1, {'@': 208}), 35: (1, {'@': 208}), 37: (1, {'@': 208}), 58: (1, {'@': 208}), 33: (1, {'@': 208}), 60: (1, {'@': 208}), 24: (1, {'@': 208}), 20: (1, {'@': 208}), 61: (1, {'@': 208}), 62: (1, {'@': 208}), 63: (1, {'@': 208})}, 404: {50: (1, {'@': 223}), 56: (1, {'@': 223}), 47: (1, {'@': 223}), 43: (1, {'@': 223}), 57: (1, {'@': 223}), 41: (1, {'@': 223}), 54: (1, {'@': 223}), 64: (1, {'@': 223}), 51: (1, {'@': 223}), 49: (1, {'@': 223}), 48: (1, {'@': 223}), 59: (1, {'@': 223}), 1: (1, {'@': 223}), 42: (1, {'@': 223}), 18: (1, {'@': 223}), 40: (1, {'@': 223}), 55: (1, {'@': 223}), 44: (1, {'@': 223}), 53: (1, {'@': 223}), 46: (1, {'@': 223}), 34: (1, {'@': 223}), 36: (1, {'@': 223}), 35: (1, {'@': 223}), 37: (1, {'@': 223}), 58: (1, {'@': 223}), 33: (1, {'@': 223}), 60: (1, {'@': 223}), 24: (1, {'@': 223}), 20: (1, {'@': 223}), 61: (1, {'@': 223}), 62: (1, {'@': 223}), 63: (1, {'@': 223})}, 405: {38: (0, 275), 35: (0, 515), 58: (0, 215), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 406: {50: (1, {'@': 225}), 56: (1, {'@': 225}), 47: (1, {'@': 225}), 43: (1, {'@': 225}), 57: (1, {'@': 225}), 41: (1, {'@': 225}), 54: (1, {'@': 225}), 64: (1, {'@': 225}), 51: (1, {'@': 225}), 49: (1, {'@': 225}), 48: (1, {'@': 225}), 59: (1, {'@': 225}), 1: (1, {'@': 225}), 42: (1, {'@': 225}), 18: (1, {'@': 225}), 40: (1, {'@': 225}), 55: (1, {'@': 225}), 44: (1, {'@': 225}), 53: (1, {'@': 225}), 46: (1, {'@': 225}), 34: (1, {'@': 225}), 36: (1, {'@': 225}), 35: (1, {'@': 225}), 37: (1, {'@': 225}), 58: (1, {'@': 225}), 33: (1, {'@': 225}), 60: (1, {'@': 225}), 24: (1, {'@': 225}), 20: (1, {'@': 225}), 61: (1, {'@': 225}), 62: (1, {'@': 225}), 63: (1, {'@': 225})}, 407: {50: (1, {'@': 203}), 56: (1, {'@': 203}), 47: (1, {'@': 203}), 43: (1, {'@': 203}), 57: (1, {'@': 203}), 41: (1, {'@': 203}), 54: (1, {'@': 203}), 64: (1, {'@': 203}), 51: (1, {'@': 203}), 49: (1, {'@': 203}), 48: (1, {'@': 203}), 59: (1, {'@': 203}), 1: (1, {'@': 203}), 42: (1, {'@': 203}), 18: (1, {'@': 203}), 40: (1, {'@': 203}), 55: (1, {'@': 203}), 44: (1, {'@': 203}), 53: (1, {'@': 203}), 46: (1, {'@': 203}), 34: (1, {'@': 203}), 36: (1, {'@': 203}), 35: (1, {'@': 203}), 37: (1, {'@': 203}), 58: (1, {'@': 203}), 33: (1, {'@': 203}), 60: (1, {'@': 203}), 24: (1, {'@': 203}), 20: (1, {'@': 203}), 61: (1, {'@': 203}), 62: (1, {'@': 203}), 63: (1, {'@': 203})}, 408: {50: (1, {'@': 222}), 56: (1, {'@': 222}), 47: (1, {'@': 222}), 43: (1, {'@': 222}), 57: (1, {'@': 222}), 41: (1, {'@': 222}), 54: (1, {'@': 222}), 64: (1, {'@': 222}), 51: (1, {'@': 222}), 49: (1, {'@': 222}), 48: (1, {'@': 222}), 59: (1, {'@': 222}), 1: (1, {'@': 222}), 42: (1, {'@': 222}), 18: (1, {'@': 222}), 40: (1, {'@': 222}), 55: (1, {'@': 222}), 44: (1, {'@': 222}), 53: (1, {'@': 222}), 46: (1, {'@': 222}), 34: (1, {'@': 222}), 36: (1, {'@': 222}), 35: (1, {'@': 222}), 37: (1, {'@': 222}), 58: (1, {'@': 222}), 33: (1, {'@': 222}), 60: (1, {'@': 222}), 24: (1, {'@': 222}), 20: (1, {'@': 222}), 61: (1, {'@': 222}), 62: (1, {'@': 222}), 63: (1, {'@': 222})}, 409: {35: (0, 515), 34: (0, 491), 39: (0, 497), 58: (0, 246), 36: (0, 509), 38: (0, 342)}, 410: {24: (0, 708)}, 411: {58: (0, 352), 35: (0, 515), 38: (0, 201), 65: (0, 205), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556)}, 412: {41: (0, 510), 34: (0, 491), 38: (0, 243), 24: (0, 173), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 62: (0, 187), 47: (0, 452), 48: (0, 440), 65: (0, 563), 54: (0, 218), 49: (0, 487), 50: (0, 270), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 18: (0, 277)}, 413: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 701), 36: (0, 509), 1: (1, {'@': 334}), 15: (1, {'@': 334}), 6: (1, {'@': 334}), 10: (1, {'@': 334}), 18: (1, {'@': 334}), 9: (1, {'@': 334}), 32: (1, {'@': 334}), 17: (1, {'@': 334}), 2: (1, {'@': 334}), 20: (1, {'@': 334})}, 414: {62: (0, 306), 38: (0, 326), 41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 65: (0, 339), 24: (0, 345), 54: (0, 218), 49: (0, 487), 50: (0, 270), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 18: (0, 277)}, 415: {1: (1, {'@': 373}), 15: (1, {'@': 373}), 6: (1, {'@': 373}), 10: (1, {'@': 373}), 18: (1, {'@': 373}), 34: (1, {'@': 373}), 36: (1, {'@': 373}), 35: (1, {'@': 373}), 9: (1, {'@': 373}), 32: (1, {'@': 373}), 17: (1, {'@': 373}), 2: (1, {'@': 373}), 20: (1, {'@': 373})}, 416: {50: (1, {'@': 183}), 56: (1, {'@': 183}), 37: (1, {'@': 183}), 57: (1, {'@': 183}), 58: (1, {'@': 183}), 51: (1, {'@': 183}), 33: (1, {'@': 183}), 48: (1, {'@': 183}), 1: (1, {'@': 183}), 59: (1, {'@': 183}), 42: (1, {'@': 183}), 18: (1, {'@': 183}), 34: (1, {'@': 183}), 35: (1, {'@': 183}), 40: (1, {'@': 183}), 60: (1, {'@': 183}), 24: (1, {'@': 183}), 44: (1, {'@': 183}), 20: (1, {'@': 183}), 61: (1, {'@': 183}), 47: (1, {'@': 183}), 62: (1, {'@': 183}), 43: (1, {'@': 183}), 41: (1, {'@': 183}), 54: (1, {'@': 183}), 63: (1, {'@': 183}), 64: (1, {'@': 183}), 49: (1, {'@': 183}), 36: (1, {'@': 183}), 55: (1, {'@': 183}), 53: (1, {'@': 183}), 46: (1, {'@': 183})}, 417: {41: (0, 510), 34: (0, 491), 38: (0, 532), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277), 24: (1, {'@': 50}), 20: (1, {'@': 50}), 60: (1, {'@': 50})}, 418: {50: (1, {'@': 258}), 56: (1, {'@': 258}), 47: (1, {'@': 258}), 43: (1, {'@': 258}), 57: (1, {'@': 258}), 41: (1, {'@': 258}), 54: (1, {'@': 258}), 64: (1, {'@': 258}), 51: (1, {'@': 258}), 49: (1, {'@': 258}), 48: (1, {'@': 258}), 59: (1, {'@': 258}), 1: (1, {'@': 258}), 42: (1, {'@': 258}), 18: (1, {'@': 258}), 40: (1, {'@': 258}), 55: (1, {'@': 258}), 44: (1, {'@': 258}), 53: (1, {'@': 258}), 46: (1, {'@': 258}), 34: (1, {'@': 258}), 36: (1, {'@': 258}), 35: (1, {'@': 258}), 37: (1, {'@': 258}), 58: (1, {'@': 258}), 33: (1, {'@': 258}), 60: (1, {'@': 258}), 24: (1, {'@': 258}), 20: (1, {'@': 258}), 61: (1, {'@': 258}), 62: (1, {'@': 258}), 63: (1, {'@': 258})}, 419: {50: (1, {'@': 159}), 56: (1, {'@': 159}), 47: (1, {'@': 159}), 43: (1, {'@': 159}), 57: (1, {'@': 159}), 41: (1, {'@': 159}), 54: (1, {'@': 159}), 64: (1, {'@': 159}), 51: (1, {'@': 159}), 49: (1, {'@': 159}), 48: (1, {'@': 159}), 59: (1, {'@': 159}), 1: (1, {'@': 159}), 42: (1, {'@': 159}), 18: (1, {'@': 159}), 40: (1, {'@': 159}), 55: (1, {'@': 159}), 44: (1, {'@': 159}), 53: (1, {'@': 159}), 46: (1, {'@': 159}), 34: (1, {'@': 159}), 36: (1, {'@': 159}), 35: (1, {'@': 159}), 37: (1, {'@': 159}), 58: (1, {'@': 159}), 33: (1, {'@': 159}), 60: (1, {'@': 159}), 24: (1, {'@': 159}), 20: (1, {'@': 159}), 61: (1, {'@': 159}), 62: (1, {'@': 159}), 63: (1, {'@': 159})}, 420: {24: (0, 731)}, 421: {50: (1, {'@': 429}), 56: (1, {'@': 429}), 47: (1, {'@': 429}), 72: (1, {'@': 429}), 43: (1, {'@': 429}), 57: (1, {'@': 429}), 41: (1, {'@': 429}), 54: (1, {'@': 429}), 64: (1, {'@': 429}), 51: (1, {'@': 429}), 49: (1, {'@': 429}), 48: (1, {'@': 429}), 59: (1, {'@': 429}), 1: (1, {'@': 429}), 10: (1, {'@': 429}), 42: (1, {'@': 429}), 18: (1, {'@': 429}), 40: (1, {'@': 429}), 55: (1, {'@': 429}), 44: (1, {'@': 429}), 53: (1, {'@': 429}), 46: (1, {'@': 429}), 34: (1, {'@': 429}), 36: (1, {'@': 429}), 35: (1, {'@': 429}), 37: (1, {'@': 429}), 58: (1, {'@': 429}), 33: (1, {'@': 429}), 60: (1, {'@': 429}), 24: (1, {'@': 429}), 20: (1, {'@': 429}), 61: (1, {'@': 429}), 62: (1, {'@': 429}), 63: (1, {'@': 429})}, 422: {50: (1, {'@': 257}), 56: (1, {'@': 257}), 47: (1, {'@': 257}), 43: (1, {'@': 257}), 57: (1, {'@': 257}), 41: (1, {'@': 257}), 54: (1, {'@': 257}), 64: (1, {'@': 257}), 51: (1, {'@': 257}), 49: (1, {'@': 257}), 48: (1, {'@': 257}), 59: (1, {'@': 257}), 1: (1, {'@': 257}), 42: (1, {'@': 257}), 18: (1, {'@': 257}), 40: (1, {'@': 257}), 55: (1, {'@': 257}), 44: (1, {'@': 257}), 53: (1, {'@': 257}), 46: (1, {'@': 257}), 34: (1, {'@': 257}), 36: (1, {'@': 257}), 35: (1, {'@': 257}), 37: (1, {'@': 257}), 58: (1, {'@': 257}), 33: (1, {'@': 257}), 60: (1, {'@': 257}), 24: (1, {'@': 257}), 20: (1, {'@': 257}), 61: (1, {'@': 257}), 62: (1, {'@': 257}), 63: (1, {'@': 257})}, 423: {1: (1, {'@': 76}), 15: (1, {'@': 76}), 6: (1, {'@': 76}), 10: (1, {'@': 76}), 18: (1, {'@': 76}), 34: (1, {'@': 76}), 36: (1, {'@': 76}), 35: (1, {'@': 76}), 9: (1, {'@': 76}), 32: (1, {'@': 76}), 17: (1, {'@': 76}), 2: (1, {'@': 76}), 20: (1, {'@': 76})}, 424: {50: (1, {'@': 104}), 56: (1, {'@': 104}), 47: (1, {'@': 104}), 43: (1, {'@': 104}), 57: (1, {'@': 104}), 41: (1, {'@': 104}), 54: (1, {'@': 104}), 64: (1, {'@': 104}), 51: (1, {'@': 104}), 49: (1, {'@': 104}), 48: (1, {'@': 104}), 59: (1, {'@': 104}), 1: (1, {'@': 104}), 42: (1, {'@': 104}), 18: (1, {'@': 104}), 40: (1, {'@': 104}), 55: (1, {'@': 104}), 44: (1, {'@': 104}), 53: (1, {'@': 104}), 46: (1, {'@': 104}), 34: (1, {'@': 104}), 36: (1, {'@': 104}), 35: (1, {'@': 104}), 37: (1, {'@': 104}), 58: (1, {'@': 104}), 33: (1, {'@': 104}), 60: (1, {'@': 104}), 24: (1, {'@': 104}), 20: (1, {'@': 104}), 61: (1, {'@': 104}), 62: (1, {'@': 104}), 63: (1, {'@': 104})}, 425: {1: (1, {'@': 81}), 15: (1, {'@': 81}), 6: (1, {'@': 81}), 10: (1, {'@': 81}), 18: (1, {'@': 81}), 34: (1, {'@': 81}), 36: (1, {'@': 81}), 35: (1, {'@': 81}), 9: (1, {'@': 81}), 32: (1, {'@': 81}), 17: (1, {'@': 81}), 2: (1, {'@': 81}), 20: (1, {'@': 81})}, 426: {68: (0, 459), 67: (0, 465), 4: (0, 475), 38: (0, 482), 34: (0, 491), 39: (0, 497), 80: (0, 500), 69: (0, 504), 36: (0, 509), 35: (0, 515), 20: (0, 519), 70: (0, 524), 60: (1, {'@': 48})}, 427: {50: (1, {'@': 107}), 56: (1, {'@': 107}), 47: (1, {'@': 107}), 43: (1, {'@': 107}), 57: (1, {'@': 107}), 41: (1, {'@': 107}), 54: (1, {'@': 107}), 64: (1, {'@': 107}), 51: (1, {'@': 107}), 49: (1, {'@': 107}), 48: (1, {'@': 107}), 59: (1, {'@': 107}), 1: (1, {'@': 107}), 42: (1, {'@': 107}), 18: (1, {'@': 107}), 40: (1, {'@': 107}), 55: (1, {'@': 107}), 44: (1, {'@': 107}), 53: (1, {'@': 107}), 46: (1, {'@': 107}), 34: (1, {'@': 107}), 36: (1, {'@': 107}), 35: (1, {'@': 107}), 37: (1, {'@': 107}), 58: (1, {'@': 107}), 33: (1, {'@': 107}), 60: (1, {'@': 107}), 24: (1, {'@': 107}), 20: (1, {'@': 107}), 61: (1, {'@': 107}), 62: (1, {'@': 107}), 63: (1, {'@': 107})}, 428: {41: (0, 510), 43: (0, 423), 64: (0, 526), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 40: (0, 341), 50: (0, 270), 18: (0, 277)}, 429: {50: (1, {'@': 254}), 56: (1, {'@': 254}), 47: (1, {'@': 254}), 43: (1, {'@': 254}), 57: (1, {'@': 254}), 41: (1, {'@': 254}), 54: (1, {'@': 254}), 64: (1, {'@': 254}), 51: (1, {'@': 254}), 49: (1, {'@': 254}), 48: (1, {'@': 254}), 59: (1, {'@': 254}), 1: (1, {'@': 254}), 42: (1, {'@': 254}), 18: (1, {'@': 254}), 40: (1, {'@': 254}), 55: (1, {'@': 254}), 44: (1, {'@': 254}), 53: (1, {'@': 254}), 46: (1, {'@': 254}), 34: (1, {'@': 254}), 36: (1, {'@': 254}), 35: (1, {'@': 254}), 37: (1, {'@': 254}), 58: (1, {'@': 254}), 33: (1, {'@': 254}), 60: (1, {'@': 254}), 24: (1, {'@': 254}), 20: (1, {'@': 254}), 61: (1, {'@': 254}), 62: (1, {'@': 254}), 63: (1, {'@': 254})}, 430: {24: (0, 735)}, 431: {51: (1, {'@': 61}), 50: (1, {'@': 61}), 47: (1, {'@': 61}), 43: (1, {'@': 61}), 42: (1, {'@': 61}), 18: (1, {'@': 61}), 41: (1, {'@': 61}), 54: (1, {'@': 61}), 40: (1, {'@': 61}), 55: (1, {'@': 61}), 53: (1, {'@': 61}), 44: (1, {'@': 61}), 64: (1, {'@': 61}), 49: (1, {'@': 61}), 46: (1, {'@': 61}), 48: (1, {'@': 61}), 34: (1, {'@': 61}), 36: (1, {'@': 61}), 35: (1, {'@': 61}), 37: (1, {'@': 61}), 58: (1, {'@': 61}), 33: (1, {'@': 61}), 60: (1, {'@': 61}), 24: (1, {'@': 61}), 20: (1, {'@': 61}), 61: (1, {'@': 61}), 62: (1, {'@': 61}), 63: (1, {'@': 61})}, 432: {24: (0, 733)}, 433: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 481), 8: (0, 511), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 434: {35: (0, 515), 34: (0, 491), 38: (0, 736), 39: (0, 497), 24: (0, 739), 36: (0, 509)}, 435: {60: (1, {'@': 45})}, 436: {81: (0, 479), 59: (0, 477), 77: (0, 506), 1: (0, 284), 56: (0, 303), 78: (0, 313), 82: (0, 317), 57: (0, 322), 51: (1, {'@': 60}), 50: (1, {'@': 60}), 47: (1, {'@': 60}), 43: (1, {'@': 60}), 42: (1, {'@': 60}), 18: (1, {'@': 60}), 41: (1, {'@': 60}), 54: (1, {'@': 60}), 40: (1, {'@': 60}), 55: (1, {'@': 60}), 53: (1, {'@': 60}), 44: (1, {'@': 60}), 64: (1, {'@': 60}), 49: (1, {'@': 60}), 46: (1, {'@': 60}), 48: (1, {'@': 60}), 34: (1, {'@': 60}), 36: (1, {'@': 60}), 35: (1, {'@': 60}), 37: (1, {'@': 60}), 58: (1, {'@': 60}), 33: (1, {'@': 60}), 60: (1, {'@': 60}), 24: (1, {'@': 60}), 20: (1, {'@': 60}), 61: (1, {'@': 60}), 62: (1, {'@': 60}), 63: (1, {'@': 60})}, 437: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 108), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 438: {50: (1, {'@': 252}), 56: (1, {'@': 252}), 47: (1, {'@': 252}), 43: (1, {'@': 252}), 57: (1, {'@': 252}), 41: (1, {'@': 252}), 54: (1, {'@': 252}), 64: (1, {'@': 252}), 51: (1, {'@': 252}), 49: (1, {'@': 252}), 48: (1, {'@': 252}), 59: (1, {'@': 252}), 1: (1, {'@': 252}), 42: (1, {'@': 252}), 18: (1, {'@': 252}), 40: (1, {'@': 252}), 55: (1, {'@': 252}), 44: (1, {'@': 252}), 53: (1, {'@': 252}), 46: (1, {'@': 252}), 34: (1, {'@': 252}), 36: (1, {'@': 252}), 35: (1, {'@': 252}), 37: (1, {'@': 252}), 58: (1, {'@': 252}), 33: (1, {'@': 252}), 60: (1, {'@': 252}), 24: (1, {'@': 252}), 20: (1, {'@': 252}), 61: (1, {'@': 252}), 62: (1, {'@': 252}), 63: (1, {'@': 252})}, 439: {50: (1, {'@': 158}), 56: (1, {'@': 158}), 47: (1, {'@': 158}), 43: (1, {'@': 158}), 57: (1, {'@': 158}), 41: (1, {'@': 158}), 54: (1, {'@': 158}), 64: (1, {'@': 158}), 51: (1, {'@': 158}), 49: (1, {'@': 158}), 48: (1, {'@': 158}), 59: (1, {'@': 158}), 1: (1, {'@': 158}), 42: (1, {'@': 158}), 18: (1, {'@': 158}), 40: (1, {'@': 158}), 55: (1, {'@': 158}), 44: (1, {'@': 158}), 53: (1, {'@': 158}), 46: (1, {'@': 158}), 34: (1, {'@': 158}), 36: (1, {'@': 158}), 35: (1, {'@': 158}), 37: (1, {'@': 158}), 58: (1, {'@': 158}), 33: (1, {'@': 158}), 60: (1, {'@': 158}), 24: (1, {'@': 158}), 20: (1, {'@': 158}), 61: (1, {'@': 158}), 62: (1, {'@': 158}), 63: (1, {'@': 158})}, 440: {1: (1, {'@': 78}), 15: (1, {'@': 78}), 6: (1, {'@': 78}), 10: (1, {'@': 78}), 18: (1, {'@': 78}), 34: (1, {'@': 78}), 36: (1, {'@': 78}), 35: (1, {'@': 78}), 9: (1, {'@': 78}), 32: (1, {'@': 78}), 17: (1, {'@': 78}), 2: (1, {'@': 78}), 20: (1, {'@': 78})}, 441: {18: (0, 277), 41: (0, 510), 63: (0, 609), 43: (0, 423), 44: (0, 425), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 50: (0, 270), 51: (0, 199), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536)}, 442: {1: (1, {'@': 80}), 15: (1, {'@': 80}), 6: (1, {'@': 80}), 10: (1, {'@': 80}), 18: (1, {'@': 80}), 34: (1, {'@': 80}), 36: (1, {'@': 80}), 35: (1, {'@': 80}), 9: (1, {'@': 80}), 32: (1, {'@': 80}), 17: (1, {'@': 80}), 2: (1, {'@': 80}), 20: (1, {'@': 80})}, 443: {81: (0, 479), 59: (0, 477), 77: (0, 506), 1: (0, 284), 56: (0, 303), 78: (0, 313), 82: (0, 317), 57: (0, 322), 50: (1, {'@': 74}), 47: (1, {'@': 74}), 43: (1, {'@': 74}), 41: (1, {'@': 74}), 54: (1, {'@': 74}), 64: (1, {'@': 74}), 51: (1, {'@': 74}), 49: (1, {'@': 74}), 48: (1, {'@': 74}), 42: (1, {'@': 74}), 18: (1, {'@': 74}), 40: (1, {'@': 74}), 55: (1, {'@': 74}), 44: (1, {'@': 74}), 53: (1, {'@': 74}), 46: (1, {'@': 74}), 34: (1, {'@': 74}), 36: (1, {'@': 74}), 35: (1, {'@': 74}), 61: (1, {'@': 74}), 62: (1, {'@': 74}), 37: (1, {'@': 74}), 58: (1, {'@': 74}), 63: (1, {'@': 74}), 33: (1, {'@': 74}), 60: (1, {'@': 74}), 24: (1, {'@': 74}), 20: (1, {'@': 74})}, 444: {0: (0, 53), 2: (0, 62), 6: (0, 530), 4: (0, 520), 7: (0, 535), 8: (0, 77), 1: (0, 61), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 445: {24: (1, {'@': 418}), 20: (1, {'@': 418}), 60: (1, {'@': 418}), 36: (1, {'@': 418}), 34: (1, {'@': 418}), 35: (1, {'@': 418})}, 446: {50: (1, {'@': 106}), 56: (1, {'@': 106}), 47: (1, {'@': 106}), 43: (1, {'@': 106}), 57: (1, {'@': 106}), 41: (1, {'@': 106}), 54: (1, {'@': 106}), 64: (1, {'@': 106}), 51: (1, {'@': 106}), 49: (1, {'@': 106}), 48: (1, {'@': 106}), 59: (1, {'@': 106}), 1: (1, {'@': 106}), 42: (1, {'@': 106}), 18: (1, {'@': 106}), 40: (1, {'@': 106}), 55: (1, {'@': 106}), 44: (1, {'@': 106}), 53: (1, {'@': 106}), 46: (1, {'@': 106}), 34: (1, {'@': 106}), 36: (1, {'@': 106}), 35: (1, {'@': 106}), 37: (1, {'@': 106}), 58: (1, {'@': 106}), 33: (1, {'@': 106}), 60: (1, {'@': 106}), 24: (1, {'@': 106}), 20: (1, {'@': 106}), 61: (1, {'@': 106}), 62: (1, {'@': 106}), 63: (1, {'@': 106})}, 447: {50: (1, {'@': 240}), 56: (1, {'@': 240}), 47: (1, {'@': 240}), 43: (1, {'@': 240}), 57: (1, {'@': 240}), 41: (1, {'@': 240}), 54: (1, {'@': 240}), 64: (1, {'@': 240}), 51: (1, {'@': 240}), 49: (1, {'@': 240}), 48: (1, {'@': 240}), 59: (1, {'@': 240}), 1: (1, {'@': 240}), 42: (1, {'@': 240}), 18: (1, {'@': 240}), 40: (1, {'@': 240}), 55: (1, {'@': 240}), 44: (1, {'@': 240}), 53: (1, {'@': 240}), 46: (1, {'@': 240}), 34: (1, {'@': 240}), 36: (1, {'@': 240}), 35: (1, {'@': 240}), 37: (1, {'@': 240}), 58: (1, {'@': 240}), 33: (1, {'@': 240}), 60: (1, {'@': 240}), 24: (1, {'@': 240}), 20: (1, {'@': 240}), 61: (1, {'@': 240}), 62: (1, {'@': 240}), 63: (1, {'@': 240})}, 448: {24: (0, 629)}, 449: {24: (0, 743)}, 450: {50: (1, {'@': 100}), 56: (1, {'@': 100}), 47: (1, {'@': 100}), 43: (1, {'@': 100}), 57: (1, {'@': 100}), 41: (1, {'@': 100}), 54: (1, {'@': 100}), 64: (1, {'@': 100}), 51: (1, {'@': 100}), 49: (1, {'@': 100}), 48: (1, {'@': 100}), 59: (1, {'@': 100}), 1: (1, {'@': 100}), 42: (1, {'@': 100}), 18: (1, {'@': 100}), 40: (1, {'@': 100}), 55: (1, {'@': 100}), 44: (1, {'@': 100}), 53: (1, {'@': 100}), 46: (1, {'@': 100}), 34: (1, {'@': 100}), 36: (1, {'@': 100}), 35: (1, {'@': 100}), 37: (1, {'@': 100}), 58: (1, {'@': 100}), 33: (1, {'@': 100}), 60: (1, {'@': 100}), 24: (1, {'@': 100}), 20: (1, {'@': 100}), 61: (1, {'@': 100}), 62: (1, {'@': 100}), 63: (1, {'@': 100})}, 451: {24: (0, 741)}, 452: {1: (1, {'@': 77}), 15: (1, {'@': 77}), 6: (1, {'@': 77}), 10: (1, {'@': 77}), 18: (1, {'@': 77}), 34: (1, {'@': 77}), 36: (1, {'@': 77}), 35: (1, {'@': 77}), 9: (1, {'@': 77}), 32: (1, {'@': 77}), 17: (1, {'@': 77}), 2: (1, {'@': 77}), 20: (1, {'@': 77})}, 453: {50: (1, {'@': 102}), 56: (1, {'@': 102}), 47: (1, {'@': 102}), 43: (1, {'@': 102}), 57: (1, {'@': 102}), 41: (1, {'@': 102}), 54: (1, {'@': 102}), 64: (1, {'@': 102}), 51: (1, {'@': 102}), 49: (1, {'@': 102}), 48: (1, {'@': 102}), 59: (1, {'@': 102}), 1: (1, {'@': 102}), 42: (1, {'@': 102}), 18: (1, {'@': 102}), 40: (1, {'@': 102}), 55: (1, {'@': 102}), 44: (1, {'@': 102}), 53: (1, {'@': 102}), 46: (1, {'@': 102}), 34: (1, {'@': 102}), 36: (1, {'@': 102}), 35: (1, {'@': 102}), 37: (1, {'@': 102}), 58: (1, {'@': 102}), 33: (1, {'@': 102}), 60: (1, {'@': 102}), 24: (1, {'@': 102}), 20: (1, {'@': 102}), 61: (1, {'@': 102}), 62: (1, {'@': 102}), 63: (1, {'@': 102})}, 454: {24: (0, 745), 35: (0, 515), 38: (0, 747), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 455: {50: (1, {'@': 75}), 47: (1, {'@': 75}), 43: (1, {'@': 75}), 41: (1, {'@': 75}), 54: (1, {'@': 75}), 64: (1, {'@': 75}), 51: (1, {'@': 75}), 49: (1, {'@': 75}), 48: (1, {'@': 75}), 42: (1, {'@': 75}), 18: (1, {'@': 75}), 40: (1, {'@': 75}), 55: (1, {'@': 75}), 44: (1, {'@': 75}), 53: (1, {'@': 75}), 46: (1, {'@': 75}), 34: (1, {'@': 75}), 36: (1, {'@': 75}), 35: (1, {'@': 75}), 37: (1, {'@': 75}), 58: (1, {'@': 75}), 33: (1, {'@': 75}), 60: (1, {'@': 75}), 24: (1, {'@': 75}), 20: (1, {'@': 75}), 61: (1, {'@': 75}), 62: (1, {'@': 75}), 63: (1, {'@': 75})}, 456: {24: (0, 675)}, 457: {50: (1, {'@': 98}), 56: (1, {'@': 98}), 47: (1, {'@': 98}), 43: (1, {'@': 98}), 57: (1, {'@': 98}), 41: (1, {'@': 98}), 54: (1, {'@': 98}), 64: (1, {'@': 98}), 51: (1, {'@': 98}), 49: (1, {'@': 98}), 48: (1, {'@': 98}), 59: (1, {'@': 98}), 1: (1, {'@': 98}), 42: (1, {'@': 98}), 18: (1, {'@': 98}), 40: (1, {'@': 98}), 55: (1, {'@': 98}), 44: (1, {'@': 98}), 53: (1, {'@': 98}), 46: (1, {'@': 98}), 34: (1, {'@': 98}), 36: (1, {'@': 98}), 35: (1, {'@': 98}), 37: (1, {'@': 98}), 58: (1, {'@': 98}), 33: (1, {'@': 98}), 60: (1, {'@': 98}), 24: (1, {'@': 98}), 20: (1, {'@': 98}), 61: (1, {'@': 98}), 62: (1, {'@': 98}), 63: (1, {'@': 98})}, 458: {81: (0, 479), 59: (0, 477), 77: (0, 506), 1: (0, 284), 56: (0, 303), 78: (0, 313), 82: (0, 317), 57: (0, 322), 50: (1, {'@': 73}), 47: (1, {'@': 73}), 43: (1, {'@': 73}), 41: (1, {'@': 73}), 54: (1, {'@': 73}), 64: (1, {'@': 73}), 51: (1, {'@': 73}), 49: (1, {'@': 73}), 48: (1, {'@': 73}), 42: (1, {'@': 73}), 18: (1, {'@': 73}), 40: (1, {'@': 73}), 55: (1, {'@': 73}), 44: (1, {'@': 73}), 53: (1, {'@': 73}), 46: (1, {'@': 73}), 34: (1, {'@': 73}), 36: (1, {'@': 73}), 35: (1, {'@': 73}), 61: (1, {'@': 73}), 62: (1, {'@': 73}), 37: (1, {'@': 73}), 58: (1, {'@': 73}), 63: (1, {'@': 73}), 33: (1, {'@': 73}), 60: (1, {'@': 73}), 24: (1, {'@': 73}), 20: (1, {'@': 73})}, 459: {35: (0, 515), 34: (0, 491), 38: (0, 435), 39: (0, 497), 36: (0, 509), 60: (1, {'@': 46})}, 460: {1: (1, {'@': 55}), 15: (1, {'@': 55}), 6: (1, {'@': 55}), 10: (1, {'@': 55}), 18: (1, {'@': 55}), 9: (1, {'@': 55}), 32: (1, {'@': 55}), 24: (1, {'@': 55}), 17: (1, {'@': 55}), 2: (1, {'@': 55}), 20: (1, {'@': 55})}, 461: {50: (1, {'@': 238}), 56: (1, {'@': 238}), 47: (1, {'@': 238}), 43: (1, {'@': 238}), 57: (1, {'@': 238}), 41: (1, {'@': 238}), 54: (1, {'@': 238}), 64: (1, {'@': 238}), 51: (1, {'@': 238}), 49: (1, {'@': 238}), 48: (1, {'@': 238}), 59: (1, {'@': 238}), 1: (1, {'@': 238}), 42: (1, {'@': 238}), 18: (1, {'@': 238}), 40: (1, {'@': 238}), 55: (1, {'@': 238}), 44: (1, {'@': 238}), 53: (1, {'@': 238}), 46: (1, {'@': 238}), 34: (1, {'@': 238}), 36: (1, {'@': 238}), 35: (1, {'@': 238}), 37: (1, {'@': 238}), 58: (1, {'@': 238}), 33: (1, {'@': 238}), 60: (1, {'@': 238}), 24: (1, {'@': 238}), 20: (1, {'@': 238}), 61: (1, {'@': 238}), 62: (1, {'@': 238}), 63: (1, {'@': 238})}, 462: {50: (1, {'@': 101}), 56: (1, {'@': 101}), 47: (1, {'@': 101}), 43: (1, {'@': 101}), 57: (1, {'@': 101}), 41: (1, {'@': 101}), 54: (1, {'@': 101}), 64: (1, {'@': 101}), 51: (1, {'@': 101}), 49: (1, {'@': 101}), 48: (1, {'@': 101}), 59: (1, {'@': 101}), 1: (1, {'@': 101}), 42: (1, {'@': 101}), 18: (1, {'@': 101}), 40: (1, {'@': 101}), 55: (1, {'@': 101}), 44: (1, {'@': 101}), 53: (1, {'@': 101}), 46: (1, {'@': 101}), 34: (1, {'@': 101}), 36: (1, {'@': 101}), 35: (1, {'@': 101}), 37: (1, {'@': 101}), 58: (1, {'@': 101}), 33: (1, {'@': 101}), 60: (1, {'@': 101}), 24: (1, {'@': 101}), 20: (1, {'@': 101}), 61: (1, {'@': 101}), 62: (1, {'@': 101}), 63: (1, {'@': 101})}, 463: {50: (1, {'@': 72}), 47: (1, {'@': 72}), 43: (1, {'@': 72}), 41: (1, {'@': 72}), 54: (1, {'@': 72}), 64: (1, {'@': 72}), 51: (1, {'@': 72}), 49: (1, {'@': 72}), 48: (1, {'@': 72}), 42: (1, {'@': 72}), 18: (1, {'@': 72}), 40: (1, {'@': 72}), 55: (1, {'@': 72}), 44: (1, {'@': 72}), 53: (1, {'@': 72}), 46: (1, {'@': 72}), 34: (1, {'@': 72}), 36: (1, {'@': 72}), 35: (1, {'@': 72}), 37: (1, {'@': 72}), 58: (1, {'@': 72}), 33: (1, {'@': 72}), 60: (1, {'@': 72}), 24: (1, {'@': 72}), 20: (1, {'@': 72}), 61: (1, {'@': 72}), 62: (1, {'@': 72}), 63: (1, {'@': 72})}, 464: {66: (0, 558), 33: (0, 209), 34: (0, 491), 38: (0, 544), 39: (0, 497), 36: (0, 509), 35: (0, 515)}, 465: {4: (0, 475), 20: (0, 519), 70: (0, 445), 69: (0, 529), 24: (1, {'@': 47}), 60: (1, {'@': 47}), 34: (1, {'@': 47}), 35: (1, {'@': 47}), 36: (1, {'@': 47})}, 466: {40: (0, 112)}, 467: {50: (1, {'@': 244}), 56: (1, {'@': 244}), 47: (1, {'@': 244}), 43: (1, {'@': 244}), 57: (1, {'@': 244}), 41: (1, {'@': 244}), 54: (1, {'@': 244}), 64: (1, {'@': 244}), 51: (1, {'@': 244}), 49: (1, {'@': 244}), 48: (1, {'@': 244}), 59: (1, {'@': 244}), 1: (1, {'@': 244}), 42: (1, {'@': 244}), 18: (1, {'@': 244}), 40: (1, {'@': 244}), 55: (1, {'@': 244}), 44: (1, {'@': 244}), 53: (1, {'@': 244}), 46: (1, {'@': 244}), 34: (1, {'@': 244}), 36: (1, {'@': 244}), 35: (1, {'@': 244}), 37: (1, {'@': 244}), 58: (1, {'@': 244}), 33: (1, {'@': 244}), 60: (1, {'@': 244}), 24: (1, {'@': 244}), 20: (1, {'@': 244}), 61: (1, {'@': 244}), 62: (1, {'@': 244}), 63: (1, {'@': 244})}, 468: {50: (1, {'@': 71}), 47: (1, {'@': 71}), 43: (1, {'@': 71}), 41: (1, {'@': 71}), 54: (1, {'@': 71}), 64: (1, {'@': 71}), 51: (1, {'@': 71}), 49: (1, {'@': 71}), 48: (1, {'@': 71}), 42: (1, {'@': 71}), 18: (1, {'@': 71}), 40: (1, {'@': 71}), 55: (1, {'@': 71}), 44: (1, {'@': 71}), 53: (1, {'@': 71}), 46: (1, {'@': 71}), 34: (1, {'@': 71}), 36: (1, {'@': 71}), 35: (1, {'@': 71}), 37: (1, {'@': 71}), 58: (1, {'@': 71}), 33: (1, {'@': 71}), 60: (1, {'@': 71}), 24: (1, {'@': 71}), 20: (1, {'@': 71}), 61: (1, {'@': 71}), 62: (1, {'@': 71}), 63: (1, {'@': 71})}, 469: {10: (0, 421), 0: (0, 337)}, 470: {24: (0, 14)}, 471: {0: (0, 53), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 8: (0, 441), 1: (0, 61), 38: (0, 444), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 472: {50: (1, {'@': 99}), 56: (1, {'@': 99}), 47: (1, {'@': 99}), 43: (1, {'@': 99}), 57: (1, {'@': 99}), 41: (1, {'@': 99}), 54: (1, {'@': 99}), 64: (1, {'@': 99}), 51: (1, {'@': 99}), 49: (1, {'@': 99}), 48: (1, {'@': 99}), 59: (1, {'@': 99}), 1: (1, {'@': 99}), 42: (1, {'@': 99}), 18: (1, {'@': 99}), 40: (1, {'@': 99}), 55: (1, {'@': 99}), 44: (1, {'@': 99}), 53: (1, {'@': 99}), 46: (1, {'@': 99}), 34: (1, {'@': 99}), 36: (1, {'@': 99}), 35: (1, {'@': 99}), 37: (1, {'@': 99}), 58: (1, {'@': 99}), 33: (1, {'@': 99}), 60: (1, {'@': 99}), 24: (1, {'@': 99}), 20: (1, {'@': 99}), 61: (1, {'@': 99}), 62: (1, {'@': 99}), 63: (1, {'@': 99})}, 473: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 197), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 474: {50: (1, {'@': 243}), 56: (1, {'@': 243}), 47: (1, {'@': 243}), 43: (1, {'@': 243}), 57: (1, {'@': 243}), 41: (1, {'@': 243}), 54: (1, {'@': 243}), 64: (1, {'@': 243}), 51: (1, {'@': 243}), 49: (1, {'@': 243}), 48: (1, {'@': 243}), 59: (1, {'@': 243}), 1: (1, {'@': 243}), 42: (1, {'@': 243}), 18: (1, {'@': 243}), 40: (1, {'@': 243}), 55: (1, {'@': 243}), 44: (1, {'@': 243}), 53: (1, {'@': 243}), 46: (1, {'@': 243}), 34: (1, {'@': 243}), 36: (1, {'@': 243}), 35: (1, {'@': 243}), 37: (1, {'@': 243}), 58: (1, {'@': 243}), 33: (1, {'@': 243}), 60: (1, {'@': 243}), 24: (1, {'@': 243}), 20: (1, {'@': 243}), 61: (1, {'@': 243}), 62: (1, {'@': 243}), 63: (1, {'@': 243})}, 475: {64: (0, 32), 4: (0, 35), 20: (0, 519), 83: (0, 37), 2: (0, 39), 6: (0, 44)}, 476: {50: (1, {'@': 96}), 56: (1, {'@': 96}), 47: (1, {'@': 96}), 43: (1, {'@': 96}), 57: (1, {'@': 96}), 41: (1, {'@': 96}), 54: (1, {'@': 96}), 64: (1, {'@': 96}), 51: (1, {'@': 96}), 49: (1, {'@': 96}), 48: (1, {'@': 96}), 59: (1, {'@': 96}), 1: (1, {'@': 96}), 42: (1, {'@': 96}), 18: (1, {'@': 96}), 40: (1, {'@': 96}), 55: (1, {'@': 96}), 44: (1, {'@': 96}), 53: (1, {'@': 96}), 46: (1, {'@': 96}), 34: (1, {'@': 96}), 36: (1, {'@': 96}), 35: (1, {'@': 96}), 37: (1, {'@': 96}), 58: (1, {'@': 96}), 33: (1, {'@': 96}), 60: (1, {'@': 96}), 24: (1, {'@': 96}), 20: (1, {'@': 96}), 61: (1, {'@': 96}), 62: (1, {'@': 96}), 63: (1, {'@': 96})}, 477: {56: (0, 667), 77: (0, 50), 84: (0, 93), 50: (1, {'@': 190}), 37: (1, {'@': 190}), 57: (1, {'@': 190}), 58: (1, {'@': 190}), 51: (1, {'@': 190}), 33: (1, {'@': 190}), 48: (1, {'@': 190}), 59: (1, {'@': 190}), 1: (1, {'@': 190}), 42: (1, {'@': 190}), 18: (1, {'@': 190}), 34: (1, {'@': 190}), 35: (1, {'@': 190}), 40: (1, {'@': 190}), 60: (1, {'@': 190}), 24: (1, {'@': 190}), 44: (1, {'@': 190}), 20: (1, {'@': 190}), 61: (1, {'@': 190}), 47: (1, {'@': 190}), 62: (1, {'@': 190}), 43: (1, {'@': 190}), 41: (1, {'@': 190}), 54: (1, {'@': 190}), 63: (1, {'@': 190}), 64: (1, {'@': 190}), 49: (1, {'@': 190}), 36: (1, {'@': 190}), 55: (1, {'@': 190}), 53: (1, {'@': 190}), 46: (1, {'@': 190})}, 478: {50: (1, {'@': 430}), 56: (1, {'@': 430}), 47: (1, {'@': 430}), 72: (1, {'@': 430}), 43: (1, {'@': 430}), 57: (1, {'@': 430}), 41: (1, {'@': 430}), 54: (1, {'@': 430}), 64: (1, {'@': 430}), 51: (1, {'@': 430}), 49: (1, {'@': 430}), 48: (1, {'@': 430}), 59: (1, {'@': 430}), 1: (1, {'@': 430}), 10: (1, {'@': 430}), 42: (1, {'@': 430}), 18: (1, {'@': 430}), 40: (1, {'@': 430}), 55: (1, {'@': 430}), 44: (1, {'@': 430}), 53: (1, {'@': 430}), 46: (1, {'@': 430}), 34: (1, {'@': 430}), 36: (1, {'@': 430}), 35: (1, {'@': 430}), 37: (1, {'@': 430}), 58: (1, {'@': 430}), 33: (1, {'@': 430}), 60: (1, {'@': 430}), 24: (1, {'@': 430}), 20: (1, {'@': 430}), 61: (1, {'@': 430}), 62: (1, {'@': 430}), 63: (1, {'@': 430})}, 479: {50: (1, {'@': 181}), 56: (1, {'@': 181}), 47: (1, {'@': 181}), 43: (1, {'@': 181}), 57: (1, {'@': 181}), 41: (1, {'@': 181}), 54: (1, {'@': 181}), 64: (1, {'@': 181}), 51: (1, {'@': 181}), 49: (1, {'@': 181}), 48: (1, {'@': 181}), 59: (1, {'@': 181}), 1: (1, {'@': 181}), 42: (1, {'@': 181}), 18: (1, {'@': 181}), 40: (1, {'@': 181}), 55: (1, {'@': 181}), 44: (1, {'@': 181}), 53: (1, {'@': 181}), 46: (1, {'@': 181}), 34: (1, {'@': 181}), 36: (1, {'@': 181}), 35: (1, {'@': 181}), 37: (1, {'@': 181}), 58: (1, {'@': 181}), 33: (1, {'@': 181}), 60: (1, {'@': 181}), 24: (1, {'@': 181}), 20: (1, {'@': 181}), 61: (1, {'@': 181}), 62: (1, {'@': 181}), 63: (1, {'@': 181})}, 480: {50: (1, {'@': 108}), 56: (1, {'@': 108}), 47: (1, {'@': 108}), 43: (1, {'@': 108}), 57: (1, {'@': 108}), 41: (1, {'@': 108}), 54: (1, {'@': 108}), 64: (1, {'@': 108}), 51: (1, {'@': 108}), 49: (1, {'@': 108}), 48: (1, {'@': 108}), 59: (1, {'@': 108}), 1: (1, {'@': 108}), 42: (1, {'@': 108}), 18: (1, {'@': 108}), 40: (1, {'@': 108}), 55: (1, {'@': 108}), 44: (1, {'@': 108}), 53: (1, {'@': 108}), 46: (1, {'@': 108}), 34: (1, {'@': 108}), 36: (1, {'@': 108}), 35: (1, {'@': 108}), 37: (1, {'@': 108}), 58: (1, {'@': 108}), 33: (1, {'@': 108}), 60: (1, {'@': 108}), 24: (1, {'@': 108}), 20: (1, {'@': 108}), 61: (1, {'@': 108}), 62: (1, {'@': 108}), 63: (1, {'@': 108})}, 481: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 593), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 482: {4: (0, 475), 67: (0, 465), 68: (0, 46), 20: (0, 519), 70: (0, 524), 69: (0, 504), 60: (1, {'@': 48}), 34: (1, {'@': 48}), 35: (1, {'@': 48}), 36: (1, {'@': 48})}, 483: {1: (1, {'@': 389}), 15: (1, {'@': 389}), 6: (1, {'@': 389}), 10: (1, {'@': 389}), 18: (1, {'@': 389}), 34: (1, {'@': 389}), 36: (1, {'@': 389}), 35: (1, {'@': 389}), 9: (1, {'@': 389}), 32: (1, {'@': 389}), 17: (1, {'@': 389}), 2: (1, {'@': 389}), 20: (1, {'@': 389})}, 484: {50: (1, {'@': 95}), 56: (1, {'@': 95}), 47: (1, {'@': 95}), 43: (1, {'@': 95}), 57: (1, {'@': 95}), 41: (1, {'@': 95}), 54: (1, {'@': 95}), 64: (1, {'@': 95}), 51: (1, {'@': 95}), 49: (1, {'@': 95}), 48: (1, {'@': 95}), 59: (1, {'@': 95}), 1: (1, {'@': 95}), 42: (1, {'@': 95}), 18: (1, {'@': 95}), 40: (1, {'@': 95}), 55: (1, {'@': 95}), 44: (1, {'@': 95}), 53: (1, {'@': 95}), 46: (1, {'@': 95}), 34: (1, {'@': 95}), 36: (1, {'@': 95}), 35: (1, {'@': 95}), 37: (1, {'@': 95}), 58: (1, {'@': 95}), 33: (1, {'@': 95}), 60: (1, {'@': 95}), 24: (1, {'@': 95}), 20: (1, {'@': 95}), 61: (1, {'@': 95}), 62: (1, {'@': 95}), 63: (1, {'@': 95})}, 485: {0: (0, 288), 10: (0, 421)}, 486: {24: (0, 358)}, 487: {1: (1, {'@': 86}), 15: (1, {'@': 86}), 6: (1, {'@': 86}), 10: (1, {'@': 86}), 18: (1, {'@': 86}), 34: (1, {'@': 86}), 36: (1, {'@': 86}), 35: (1, {'@': 86}), 9: (1, {'@': 86}), 32: (1, {'@': 86}), 17: (1, {'@': 86}), 2: (1, {'@': 86}), 20: (1, {'@': 86})}, 488: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 16: (0, 443), 15: (0, 433), 17: (0, 439), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484)}, 489: {50: (1, {'@': 152}), 56: (1, {'@': 152}), 47: (1, {'@': 152}), 43: (1, {'@': 152}), 57: (1, {'@': 152}), 41: (1, {'@': 152}), 54: (1, {'@': 152}), 64: (1, {'@': 152}), 51: (1, {'@': 152}), 49: (1, {'@': 152}), 48: (1, {'@': 152}), 59: (1, {'@': 152}), 1: (1, {'@': 152}), 42: (1, {'@': 152}), 18: (1, {'@': 152}), 40: (1, {'@': 152}), 55: (1, {'@': 152}), 44: (1, {'@': 152}), 53: (1, {'@': 152}), 46: (1, {'@': 152}), 34: (1, {'@': 152}), 36: (1, {'@': 152}), 35: (1, {'@': 152}), 37: (1, {'@': 152}), 58: (1, {'@': 152}), 33: (1, {'@': 152}), 60: (1, {'@': 152}), 24: (1, {'@': 152}), 20: (1, {'@': 152}), 61: (1, {'@': 152}), 62: (1, {'@': 152}), 63: (1, {'@': 152})}, 490: {50: (1, {'@': 231}), 56: (1, {'@': 231}), 47: (1, {'@': 231}), 43: (1, {'@': 231}), 57: (1, {'@': 231}), 41: (1, {'@': 231}), 54: (1, {'@': 231}), 64: (1, {'@': 231}), 51: (1, {'@': 231}), 49: (1, {'@': 231}), 48: (1, {'@': 231}), 59: (1, {'@': 231}), 1: (1, {'@': 231}), 42: (1, {'@': 231}), 18: (1, {'@': 231}), 40: (1, {'@': 231}), 55: (1, {'@': 231}), 44: (1, {'@': 231}), 53: (1, {'@': 231}), 46: (1, {'@': 231}), 34: (1, {'@': 231}), 36: (1, {'@': 231}), 35: (1, {'@': 231}), 37: (1, {'@': 231}), 58: (1, {'@': 231}), 33: (1, {'@': 231}), 60: (1, {'@': 231}), 24: (1, {'@': 231}), 20: (1, {'@': 231}), 61: (1, {'@': 231}), 62: (1, {'@': 231}), 63: (1, {'@': 231})}, 491: {36: (1, {'@': 424}), 37: (1, {'@': 424}), 34: (1, {'@': 424}), 35: (1, {'@': 424}), 1: (1, {'@': 424}), 15: (1, {'@': 424}), 6: (1, {'@': 424}), 10: (1, {'@': 424}), 18: (1, {'@': 424}), 9: (1, {'@': 424}), 32: (1, {'@': 424}), 17: (1, {'@': 424}), 2: (1, {'@': 424}), 20: (1, {'@': 424}), 40: (1, {'@': 424}), 58: (1, {'@': 424}), 61: (1, {'@': 424}), 66: (1, {'@': 424}), 24: (1, {'@': 424}), 60: (1, {'@': 424}), 71: (1, {'@': 424}), 33: (1, {'@': 424})}, 492: {38: (0, 351), 85: (0, 539), 41: (0, 510), 33: (0, 555), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 58: (0, 567), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 493: {50: (1, {'@': 94}), 56: (1, {'@': 94}), 47: (1, {'@': 94}), 43: (1, {'@': 94}), 57: (1, {'@': 94}), 41: (1, {'@': 94}), 54: (1, {'@': 94}), 64: (1, {'@': 94}), 51: (1, {'@': 94}), 49: (1, {'@': 94}), 48: (1, {'@': 94}), 59: (1, {'@': 94}), 1: (1, {'@': 94}), 42: (1, {'@': 94}), 18: (1, {'@': 94}), 40: (1, {'@': 94}), 55: (1, {'@': 94}), 44: (1, {'@': 94}), 53: (1, {'@': 94}), 46: (1, {'@': 94}), 34: (1, {'@': 94}), 36: (1, {'@': 94}), 35: (1, {'@': 94}), 37: (1, {'@': 94}), 58: (1, {'@': 94}), 33: (1, {'@': 94}), 60: (1, {'@': 94}), 24: (1, {'@': 94}), 20: (1, {'@': 94}), 61: (1, {'@': 94}), 62: (1, {'@': 94}), 63: (1, {'@': 94})}, 494: {4: (0, 464), 39: (0, 497), 38: (0, 517), 36: (0, 509), 20: (0, 519), 34: (0, 491), 35: (0, 515)}, 495: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 252), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 428), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 13: (0, 309), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 24: (0, 583), 32: (0, 488)}, 496: {35: (0, 515), 34: (0, 491), 38: (0, 360), 39: (0, 497), 24: (0, 363), 36: (0, 509)}, 497: {36: (0, 534), 35: (0, 537), 34: (0, 48), 37: (1, {'@': 58}), 1: (1, {'@': 58}), 15: (1, {'@': 58}), 6: (1, {'@': 58}), 10: (1, {'@': 58}), 18: (1, {'@': 58}), 9: (1, {'@': 58}), 32: (1, {'@': 58}), 17: (1, {'@': 58}), 2: (1, {'@': 58}), 20: (1, {'@': 58}), 40: (1, {'@': 58}), 58: (1, {'@': 58}), 61: (1, {'@': 58}), 66: (1, {'@': 58}), 24: (1, {'@': 58}), 60: (1, {'@': 58}), 71: (1, {'@': 58}), 33: (1, {'@': 58})}, 498: {38: (0, 397), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 350}), 15: (1, {'@': 350}), 6: (1, {'@': 350}), 10: (1, {'@': 350}), 18: (1, {'@': 350}), 9: (1, {'@': 350}), 32: (1, {'@': 350}), 17: (1, {'@': 350}), 2: (1, {'@': 350}), 20: (1, {'@': 350})}, 499: {24: (0, 296)}, 500: {}, 501: {60: (1, {'@': 43})}, 502: {68: (0, 448), 4: (0, 475), 67: (0, 465), 20: (0, 519), 70: (0, 524), 69: (0, 504), 24: (1, {'@': 48})}, 503: {35: (0, 515), 38: (0, 369), 65: (0, 371), 34: (0, 491), 39: (0, 497), 36: (0, 509), 24: (0, 373), 61: (0, 556)}, 504: {24: (1, {'@': 415}), 20: (1, {'@': 415}), 60: (1, {'@': 415}), 36: (1, {'@': 415}), 34: (1, {'@': 415}), 35: (1, {'@': 415})}, 505: {50: (1, {'@': 305}), 56: (1, {'@': 305}), 47: (1, {'@': 305}), 43: (1, {'@': 305}), 57: (1, {'@': 305}), 41: (1, {'@': 305}), 54: (1, {'@': 305}), 64: (1, {'@': 305}), 51: (1, {'@': 305}), 49: (1, {'@': 305}), 48: (1, {'@': 305}), 59: (1, {'@': 305}), 1: (1, {'@': 305}), 42: (1, {'@': 305}), 18: (1, {'@': 305}), 40: (1, {'@': 305}), 55: (1, {'@': 305}), 44: (1, {'@': 305}), 53: (1, {'@': 305}), 46: (1, {'@': 305}), 34: (1, {'@': 305}), 36: (1, {'@': 305}), 35: (1, {'@': 305}), 37: (1, {'@': 305}), 58: (1, {'@': 305}), 33: (1, {'@': 305}), 60: (1, {'@': 305}), 24: (1, {'@': 305}), 20: (1, {'@': 305}), 61: (1, {'@': 305}), 62: (1, {'@': 305}), 63: (1, {'@': 305})}, 506: {50: (1, {'@': 180}), 56: (1, {'@': 180}), 47: (1, {'@': 180}), 43: (1, {'@': 180}), 57: (1, {'@': 180}), 41: (1, {'@': 180}), 54: (1, {'@': 180}), 64: (1, {'@': 180}), 51: (1, {'@': 180}), 49: (1, {'@': 180}), 48: (1, {'@': 180}), 59: (1, {'@': 180}), 1: (1, {'@': 180}), 42: (1, {'@': 180}), 18: (1, {'@': 180}), 40: (1, {'@': 180}), 55: (1, {'@': 180}), 44: (1, {'@': 180}), 53: (1, {'@': 180}), 46: (1, {'@': 180}), 34: (1, {'@': 180}), 36: (1, {'@': 180}), 35: (1, {'@': 180}), 37: (1, {'@': 180}), 58: (1, {'@': 180}), 33: (1, {'@': 180}), 60: (1, {'@': 180}), 24: (1, {'@': 180}), 20: (1, {'@': 180}), 61: (1, {'@': 180}), 62: (1, {'@': 180}), 63: (1, {'@': 180})}, 507: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 186), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 508: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 698), 36: (0, 509), 1: (1, {'@': 338}), 15: (1, {'@': 338}), 6: (1, {'@': 338}), 10: (1, {'@': 338}), 18: (1, {'@': 338}), 9: (1, {'@': 338}), 32: (1, {'@': 338}), 17: (1, {'@': 338}), 2: (1, {'@': 338}), 20: (1, {'@': 338})}, 509: {36: (1, {'@': 425}), 37: (1, {'@': 425}), 34: (1, {'@': 425}), 35: (1, {'@': 425}), 1: (1, {'@': 425}), 15: (1, {'@': 425}), 6: (1, {'@': 425}), 10: (1, {'@': 425}), 18: (1, {'@': 425}), 9: (1, {'@': 425}), 32: (1, {'@': 425}), 17: (1, {'@': 425}), 2: (1, {'@': 425}), 20: (1, {'@': 425}), 40: (1, {'@': 425}), 58: (1, {'@': 425}), 61: (1, {'@': 425}), 66: (1, {'@': 425}), 24: (1, {'@': 425}), 60: (1, {'@': 425}), 71: (1, {'@': 425}), 33: (1, {'@': 425})}, 510: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 523), 8: (0, 679), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 511: {41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 38: (0, 650), 45: (0, 455), 46: (0, 442), 37: (0, 493), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 512: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 6: (0, 530), 7: (0, 535), 9: (0, 419), 16: (0, 458), 10: (0, 421), 11: (0, 424), 12: (0, 427), 15: (0, 433), 17: (0, 439), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484)}, 513: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 18), 36: (0, 509)}, 514: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 365), 36: (0, 509), 24: (0, 367)}, 515: {36: (1, {'@': 423}), 37: (1, {'@': 423}), 34: (1, {'@': 423}), 35: (1, {'@': 423}), 1: (1, {'@': 423}), 15: (1, {'@': 423}), 6: (1, {'@': 423}), 10: (1, {'@': 423}), 18: (1, {'@': 423}), 9: (1, {'@': 423}), 32: (1, {'@': 423}), 17: (1, {'@': 423}), 2: (1, {'@': 423}), 20: (1, {'@': 423}), 40: (1, {'@': 423}), 58: (1, {'@': 423}), 61: (1, {'@': 423}), 66: (1, {'@': 423}), 24: (1, {'@': 423}), 60: (1, {'@': 423}), 71: (1, {'@': 423}), 33: (1, {'@': 423})}, 516: {50: (1, {'@': 105}), 56: (1, {'@': 105}), 47: (1, {'@': 105}), 43: (1, {'@': 105}), 57: (1, {'@': 105}), 41: (1, {'@': 105}), 54: (1, {'@': 105}), 64: (1, {'@': 105}), 51: (1, {'@': 105}), 49: (1, {'@': 105}), 48: (1, {'@': 105}), 59: (1, {'@': 105}), 1: (1, {'@': 105}), 42: (1, {'@': 105}), 18: (1, {'@': 105}), 40: (1, {'@': 105}), 55: (1, {'@': 105}), 44: (1, {'@': 105}), 53: (1, {'@': 105}), 46: (1, {'@': 105}), 34: (1, {'@': 105}), 36: (1, {'@': 105}), 35: (1, {'@': 105}), 37: (1, {'@': 105}), 58: (1, {'@': 105}), 33: (1, {'@': 105}), 60: (1, {'@': 105}), 24: (1, {'@': 105}), 20: (1, {'@': 105}), 61: (1, {'@': 105}), 62: (1, {'@': 105}), 63: (1, {'@': 105})}, 517: {4: (0, 349), 20: (0, 519)}, 518: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 137), 36: (0, 509)}, 519: {50: (1, {'@': 59}), 15: (1, {'@': 59}), 56: (1, {'@': 59}), 47: (1, {'@': 59}), 43: (1, {'@': 59}), 57: (1, {'@': 59}), 41: (1, {'@': 59}), 54: (1, {'@': 59}), 64: (1, {'@': 59}), 51: (1, {'@': 59}), 49: (1, {'@': 59}), 48: (1, {'@': 59}), 59: (1, {'@': 59}), 1: (1, {'@': 59}), 42: (1, {'@': 59}), 18: (1, {'@': 59}), 40: (1, {'@': 59}), 55: (1, {'@': 59}), 44: (1, {'@': 59}), 53: (1, {'@': 59}), 46: (1, {'@': 59}), 34: (1, {'@': 59}), 36: (1, {'@': 59}), 35: (1, {'@': 59}), 37: (1, {'@': 59}), 58: (1, {'@': 59}), 33: (1, {'@': 59}), 60: (1, {'@': 59}), 24: (1, {'@': 59}), 20: (1, {'@': 59}), 61: (1, {'@': 59}), 62: (1, {'@': 59}), 63: (1, {'@': 59}), 2: (1, {'@': 59}), 6: (1, {'@': 59}), 66: (1, {'@': 59})}, 520: {15: (0, 56), 50: (1, {'@': 103}), 56: (1, {'@': 103}), 47: (1, {'@': 103}), 43: (1, {'@': 103}), 57: (1, {'@': 103}), 41: (1, {'@': 103}), 54: (1, {'@': 103}), 51: (1, {'@': 103}), 49: (1, {'@': 103}), 48: (1, {'@': 103}), 59: (1, {'@': 103}), 1: (1, {'@': 103}), 42: (1, {'@': 103}), 34: (1, {'@': 103}), 18: (1, {'@': 103}), 36: (1, {'@': 103}), 40: (1, {'@': 103}), 35: (1, {'@': 103}), 55: (1, {'@': 103}), 44: (1, {'@': 103}), 53: (1, {'@': 103}), 46: (1, {'@': 103}), 37: (1, {'@': 103}), 58: (1, {'@': 103}), 33: (1, {'@': 103}), 60: (1, {'@': 103}), 24: (1, {'@': 103}), 20: (1, {'@': 103}), 61: (1, {'@': 103}), 62: (1, {'@': 103}), 63: (1, {'@': 103}), 64: (1, {'@': 103})}, 521: {41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 65: (0, 119), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 38: (0, 540), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 58: (0, 565), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 522: {50: (1, {'@': 227}), 56: (1, {'@': 227}), 47: (1, {'@': 227}), 43: (1, {'@': 227}), 57: (1, {'@': 227}), 41: (1, {'@': 227}), 54: (1, {'@': 227}), 64: (1, {'@': 227}), 51: (1, {'@': 227}), 49: (1, {'@': 227}), 48: (1, {'@': 227}), 59: (1, {'@': 227}), 1: (1, {'@': 227}), 42: (1, {'@': 227}), 18: (1, {'@': 227}), 40: (1, {'@': 227}), 55: (1, {'@': 227}), 44: (1, {'@': 227}), 53: (1, {'@': 227}), 46: (1, {'@': 227}), 34: (1, {'@': 227}), 36: (1, {'@': 227}), 35: (1, {'@': 227}), 37: (1, {'@': 227}), 58: (1, {'@': 227}), 33: (1, {'@': 227}), 60: (1, {'@': 227}), 24: (1, {'@': 227}), 20: (1, {'@': 227}), 61: (1, {'@': 227}), 62: (1, {'@': 227}), 63: (1, {'@': 227})}, 523: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 4), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 524: {24: (1, {'@': 416}), 20: (1, {'@': 416}), 60: (1, {'@': 416}), 36: (1, {'@': 416}), 34: (1, {'@': 416}), 35: (1, {'@': 416})}, 525: {51: (1, {'@': 62}), 50: (1, {'@': 62}), 47: (1, {'@': 62}), 43: (1, {'@': 62}), 42: (1, {'@': 62}), 18: (1, {'@': 62}), 41: (1, {'@': 62}), 54: (1, {'@': 62}), 40: (1, {'@': 62}), 55: (1, {'@': 62}), 53: (1, {'@': 62}), 44: (1, {'@': 62}), 64: (1, {'@': 62}), 49: (1, {'@': 62}), 46: (1, {'@': 62}), 48: (1, {'@': 62}), 34: (1, {'@': 62}), 36: (1, {'@': 62}), 35: (1, {'@': 62}), 37: (1, {'@': 62}), 58: (1, {'@': 62}), 33: (1, {'@': 62}), 60: (1, {'@': 62}), 24: (1, {'@': 62}), 20: (1, {'@': 62}), 61: (1, {'@': 62}), 62: (1, {'@': 62}), 63: (1, {'@': 62})}, 526: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 627), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 527: {1: (1, {'@': 353}), 15: (1, {'@': 353}), 6: (1, {'@': 353}), 10: (1, {'@': 353}), 18: (1, {'@': 353}), 34: (1, {'@': 353}), 36: (1, {'@': 353}), 35: (1, {'@': 353}), 9: (1, {'@': 353}), 32: (1, {'@': 353}), 17: (1, {'@': 353}), 2: (1, {'@': 353}), 20: (1, {'@': 353})}, 528: {35: (0, 515), 34: (0, 491), 38: (0, 380), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 378}), 15: (1, {'@': 378}), 6: (1, {'@': 378}), 10: (1, {'@': 378}), 18: (1, {'@': 378}), 9: (1, {'@': 378}), 32: (1, {'@': 378}), 17: (1, {'@': 378}), 2: (1, {'@': 378}), 20: (1, {'@': 378})}, 529: {24: (1, {'@': 417}), 20: (1, {'@': 417}), 60: (1, {'@': 417}), 36: (1, {'@': 417}), 34: (1, {'@': 417}), 35: (1, {'@': 417})}, 530: {50: (1, {'@': 97}), 56: (1, {'@': 97}), 47: (1, {'@': 97}), 43: (1, {'@': 97}), 57: (1, {'@': 97}), 41: (1, {'@': 97}), 54: (1, {'@': 97}), 64: (1, {'@': 97}), 51: (1, {'@': 97}), 49: (1, {'@': 97}), 48: (1, {'@': 97}), 59: (1, {'@': 97}), 1: (1, {'@': 97}), 42: (1, {'@': 97}), 18: (1, {'@': 97}), 40: (1, {'@': 97}), 55: (1, {'@': 97}), 44: (1, {'@': 97}), 53: (1, {'@': 97}), 46: (1, {'@': 97}), 34: (1, {'@': 97}), 36: (1, {'@': 97}), 35: (1, {'@': 97}), 37: (1, {'@': 97}), 58: (1, {'@': 97}), 33: (1, {'@': 97}), 60: (1, {'@': 97}), 24: (1, {'@': 97}), 20: (1, {'@': 97}), 61: (1, {'@': 97}), 62: (1, {'@': 97}), 63: (1, {'@': 97})}, 531: {35: (0, 515), 34: (0, 491), 38: (0, 384), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 346}), 15: (1, {'@': 346}), 6: (1, {'@': 346}), 10: (1, {'@': 346}), 18: (1, {'@': 346}), 9: (1, {'@': 346}), 32: (1, {'@': 346}), 17: (1, {'@': 346}), 2: (1, {'@': 346}), 20: (1, {'@': 346})}, 532: {24: (1, {'@': 49}), 20: (1, {'@': 49}), 60: (1, {'@': 49}), 36: (1, {'@': 49}), 34: (1, {'@': 49}), 35: (1, {'@': 49})}, 533: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 378), 36: (0, 509), 1: (1, {'@': 376}), 15: (1, {'@': 376}), 6: (1, {'@': 376}), 10: (1, {'@': 376}), 18: (1, {'@': 376}), 9: (1, {'@': 376}), 32: (1, {'@': 376}), 17: (1, {'@': 376}), 2: (1, {'@': 376}), 20: (1, {'@': 376})}, 534: {36: (1, {'@': 428}), 37: (1, {'@': 428}), 34: (1, {'@': 428}), 35: (1, {'@': 428}), 1: (1, {'@': 428}), 15: (1, {'@': 428}), 6: (1, {'@': 428}), 10: (1, {'@': 428}), 18: (1, {'@': 428}), 9: (1, {'@': 428}), 32: (1, {'@': 428}), 17: (1, {'@': 428}), 2: (1, {'@': 428}), 20: (1, {'@': 428}), 40: (1, {'@': 428}), 58: (1, {'@': 428}), 61: (1, {'@': 428}), 66: (1, {'@': 428}), 24: (1, {'@': 428}), 60: (1, {'@': 428}), 71: (1, {'@': 428}), 33: (1, {'@': 428})}, 535: {50: (1, {'@': 109}), 56: (1, {'@': 109}), 47: (1, {'@': 109}), 43: (1, {'@': 109}), 57: (1, {'@': 109}), 41: (1, {'@': 109}), 54: (1, {'@': 109}), 64: (1, {'@': 109}), 51: (1, {'@': 109}), 49: (1, {'@': 109}), 48: (1, {'@': 109}), 59: (1, {'@': 109}), 1: (1, {'@': 109}), 42: (1, {'@': 109}), 18: (1, {'@': 109}), 40: (1, {'@': 109}), 55: (1, {'@': 109}), 44: (1, {'@': 109}), 53: (1, {'@': 109}), 46: (1, {'@': 109}), 34: (1, {'@': 109}), 36: (1, {'@': 109}), 35: (1, {'@': 109}), 37: (1, {'@': 109}), 58: (1, {'@': 109}), 33: (1, {'@': 109}), 60: (1, {'@': 109}), 24: (1, {'@': 109}), 20: (1, {'@': 109}), 61: (1, {'@': 109}), 62: (1, {'@': 109}), 63: (1, {'@': 109})}, 536: {1: (1, {'@': 84}), 15: (1, {'@': 84}), 6: (1, {'@': 84}), 10: (1, {'@': 84}), 18: (1, {'@': 84}), 34: (1, {'@': 84}), 36: (1, {'@': 84}), 35: (1, {'@': 84}), 9: (1, {'@': 84}), 32: (1, {'@': 84}), 17: (1, {'@': 84}), 2: (1, {'@': 84}), 20: (1, {'@': 84})}, 537: {36: (1, {'@': 426}), 37: (1, {'@': 426}), 34: (1, {'@': 426}), 35: (1, {'@': 426}), 1: (1, {'@': 426}), 15: (1, {'@': 426}), 6: (1, {'@': 426}), 10: (1, {'@': 426}), 18: (1, {'@': 426}), 9: (1, {'@': 426}), 32: (1, {'@': 426}), 17: (1, {'@': 426}), 2: (1, {'@': 426}), 20: (1, {'@': 426}), 40: (1, {'@': 426}), 58: (1, {'@': 426}), 61: (1, {'@': 426}), 66: (1, {'@': 426}), 24: (1, {'@': 426}), 60: (1, {'@': 426}), 71: (1, {'@': 426}), 33: (1, {'@': 426})}, 538: {50: (1, {'@': 299}), 56: (1, {'@': 299}), 47: (1, {'@': 299}), 43: (1, {'@': 299}), 57: (1, {'@': 299}), 41: (1, {'@': 299}), 54: (1, {'@': 299}), 64: (1, {'@': 299}), 51: (1, {'@': 299}), 49: (1, {'@': 299}), 48: (1, {'@': 299}), 59: (1, {'@': 299}), 1: (1, {'@': 299}), 42: (1, {'@': 299}), 18: (1, {'@': 299}), 40: (1, {'@': 299}), 55: (1, {'@': 299}), 44: (1, {'@': 299}), 53: (1, {'@': 299}), 46: (1, {'@': 299}), 34: (1, {'@': 299}), 36: (1, {'@': 299}), 35: (1, {'@': 299}), 37: (1, {'@': 299}), 58: (1, {'@': 299}), 33: (1, {'@': 299}), 60: (1, {'@': 299}), 24: (1, {'@': 299}), 20: (1, {'@': 299}), 61: (1, {'@': 299}), 62: (1, {'@': 299}), 63: (1, {'@': 299})}, 539: {34: (0, 491), 33: (0, 130), 39: (0, 497), 38: (0, 169), 36: (0, 509), 35: (0, 515), 58: (0, 176)}, 540: {35: (0, 515), 58: (0, 584), 38: (0, 663), 34: (0, 491), 61: (0, 556), 39: (0, 497), 65: (0, 571), 36: (0, 509)}, 541: {24: (0, 730)}, 542: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 433}), 35: (1, {'@': 433}), 36: (1, {'@': 433}), 58: (1, {'@': 433}), 33: (1, {'@': 433}), 62: (1, {'@': 433}), 37: (1, {'@': 433})}, 543: {50: (1, {'@': 304}), 56: (1, {'@': 304}), 47: (1, {'@': 304}), 43: (1, {'@': 304}), 57: (1, {'@': 304}), 41: (1, {'@': 304}), 54: (1, {'@': 304}), 64: (1, {'@': 304}), 51: (1, {'@': 304}), 49: (1, {'@': 304}), 48: (1, {'@': 304}), 59: (1, {'@': 304}), 1: (1, {'@': 304}), 42: (1, {'@': 304}), 18: (1, {'@': 304}), 40: (1, {'@': 304}), 55: (1, {'@': 304}), 44: (1, {'@': 304}), 53: (1, {'@': 304}), 46: (1, {'@': 304}), 34: (1, {'@': 304}), 36: (1, {'@': 304}), 35: (1, {'@': 304}), 37: (1, {'@': 304}), 58: (1, {'@': 304}), 33: (1, {'@': 304}), 60: (1, {'@': 304}), 24: (1, {'@': 304}), 20: (1, {'@': 304}), 61: (1, {'@': 304}), 62: (1, {'@': 304}), 63: (1, {'@': 304})}, 544: {66: (0, 656)}, 545: {35: (0, 515), 34: (0, 491), 39: (0, 497), 24: (0, 714), 38: (0, 716), 36: (0, 509)}, 546: {35: (0, 515), 34: (0, 491), 39: (0, 497), 24: (0, 302), 38: (0, 652), 36: (0, 509)}, 547: {35: (0, 515), 38: (0, 658), 34: (0, 491), 39: (0, 497), 24: (0, 554), 36: (0, 509)}, 548: {38: (0, 138), 41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 65: (0, 156), 58: (0, 163), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 50: (0, 270), 18: (0, 277)}, 549: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 8: (0, 343), 5: (0, 525), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 550: {50: (1, {'@': 287}), 56: (1, {'@': 287}), 47: (1, {'@': 287}), 43: (1, {'@': 287}), 57: (1, {'@': 287}), 41: (1, {'@': 287}), 54: (1, {'@': 287}), 64: (1, {'@': 287}), 51: (1, {'@': 287}), 49: (1, {'@': 287}), 48: (1, {'@': 287}), 59: (1, {'@': 287}), 1: (1, {'@': 287}), 42: (1, {'@': 287}), 18: (1, {'@': 287}), 40: (1, {'@': 287}), 55: (1, {'@': 287}), 44: (1, {'@': 287}), 53: (1, {'@': 287}), 46: (1, {'@': 287}), 34: (1, {'@': 287}), 36: (1, {'@': 287}), 35: (1, {'@': 287}), 37: (1, {'@': 287}), 58: (1, {'@': 287}), 33: (1, {'@': 287}), 60: (1, {'@': 287}), 24: (1, {'@': 287}), 20: (1, {'@': 287}), 61: (1, {'@': 287}), 62: (1, {'@': 287}), 63: (1, {'@': 287})}, 551: {50: (1, {'@': 166}), 56: (1, {'@': 166}), 47: (1, {'@': 166}), 43: (1, {'@': 166}), 57: (1, {'@': 166}), 41: (1, {'@': 166}), 54: (1, {'@': 166}), 64: (1, {'@': 166}), 51: (1, {'@': 166}), 49: (1, {'@': 166}), 48: (1, {'@': 166}), 59: (1, {'@': 166}), 1: (1, {'@': 166}), 42: (1, {'@': 166}), 18: (1, {'@': 166}), 40: (1, {'@': 166}), 55: (1, {'@': 166}), 44: (1, {'@': 166}), 53: (1, {'@': 166}), 46: (1, {'@': 166}), 34: (1, {'@': 166}), 36: (1, {'@': 166}), 35: (1, {'@': 166}), 37: (1, {'@': 166}), 58: (1, {'@': 166}), 33: (1, {'@': 166}), 60: (1, {'@': 166}), 24: (1, {'@': 166}), 20: (1, {'@': 166}), 61: (1, {'@': 166}), 62: (1, {'@': 166}), 63: (1, {'@': 166})}, 552: {50: (1, {'@': 290}), 56: (1, {'@': 290}), 47: (1, {'@': 290}), 43: (1, {'@': 290}), 57: (1, {'@': 290}), 41: (1, {'@': 290}), 54: (1, {'@': 290}), 64: (1, {'@': 290}), 51: (1, {'@': 290}), 49: (1, {'@': 290}), 48: (1, {'@': 290}), 59: (1, {'@': 290}), 1: (1, {'@': 290}), 42: (1, {'@': 290}), 18: (1, {'@': 290}), 40: (1, {'@': 290}), 55: (1, {'@': 290}), 44: (1, {'@': 290}), 53: (1, {'@': 290}), 46: (1, {'@': 290}), 34: (1, {'@': 290}), 36: (1, {'@': 290}), 35: (1, {'@': 290}), 37: (1, {'@': 290}), 58: (1, {'@': 290}), 33: (1, {'@': 290}), 60: (1, {'@': 290}), 24: (1, {'@': 290}), 20: (1, {'@': 290}), 61: (1, {'@': 290}), 62: (1, {'@': 290}), 63: (1, {'@': 290})}, 553: {24: (0, 713)}, 554: {50: (1, {'@': 289}), 56: (1, {'@': 289}), 47: (1, {'@': 289}), 43: (1, {'@': 289}), 57: (1, {'@': 289}), 41: (1, {'@': 289}), 54: (1, {'@': 289}), 64: (1, {'@': 289}), 51: (1, {'@': 289}), 49: (1, {'@': 289}), 48: (1, {'@': 289}), 59: (1, {'@': 289}), 1: (1, {'@': 289}), 42: (1, {'@': 289}), 18: (1, {'@': 289}), 40: (1, {'@': 289}), 55: (1, {'@': 289}), 44: (1, {'@': 289}), 53: (1, {'@': 289}), 46: (1, {'@': 289}), 34: (1, {'@': 289}), 36: (1, {'@': 289}), 35: (1, {'@': 289}), 37: (1, {'@': 289}), 58: (1, {'@': 289}), 33: (1, {'@': 289}), 60: (1, {'@': 289}), 24: (1, {'@': 289}), 20: (1, {'@': 289}), 61: (1, {'@': 289}), 62: (1, {'@': 289}), 63: (1, {'@': 289})}, 555: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 590), 38: (0, 183), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 58: (0, 188), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 556: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 661), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 38: (0, 144), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 557: {24: (0, 191)}, 558: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 89), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 38: (0, 100), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 559: {50: (1, {'@': 165}), 56: (1, {'@': 165}), 47: (1, {'@': 165}), 43: (1, {'@': 165}), 57: (1, {'@': 165}), 41: (1, {'@': 165}), 54: (1, {'@': 165}), 64: (1, {'@': 165}), 51: (1, {'@': 165}), 49: (1, {'@': 165}), 48: (1, {'@': 165}), 59: (1, {'@': 165}), 1: (1, {'@': 165}), 42: (1, {'@': 165}), 18: (1, {'@': 165}), 40: (1, {'@': 165}), 55: (1, {'@': 165}), 44: (1, {'@': 165}), 53: (1, {'@': 165}), 46: (1, {'@': 165}), 34: (1, {'@': 165}), 36: (1, {'@': 165}), 35: (1, {'@': 165}), 37: (1, {'@': 165}), 58: (1, {'@': 165}), 33: (1, {'@': 165}), 60: (1, {'@': 165}), 24: (1, {'@': 165}), 20: (1, {'@': 165}), 61: (1, {'@': 165}), 62: (1, {'@': 165}), 63: (1, {'@': 165})}, 560: {50: (1, {'@': 283}), 56: (1, {'@': 283}), 47: (1, {'@': 283}), 43: (1, {'@': 283}), 57: (1, {'@': 283}), 41: (1, {'@': 283}), 54: (1, {'@': 283}), 64: (1, {'@': 283}), 51: (1, {'@': 283}), 49: (1, {'@': 283}), 48: (1, {'@': 283}), 59: (1, {'@': 283}), 1: (1, {'@': 283}), 42: (1, {'@': 283}), 18: (1, {'@': 283}), 40: (1, {'@': 283}), 55: (1, {'@': 283}), 44: (1, {'@': 283}), 53: (1, {'@': 283}), 46: (1, {'@': 283}), 34: (1, {'@': 283}), 36: (1, {'@': 283}), 35: (1, {'@': 283}), 37: (1, {'@': 283}), 58: (1, {'@': 283}), 33: (1, {'@': 283}), 60: (1, {'@': 283}), 24: (1, {'@': 283}), 20: (1, {'@': 283}), 61: (1, {'@': 283}), 62: (1, {'@': 283}), 63: (1, {'@': 283})}, 561: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 252), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 428), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 24: (0, 639), 13: (0, 309), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 562: {50: (1, {'@': 188}), 56: (1, {'@': 188}), 37: (1, {'@': 188}), 57: (1, {'@': 188}), 58: (1, {'@': 188}), 51: (1, {'@': 188}), 33: (1, {'@': 188}), 48: (1, {'@': 188}), 59: (1, {'@': 188}), 1: (1, {'@': 188}), 42: (1, {'@': 188}), 18: (1, {'@': 188}), 34: (1, {'@': 188}), 35: (1, {'@': 188}), 40: (1, {'@': 188}), 60: (1, {'@': 188}), 24: (1, {'@': 188}), 44: (1, {'@': 188}), 20: (1, {'@': 188}), 61: (1, {'@': 188}), 47: (1, {'@': 188}), 62: (1, {'@': 188}), 43: (1, {'@': 188}), 41: (1, {'@': 188}), 54: (1, {'@': 188}), 63: (1, {'@': 188}), 64: (1, {'@': 188}), 49: (1, {'@': 188}), 36: (1, {'@': 188}), 55: (1, {'@': 188}), 53: (1, {'@': 188}), 46: (1, {'@': 188})}, 563: {24: (0, 276), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 95)}, 564: {35: (0, 515), 65: (0, 722), 34: (0, 491), 61: (0, 556), 39: (0, 497), 38: (0, 725), 24: (0, 727), 36: (0, 509)}, 565: {50: (1, {'@': 220}), 56: (1, {'@': 220}), 47: (1, {'@': 220}), 43: (1, {'@': 220}), 57: (1, {'@': 220}), 41: (1, {'@': 220}), 54: (1, {'@': 220}), 64: (1, {'@': 220}), 51: (1, {'@': 220}), 49: (1, {'@': 220}), 48: (1, {'@': 220}), 59: (1, {'@': 220}), 1: (1, {'@': 220}), 42: (1, {'@': 220}), 18: (1, {'@': 220}), 40: (1, {'@': 220}), 55: (1, {'@': 220}), 44: (1, {'@': 220}), 53: (1, {'@': 220}), 46: (1, {'@': 220}), 34: (1, {'@': 220}), 36: (1, {'@': 220}), 35: (1, {'@': 220}), 37: (1, {'@': 220}), 58: (1, {'@': 220}), 33: (1, {'@': 220}), 60: (1, {'@': 220}), 24: (1, {'@': 220}), 20: (1, {'@': 220}), 61: (1, {'@': 220}), 62: (1, {'@': 220}), 63: (1, {'@': 220})}, 566: {50: (1, {'@': 274}), 56: (1, {'@': 274}), 47: (1, {'@': 274}), 43: (1, {'@': 274}), 57: (1, {'@': 274}), 41: (1, {'@': 274}), 54: (1, {'@': 274}), 64: (1, {'@': 274}), 51: (1, {'@': 274}), 49: (1, {'@': 274}), 48: (1, {'@': 274}), 59: (1, {'@': 274}), 1: (1, {'@': 274}), 42: (1, {'@': 274}), 18: (1, {'@': 274}), 40: (1, {'@': 274}), 55: (1, {'@': 274}), 44: (1, {'@': 274}), 53: (1, {'@': 274}), 46: (1, {'@': 274}), 34: (1, {'@': 274}), 36: (1, {'@': 274}), 35: (1, {'@': 274}), 37: (1, {'@': 274}), 58: (1, {'@': 274}), 33: (1, {'@': 274}), 60: (1, {'@': 274}), 24: (1, {'@': 274}), 20: (1, {'@': 274}), 61: (1, {'@': 274}), 62: (1, {'@': 274}), 63: (1, {'@': 274})}, 567: {50: (1, {'@': 141}), 56: (1, {'@': 141}), 47: (1, {'@': 141}), 43: (1, {'@': 141}), 57: (1, {'@': 141}), 41: (1, {'@': 141}), 54: (1, {'@': 141}), 64: (1, {'@': 141}), 51: (1, {'@': 141}), 49: (1, {'@': 141}), 48: (1, {'@': 141}), 59: (1, {'@': 141}), 1: (1, {'@': 141}), 42: (1, {'@': 141}), 18: (1, {'@': 141}), 40: (1, {'@': 141}), 55: (1, {'@': 141}), 44: (1, {'@': 141}), 53: (1, {'@': 141}), 46: (1, {'@': 141}), 34: (1, {'@': 141}), 36: (1, {'@': 141}), 35: (1, {'@': 141}), 37: (1, {'@': 141}), 58: (1, {'@': 141}), 33: (1, {'@': 141}), 60: (1, {'@': 141}), 24: (1, {'@': 141}), 20: (1, {'@': 141}), 61: (1, {'@': 141}), 62: (1, {'@': 141}), 63: (1, {'@': 141})}, 568: {50: (1, {'@': 273}), 56: (1, {'@': 273}), 47: (1, {'@': 273}), 43: (1, {'@': 273}), 57: (1, {'@': 273}), 41: (1, {'@': 273}), 54: (1, {'@': 273}), 64: (1, {'@': 273}), 51: (1, {'@': 273}), 49: (1, {'@': 273}), 48: (1, {'@': 273}), 59: (1, {'@': 273}), 1: (1, {'@': 273}), 42: (1, {'@': 273}), 18: (1, {'@': 273}), 40: (1, {'@': 273}), 55: (1, {'@': 273}), 44: (1, {'@': 273}), 53: (1, {'@': 273}), 46: (1, {'@': 273}), 34: (1, {'@': 273}), 36: (1, {'@': 273}), 35: (1, {'@': 273}), 37: (1, {'@': 273}), 58: (1, {'@': 273}), 33: (1, {'@': 273}), 60: (1, {'@': 273}), 24: (1, {'@': 273}), 20: (1, {'@': 273}), 61: (1, {'@': 273}), 62: (1, {'@': 273}), 63: (1, {'@': 273})}, 569: {50: (1, {'@': 302}), 56: (1, {'@': 302}), 47: (1, {'@': 302}), 43: (1, {'@': 302}), 57: (1, {'@': 302}), 41: (1, {'@': 302}), 54: (1, {'@': 302}), 64: (1, {'@': 302}), 51: (1, {'@': 302}), 49: (1, {'@': 302}), 48: (1, {'@': 302}), 59: (1, {'@': 302}), 1: (1, {'@': 302}), 42: (1, {'@': 302}), 18: (1, {'@': 302}), 40: (1, {'@': 302}), 55: (1, {'@': 302}), 44: (1, {'@': 302}), 53: (1, {'@': 302}), 46: (1, {'@': 302}), 34: (1, {'@': 302}), 36: (1, {'@': 302}), 35: (1, {'@': 302}), 37: (1, {'@': 302}), 58: (1, {'@': 302}), 33: (1, {'@': 302}), 60: (1, {'@': 302}), 24: (1, {'@': 302}), 20: (1, {'@': 302}), 61: (1, {'@': 302}), 62: (1, {'@': 302}), 63: (1, {'@': 302})}, 570: {50: (1, {'@': 319}), 56: (1, {'@': 319}), 47: (1, {'@': 319}), 43: (1, {'@': 319}), 57: (1, {'@': 319}), 41: (1, {'@': 319}), 54: (1, {'@': 319}), 64: (1, {'@': 319}), 51: (1, {'@': 319}), 49: (1, {'@': 319}), 48: (1, {'@': 319}), 59: (1, {'@': 319}), 1: (1, {'@': 319}), 42: (1, {'@': 319}), 18: (1, {'@': 319}), 40: (1, {'@': 319}), 55: (1, {'@': 319}), 44: (1, {'@': 319}), 53: (1, {'@': 319}), 46: (1, {'@': 319}), 34: (1, {'@': 319}), 36: (1, {'@': 319}), 35: (1, {'@': 319}), 37: (1, {'@': 319}), 58: (1, {'@': 319}), 33: (1, {'@': 319}), 60: (1, {'@': 319}), 24: (1, {'@': 319}), 20: (1, {'@': 319}), 61: (1, {'@': 319}), 62: (1, {'@': 319}), 63: (1, {'@': 319})}, 571: {35: (0, 515), 58: (0, 374), 34: (0, 491), 38: (0, 385), 39: (0, 497), 36: (0, 509)}, 572: {24: (0, 603)}, 573: {63: (0, 140), 41: (0, 510), 43: (0, 423), 44: (0, 425), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 574: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 720), 36: (0, 509), 24: (0, 718)}, 575: {0: (0, 53), 2: (0, 62), 39: (0, 497), 38: (0, 386), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 8: (0, 182), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 576: {1: (1, {'@': 371}), 15: (1, {'@': 371}), 6: (1, {'@': 371}), 10: (1, {'@': 371}), 18: (1, {'@': 371}), 34: (1, {'@': 371}), 36: (1, {'@': 371}), 35: (1, {'@': 371}), 9: (1, {'@': 371}), 32: (1, {'@': 371}), 17: (1, {'@': 371}), 2: (1, {'@': 371}), 20: (1, {'@': 371})}, 577: {65: (0, 641), 35: (0, 515), 34: (0, 491), 61: (0, 556), 39: (0, 497), 38: (0, 653), 24: (0, 655), 36: (0, 509)}, 578: {50: (1, {'@': 207}), 56: (1, {'@': 207}), 47: (1, {'@': 207}), 43: (1, {'@': 207}), 57: (1, {'@': 207}), 41: (1, {'@': 207}), 54: (1, {'@': 207}), 64: (1, {'@': 207}), 51: (1, {'@': 207}), 49: (1, {'@': 207}), 48: (1, {'@': 207}), 59: (1, {'@': 207}), 1: (1, {'@': 207}), 42: (1, {'@': 207}), 18: (1, {'@': 207}), 40: (1, {'@': 207}), 55: (1, {'@': 207}), 44: (1, {'@': 207}), 53: (1, {'@': 207}), 46: (1, {'@': 207}), 34: (1, {'@': 207}), 36: (1, {'@': 207}), 35: (1, {'@': 207}), 37: (1, {'@': 207}), 58: (1, {'@': 207}), 33: (1, {'@': 207}), 60: (1, {'@': 207}), 24: (1, {'@': 207}), 20: (1, {'@': 207}), 61: (1, {'@': 207}), 62: (1, {'@': 207}), 63: (1, {'@': 207})}, 579: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 38: (0, 98), 40: (0, 69), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 580: {0: (0, 53), 1: (0, 61), 2: (0, 62), 8: (0, 548), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 581: {41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 38: (0, 116), 36: (0, 509), 45: (0, 455), 46: (0, 442), 65: (0, 172), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 61: (0, 556), 51: (0, 199), 35: (0, 515), 52: (0, 203), 58: (0, 179), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 582: {38: (0, 40), 65: (0, 45), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 35: (0, 515), 24: (0, 47)}, 583: {50: (1, {'@': 151}), 56: (1, {'@': 151}), 47: (1, {'@': 151}), 43: (1, {'@': 151}), 57: (1, {'@': 151}), 41: (1, {'@': 151}), 54: (1, {'@': 151}), 64: (1, {'@': 151}), 51: (1, {'@': 151}), 49: (1, {'@': 151}), 48: (1, {'@': 151}), 59: (1, {'@': 151}), 1: (1, {'@': 151}), 42: (1, {'@': 151}), 18: (1, {'@': 151}), 40: (1, {'@': 151}), 55: (1, {'@': 151}), 44: (1, {'@': 151}), 53: (1, {'@': 151}), 46: (1, {'@': 151}), 34: (1, {'@': 151}), 36: (1, {'@': 151}), 35: (1, {'@': 151}), 37: (1, {'@': 151}), 58: (1, {'@': 151}), 33: (1, {'@': 151}), 60: (1, {'@': 151}), 24: (1, {'@': 151}), 20: (1, {'@': 151}), 61: (1, {'@': 151}), 62: (1, {'@': 151}), 63: (1, {'@': 151})}, 584: {50: (1, {'@': 217}), 56: (1, {'@': 217}), 47: (1, {'@': 217}), 43: (1, {'@': 217}), 57: (1, {'@': 217}), 41: (1, {'@': 217}), 54: (1, {'@': 217}), 64: (1, {'@': 217}), 51: (1, {'@': 217}), 49: (1, {'@': 217}), 48: (1, {'@': 217}), 59: (1, {'@': 217}), 1: (1, {'@': 217}), 42: (1, {'@': 217}), 18: (1, {'@': 217}), 40: (1, {'@': 217}), 55: (1, {'@': 217}), 44: (1, {'@': 217}), 53: (1, {'@': 217}), 46: (1, {'@': 217}), 34: (1, {'@': 217}), 36: (1, {'@': 217}), 35: (1, {'@': 217}), 37: (1, {'@': 217}), 58: (1, {'@': 217}), 33: (1, {'@': 217}), 60: (1, {'@': 217}), 24: (1, {'@': 217}), 20: (1, {'@': 217}), 61: (1, {'@': 217}), 62: (1, {'@': 217}), 63: (1, {'@': 217})}, 585: {50: (1, {'@': 271}), 56: (1, {'@': 271}), 47: (1, {'@': 271}), 43: (1, {'@': 271}), 57: (1, {'@': 271}), 41: (1, {'@': 271}), 54: (1, {'@': 271}), 64: (1, {'@': 271}), 51: (1, {'@': 271}), 49: (1, {'@': 271}), 48: (1, {'@': 271}), 59: (1, {'@': 271}), 1: (1, {'@': 271}), 42: (1, {'@': 271}), 18: (1, {'@': 271}), 40: (1, {'@': 271}), 55: (1, {'@': 271}), 44: (1, {'@': 271}), 53: (1, {'@': 271}), 46: (1, {'@': 271}), 34: (1, {'@': 271}), 36: (1, {'@': 271}), 35: (1, {'@': 271}), 37: (1, {'@': 271}), 58: (1, {'@': 271}), 33: (1, {'@': 271}), 60: (1, {'@': 271}), 24: (1, {'@': 271}), 20: (1, {'@': 271}), 61: (1, {'@': 271}), 62: (1, {'@': 271}), 63: (1, {'@': 271})}, 586: {0: (0, 17), 10: (0, 421)}, 587: {50: (1, {'@': 269}), 56: (1, {'@': 269}), 47: (1, {'@': 269}), 43: (1, {'@': 269}), 57: (1, {'@': 269}), 41: (1, {'@': 269}), 54: (1, {'@': 269}), 64: (1, {'@': 269}), 51: (1, {'@': 269}), 49: (1, {'@': 269}), 48: (1, {'@': 269}), 59: (1, {'@': 269}), 1: (1, {'@': 269}), 42: (1, {'@': 269}), 18: (1, {'@': 269}), 40: (1, {'@': 269}), 55: (1, {'@': 269}), 44: (1, {'@': 269}), 53: (1, {'@': 269}), 46: (1, {'@': 269}), 34: (1, {'@': 269}), 36: (1, {'@': 269}), 35: (1, {'@': 269}), 37: (1, {'@': 269}), 58: (1, {'@': 269}), 33: (1, {'@': 269}), 60: (1, {'@': 269}), 24: (1, {'@': 269}), 20: (1, {'@': 269}), 61: (1, {'@': 269}), 62: (1, {'@': 269}), 63: (1, {'@': 269})}, 588: {40: (0, 133)}, 589: {50: (1, {'@': 296}), 56: (1, {'@': 296}), 47: (1, {'@': 296}), 43: (1, {'@': 296}), 57: (1, {'@': 296}), 41: (1, {'@': 296}), 54: (1, {'@': 296}), 64: (1, {'@': 296}), 51: (1, {'@': 296}), 49: (1, {'@': 296}), 48: (1, {'@': 296}), 59: (1, {'@': 296}), 1: (1, {'@': 296}), 42: (1, {'@': 296}), 18: (1, {'@': 296}), 40: (1, {'@': 296}), 55: (1, {'@': 296}), 44: (1, {'@': 296}), 53: (1, {'@': 296}), 46: (1, {'@': 296}), 34: (1, {'@': 296}), 36: (1, {'@': 296}), 35: (1, {'@': 296}), 37: (1, {'@': 296}), 58: (1, {'@': 296}), 33: (1, {'@': 296}), 60: (1, {'@': 296}), 24: (1, {'@': 296}), 20: (1, {'@': 296}), 61: (1, {'@': 296}), 62: (1, {'@': 296}), 63: (1, {'@': 296})}, 590: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 434}), 35: (1, {'@': 434}), 36: (1, {'@': 434}), 58: (1, {'@': 434}), 33: (1, {'@': 434}), 62: (1, {'@': 434}), 37: (1, {'@': 434})}, 591: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 23), 9: (0, 419), 10: (0, 421), 38: (0, 125), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 58: (0, 132), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 592: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 8: (0, 579), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 593: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 37: (0, 195), 49: (0, 487), 38: (0, 7), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 594: {4: (0, 304), 20: (0, 519)}, 595: {40: (0, 340)}, 596: {35: (0, 515), 24: (0, 634), 38: (0, 635), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 597: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 34: (1, {'@': 90}), 40: (1, {'@': 90}), 36: (1, {'@': 90}), 35: (1, {'@': 90}), 58: (1, {'@': 90}), 61: (1, {'@': 90}), 37: (1, {'@': 90}), 33: (1, {'@': 90}), 62: (1, {'@': 90}), 63: (1, {'@': 90}), 24: (1, {'@': 90}), 60: (1, {'@': 90}), 20: (1, {'@': 90}), 64: (1, {'@': 90})}, 598: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 33: (1, {'@': 157}), 24: (1, {'@': 157}), 36: (1, {'@': 157}), 34: (1, {'@': 157}), 35: (1, {'@': 157})}, 599: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 55), 1: (1, {'@': 366}), 15: (1, {'@': 366}), 6: (1, {'@': 366}), 10: (1, {'@': 366}), 18: (1, {'@': 366}), 9: (1, {'@': 366}), 32: (1, {'@': 366}), 17: (1, {'@': 366}), 2: (1, {'@': 366}), 20: (1, {'@': 366})}, 600: {24: (0, 732)}, 601: {24: (0, 589), 35: (0, 515), 38: (0, 600), 34: (0, 491), 39: (0, 497), 36: (0, 509)}, 602: {50: (1, {'@': 193}), 56: (1, {'@': 193}), 47: (1, {'@': 193}), 43: (1, {'@': 193}), 57: (1, {'@': 193}), 41: (1, {'@': 193}), 54: (1, {'@': 193}), 64: (1, {'@': 193}), 51: (1, {'@': 193}), 49: (1, {'@': 193}), 48: (1, {'@': 193}), 59: (1, {'@': 193}), 1: (1, {'@': 193}), 42: (1, {'@': 193}), 18: (1, {'@': 193}), 40: (1, {'@': 193}), 55: (1, {'@': 193}), 44: (1, {'@': 193}), 53: (1, {'@': 193}), 46: (1, {'@': 193}), 34: (1, {'@': 193}), 36: (1, {'@': 193}), 35: (1, {'@': 193}), 37: (1, {'@': 193}), 58: (1, {'@': 193}), 33: (1, {'@': 193}), 60: (1, {'@': 193}), 24: (1, {'@': 193}), 20: (1, {'@': 193}), 61: (1, {'@': 193}), 62: (1, {'@': 193}), 63: (1, {'@': 193})}, 603: {50: (1, {'@': 272}), 56: (1, {'@': 272}), 47: (1, {'@': 272}), 43: (1, {'@': 272}), 57: (1, {'@': 272}), 41: (1, {'@': 272}), 54: (1, {'@': 272}), 64: (1, {'@': 272}), 51: (1, {'@': 272}), 49: (1, {'@': 272}), 48: (1, {'@': 272}), 59: (1, {'@': 272}), 1: (1, {'@': 272}), 42: (1, {'@': 272}), 18: (1, {'@': 272}), 40: (1, {'@': 272}), 55: (1, {'@': 272}), 44: (1, {'@': 272}), 53: (1, {'@': 272}), 46: (1, {'@': 272}), 34: (1, {'@': 272}), 36: (1, {'@': 272}), 35: (1, {'@': 272}), 37: (1, {'@': 272}), 58: (1, {'@': 272}), 33: (1, {'@': 272}), 60: (1, {'@': 272}), 24: (1, {'@': 272}), 20: (1, {'@': 272}), 61: (1, {'@': 272}), 62: (1, {'@': 272}), 63: (1, {'@': 272})}, 604: {85: (0, 628), 41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 33: (0, 127), 36: (0, 509), 38: (0, 171), 45: (0, 455), 46: (0, 442), 58: (0, 607), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277)}, 605: {24: (0, 734)}, 606: {24: (0, 67)}, 607: {50: (1, {'@': 127}), 56: (1, {'@': 127}), 47: (1, {'@': 127}), 43: (1, {'@': 127}), 57: (1, {'@': 127}), 41: (1, {'@': 127}), 54: (1, {'@': 127}), 64: (1, {'@': 127}), 51: (1, {'@': 127}), 49: (1, {'@': 127}), 48: (1, {'@': 127}), 59: (1, {'@': 127}), 1: (1, {'@': 127}), 42: (1, {'@': 127}), 18: (1, {'@': 127}), 40: (1, {'@': 127}), 55: (1, {'@': 127}), 44: (1, {'@': 127}), 53: (1, {'@': 127}), 46: (1, {'@': 127}), 34: (1, {'@': 127}), 36: (1, {'@': 127}), 35: (1, {'@': 127}), 37: (1, {'@': 127}), 58: (1, {'@': 127}), 33: (1, {'@': 127}), 60: (1, {'@': 127}), 24: (1, {'@': 127}), 20: (1, {'@': 127}), 61: (1, {'@': 127}), 62: (1, {'@': 127}), 63: (1, {'@': 127})}, 608: {38: (0, 665), 35: (0, 515), 34: (0, 491), 39: (0, 497), 24: (0, 613), 36: (0, 509)}, 609: {0: (0, 53), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 8: (0, 97), 38: (0, 220), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 610: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 106), 38: (0, 118), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 611: {65: (0, 672), 38: (0, 681), 35: (0, 515), 34: (0, 491), 24: (0, 686), 39: (0, 497), 36: (0, 509), 61: (0, 556)}, 612: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 738), 36: (0, 509), 24: (0, 740)}, 613: {50: (1, {'@': 247}), 56: (1, {'@': 247}), 47: (1, {'@': 247}), 43: (1, {'@': 247}), 57: (1, {'@': 247}), 41: (1, {'@': 247}), 54: (1, {'@': 247}), 64: (1, {'@': 247}), 51: (1, {'@': 247}), 49: (1, {'@': 247}), 48: (1, {'@': 247}), 59: (1, {'@': 247}), 1: (1, {'@': 247}), 42: (1, {'@': 247}), 18: (1, {'@': 247}), 40: (1, {'@': 247}), 55: (1, {'@': 247}), 44: (1, {'@': 247}), 53: (1, {'@': 247}), 46: (1, {'@': 247}), 34: (1, {'@': 247}), 36: (1, {'@': 247}), 35: (1, {'@': 247}), 37: (1, {'@': 247}), 58: (1, {'@': 247}), 33: (1, {'@': 247}), 60: (1, {'@': 247}), 24: (1, {'@': 247}), 20: (1, {'@': 247}), 61: (1, {'@': 247}), 62: (1, {'@': 247}), 63: (1, {'@': 247})}, 614: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 483), 36: (0, 509), 1: (1, {'@': 390}), 15: (1, {'@': 390}), 6: (1, {'@': 390}), 10: (1, {'@': 390}), 18: (1, {'@': 390}), 9: (1, {'@': 390}), 32: (1, {'@': 390}), 17: (1, {'@': 390}), 2: (1, {'@': 390}), 20: (1, {'@': 390})}, 615: {10: (0, 478), 50: (1, {'@': 187}), 56: (1, {'@': 187}), 37: (1, {'@': 187}), 57: (1, {'@': 187}), 58: (1, {'@': 187}), 51: (1, {'@': 187}), 33: (1, {'@': 187}), 48: (1, {'@': 187}), 1: (1, {'@': 187}), 59: (1, {'@': 187}), 42: (1, {'@': 187}), 18: (1, {'@': 187}), 34: (1, {'@': 187}), 35: (1, {'@': 187}), 40: (1, {'@': 187}), 60: (1, {'@': 187}), 24: (1, {'@': 187}), 44: (1, {'@': 187}), 20: (1, {'@': 187}), 61: (1, {'@': 187}), 47: (1, {'@': 187}), 62: (1, {'@': 187}), 43: (1, {'@': 187}), 41: (1, {'@': 187}), 54: (1, {'@': 187}), 63: (1, {'@': 187}), 64: (1, {'@': 187}), 49: (1, {'@': 187}), 36: (1, {'@': 187}), 55: (1, {'@': 187}), 53: (1, {'@': 187}), 46: (1, {'@': 187})}, 616: {50: (1, {'@': 147}), 56: (1, {'@': 147}), 47: (1, {'@': 147}), 43: (1, {'@': 147}), 57: (1, {'@': 147}), 41: (1, {'@': 147}), 54: (1, {'@': 147}), 64: (1, {'@': 147}), 51: (1, {'@': 147}), 49: (1, {'@': 147}), 48: (1, {'@': 147}), 59: (1, {'@': 147}), 1: (1, {'@': 147}), 42: (1, {'@': 147}), 18: (1, {'@': 147}), 40: (1, {'@': 147}), 55: (1, {'@': 147}), 44: (1, {'@': 147}), 53: (1, {'@': 147}), 46: (1, {'@': 147}), 34: (1, {'@': 147}), 36: (1, {'@': 147}), 35: (1, {'@': 147}), 37: (1, {'@': 147}), 58: (1, {'@': 147}), 33: (1, {'@': 147}), 60: (1, {'@': 147}), 24: (1, {'@': 147}), 20: (1, {'@': 147}), 61: (1, {'@': 147}), 62: (1, {'@': 147}), 63: (1, {'@': 147})}, 617: {1: (1, {'@': 367}), 15: (1, {'@': 367}), 6: (1, {'@': 367}), 10: (1, {'@': 367}), 18: (1, {'@': 367}), 34: (1, {'@': 367}), 36: (1, {'@': 367}), 35: (1, {'@': 367}), 9: (1, {'@': 367}), 32: (1, {'@': 367}), 17: (1, {'@': 367}), 2: (1, {'@': 367}), 20: (1, {'@': 367})}, 618: {35: (0, 515), 34: (0, 491), 38: (0, 357), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 400}), 15: (1, {'@': 400}), 6: (1, {'@': 400}), 10: (1, {'@': 400}), 18: (1, {'@': 400}), 9: (1, {'@': 400}), 32: (1, {'@': 400}), 17: (1, {'@': 400}), 2: (1, {'@': 400}), 20: (1, {'@': 400})}, 619: {50: (1, {'@': 294}), 56: (1, {'@': 294}), 47: (1, {'@': 294}), 43: (1, {'@': 294}), 57: (1, {'@': 294}), 41: (1, {'@': 294}), 54: (1, {'@': 294}), 64: (1, {'@': 294}), 51: (1, {'@': 294}), 49: (1, {'@': 294}), 48: (1, {'@': 294}), 59: (1, {'@': 294}), 1: (1, {'@': 294}), 42: (1, {'@': 294}), 18: (1, {'@': 294}), 40: (1, {'@': 294}), 55: (1, {'@': 294}), 44: (1, {'@': 294}), 53: (1, {'@': 294}), 46: (1, {'@': 294}), 34: (1, {'@': 294}), 36: (1, {'@': 294}), 35: (1, {'@': 294}), 37: (1, {'@': 294}), 58: (1, {'@': 294}), 33: (1, {'@': 294}), 60: (1, {'@': 294}), 24: (1, {'@': 294}), 20: (1, {'@': 294}), 61: (1, {'@': 294}), 62: (1, {'@': 294}), 63: (1, {'@': 294})}, 620: {0: (0, 53), 2: (0, 62), 8: (0, 573), 6: (0, 530), 4: (0, 520), 7: (0, 535), 1: (0, 61), 9: (0, 419), 14: (0, 431), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 26: (0, 463), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 621: {37: (0, 254)}, 622: {35: (0, 515), 76: (0, 673), 34: (0, 491), 33: (0, 354), 39: (0, 497), 24: (0, 676), 38: (0, 460), 36: (0, 509)}, 623: {38: (0, 691), 65: (0, 36), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 24: (0, 38), 35: (0, 515)}, 624: {35: (0, 515), 24: (0, 632), 34: (0, 491), 33: (0, 354), 39: (0, 497), 38: (0, 460), 76: (0, 0), 36: (0, 509)}, 625: {40: (0, 599)}, 626: {24: (0, 737)}, 627: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 50: (0, 270), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 18: (0, 277), 33: (1, {'@': 156}), 24: (1, {'@': 156}), 36: (1, {'@': 156}), 34: (1, {'@': 156}), 35: (1, {'@': 156})}, 628: {34: (0, 491), 39: (0, 497), 38: (0, 642), 33: (0, 651), 36: (0, 509), 35: (0, 515), 58: (0, 184)}, 629: {35: (0, 515), 34: (0, 491), 38: (0, 338), 39: (0, 497), 36: (0, 509)}, 630: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 40: (0, 336), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 38: (0, 588), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 631: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 666), 8: (0, 696), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 632: {50: (1, {'@': 145}), 56: (1, {'@': 145}), 47: (1, {'@': 145}), 43: (1, {'@': 145}), 57: (1, {'@': 145}), 41: (1, {'@': 145}), 54: (1, {'@': 145}), 64: (1, {'@': 145}), 51: (1, {'@': 145}), 49: (1, {'@': 145}), 48: (1, {'@': 145}), 59: (1, {'@': 145}), 1: (1, {'@': 145}), 42: (1, {'@': 145}), 18: (1, {'@': 145}), 40: (1, {'@': 145}), 55: (1, {'@': 145}), 44: (1, {'@': 145}), 53: (1, {'@': 145}), 46: (1, {'@': 145}), 34: (1, {'@': 145}), 36: (1, {'@': 145}), 35: (1, {'@': 145}), 37: (1, {'@': 145}), 58: (1, {'@': 145}), 33: (1, {'@': 145}), 60: (1, {'@': 145}), 24: (1, {'@': 145}), 20: (1, {'@': 145}), 61: (1, {'@': 145}), 62: (1, {'@': 145}), 63: (1, {'@': 145})}, 633: {40: (0, 689)}, 634: {50: (1, {'@': 268}), 56: (1, {'@': 268}), 47: (1, {'@': 268}), 43: (1, {'@': 268}), 57: (1, {'@': 268}), 41: (1, {'@': 268}), 54: (1, {'@': 268}), 64: (1, {'@': 268}), 51: (1, {'@': 268}), 49: (1, {'@': 268}), 48: (1, {'@': 268}), 59: (1, {'@': 268}), 1: (1, {'@': 268}), 42: (1, {'@': 268}), 18: (1, {'@': 268}), 40: (1, {'@': 268}), 55: (1, {'@': 268}), 44: (1, {'@': 268}), 53: (1, {'@': 268}), 46: (1, {'@': 268}), 34: (1, {'@': 268}), 36: (1, {'@': 268}), 35: (1, {'@': 268}), 37: (1, {'@': 268}), 58: (1, {'@': 268}), 33: (1, {'@': 268}), 60: (1, {'@': 268}), 24: (1, {'@': 268}), 20: (1, {'@': 268}), 61: (1, {'@': 268}), 62: (1, {'@': 268}), 63: (1, {'@': 268})}, 635: {24: (0, 748)}, 636: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 22), 9: (0, 419), 10: (0, 421), 38: (0, 346), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488), 37: (1, {'@': 168})}, 637: {40: (0, 614)}, 638: {50: (1, {'@': 142}), 56: (1, {'@': 142}), 47: (1, {'@': 142}), 43: (1, {'@': 142}), 57: (1, {'@': 142}), 41: (1, {'@': 142}), 54: (1, {'@': 142}), 64: (1, {'@': 142}), 51: (1, {'@': 142}), 49: (1, {'@': 142}), 48: (1, {'@': 142}), 59: (1, {'@': 142}), 1: (1, {'@': 142}), 42: (1, {'@': 142}), 18: (1, {'@': 142}), 40: (1, {'@': 142}), 55: (1, {'@': 142}), 44: (1, {'@': 142}), 53: (1, {'@': 142}), 46: (1, {'@': 142}), 34: (1, {'@': 142}), 36: (1, {'@': 142}), 35: (1, {'@': 142}), 37: (1, {'@': 142}), 58: (1, {'@': 142}), 33: (1, {'@': 142}), 60: (1, {'@': 142}), 24: (1, {'@': 142}), 20: (1, {'@': 142}), 61: (1, {'@': 142}), 62: (1, {'@': 142}), 63: (1, {'@': 142})}, 639: {50: (1, {'@': 146}), 56: (1, {'@': 146}), 47: (1, {'@': 146}), 43: (1, {'@': 146}), 57: (1, {'@': 146}), 41: (1, {'@': 146}), 54: (1, {'@': 146}), 64: (1, {'@': 146}), 51: (1, {'@': 146}), 49: (1, {'@': 146}), 48: (1, {'@': 146}), 59: (1, {'@': 146}), 1: (1, {'@': 146}), 42: (1, {'@': 146}), 18: (1, {'@': 146}), 40: (1, {'@': 146}), 55: (1, {'@': 146}), 44: (1, {'@': 146}), 53: (1, {'@': 146}), 46: (1, {'@': 146}), 34: (1, {'@': 146}), 36: (1, {'@': 146}), 35: (1, {'@': 146}), 37: (1, {'@': 146}), 58: (1, {'@': 146}), 33: (1, {'@': 146}), 60: (1, {'@': 146}), 24: (1, {'@': 146}), 20: (1, {'@': 146}), 61: (1, {'@': 146}), 62: (1, {'@': 146}), 63: (1, {'@': 146})}, 640: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 40: (0, 141), 44: (0, 425), 36: (0, 509), 45: (0, 455), 38: (0, 147), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 641: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 24: (0, 744), 38: (0, 746)}, 642: {35: (0, 515), 34: (0, 491), 33: (0, 87), 39: (0, 497), 38: (0, 99), 58: (0, 103), 36: (0, 509)}, 643: {50: (1, {'@': 262}), 56: (1, {'@': 262}), 47: (1, {'@': 262}), 43: (1, {'@': 262}), 57: (1, {'@': 262}), 41: (1, {'@': 262}), 54: (1, {'@': 262}), 64: (1, {'@': 262}), 51: (1, {'@': 262}), 49: (1, {'@': 262}), 48: (1, {'@': 262}), 59: (1, {'@': 262}), 1: (1, {'@': 262}), 42: (1, {'@': 262}), 18: (1, {'@': 262}), 40: (1, {'@': 262}), 55: (1, {'@': 262}), 44: (1, {'@': 262}), 53: (1, {'@': 262}), 46: (1, {'@': 262}), 34: (1, {'@': 262}), 36: (1, {'@': 262}), 35: (1, {'@': 262}), 37: (1, {'@': 262}), 58: (1, {'@': 262}), 33: (1, {'@': 262}), 60: (1, {'@': 262}), 24: (1, {'@': 262}), 20: (1, {'@': 262}), 61: (1, {'@': 262}), 62: (1, {'@': 262}), 63: (1, {'@': 262})}, 644: {50: (1, {'@': 261}), 56: (1, {'@': 261}), 47: (1, {'@': 261}), 43: (1, {'@': 261}), 57: (1, {'@': 261}), 41: (1, {'@': 261}), 54: (1, {'@': 261}), 64: (1, {'@': 261}), 51: (1, {'@': 261}), 49: (1, {'@': 261}), 48: (1, {'@': 261}), 59: (1, {'@': 261}), 1: (1, {'@': 261}), 42: (1, {'@': 261}), 18: (1, {'@': 261}), 40: (1, {'@': 261}), 55: (1, {'@': 261}), 44: (1, {'@': 261}), 53: (1, {'@': 261}), 46: (1, {'@': 261}), 34: (1, {'@': 261}), 36: (1, {'@': 261}), 35: (1, {'@': 261}), 37: (1, {'@': 261}), 58: (1, {'@': 261}), 33: (1, {'@': 261}), 60: (1, {'@': 261}), 24: (1, {'@': 261}), 20: (1, {'@': 261}), 61: (1, {'@': 261}), 62: (1, {'@': 261}), 63: (1, {'@': 261})}, 645: {50: (1, {'@': 162}), 56: (1, {'@': 162}), 47: (1, {'@': 162}), 43: (1, {'@': 162}), 57: (1, {'@': 162}), 41: (1, {'@': 162}), 54: (1, {'@': 162}), 64: (1, {'@': 162}), 51: (1, {'@': 162}), 49: (1, {'@': 162}), 48: (1, {'@': 162}), 59: (1, {'@': 162}), 1: (1, {'@': 162}), 42: (1, {'@': 162}), 18: (1, {'@': 162}), 40: (1, {'@': 162}), 55: (1, {'@': 162}), 44: (1, {'@': 162}), 53: (1, {'@': 162}), 46: (1, {'@': 162}), 34: (1, {'@': 162}), 36: (1, {'@': 162}), 35: (1, {'@': 162}), 37: (1, {'@': 162}), 58: (1, {'@': 162}), 33: (1, {'@': 162}), 60: (1, {'@': 162}), 24: (1, {'@': 162}), 20: (1, {'@': 162}), 61: (1, {'@': 162}), 62: (1, {'@': 162}), 63: (1, {'@': 162})}, 646: {0: (0, 53), 8: (0, 669), 2: (0, 62), 39: (0, 497), 6: (0, 530), 4: (0, 520), 36: (0, 509), 7: (0, 535), 1: (0, 61), 9: (0, 419), 14: (0, 431), 38: (0, 682), 15: (0, 433), 18: (0, 512), 19: (0, 446), 20: (0, 519), 34: (0, 491), 73: (0, 677), 22: (0, 453), 23: (0, 457), 16: (0, 436), 25: (0, 462), 37: (0, 647), 26: (0, 463), 35: (0, 515), 30: (0, 480), 32: (0, 488), 3: (0, 516), 5: (0, 525), 10: (0, 421), 11: (0, 424), 12: (0, 427), 17: (0, 439), 21: (0, 450), 27: (0, 468), 28: (0, 472), 29: (0, 476), 31: (0, 484)}, 647: {50: (1, {'@': 163}), 56: (1, {'@': 163}), 47: (1, {'@': 163}), 43: (1, {'@': 163}), 57: (1, {'@': 163}), 41: (1, {'@': 163}), 54: (1, {'@': 163}), 64: (1, {'@': 163}), 51: (1, {'@': 163}), 49: (1, {'@': 163}), 48: (1, {'@': 163}), 59: (1, {'@': 163}), 1: (1, {'@': 163}), 42: (1, {'@': 163}), 18: (1, {'@': 163}), 40: (1, {'@': 163}), 55: (1, {'@': 163}), 44: (1, {'@': 163}), 53: (1, {'@': 163}), 46: (1, {'@': 163}), 34: (1, {'@': 163}), 36: (1, {'@': 163}), 35: (1, {'@': 163}), 37: (1, {'@': 163}), 58: (1, {'@': 163}), 33: (1, {'@': 163}), 60: (1, {'@': 163}), 24: (1, {'@': 163}), 20: (1, {'@': 163}), 61: (1, {'@': 163}), 62: (1, {'@': 163}), 63: (1, {'@': 163})}, 648: {38: (0, 605), 35: (0, 515), 65: (0, 612), 34: (0, 491), 61: (0, 556), 39: (0, 497), 24: (0, 619), 36: (0, 509)}, 649: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 606), 36: (0, 509), 24: (0, 644)}, 650: {37: (0, 654)}, 651: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 8: (0, 22), 9: (0, 419), 58: (0, 94), 10: (0, 421), 11: (0, 424), 12: (0, 427), 38: (0, 114), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 652: {24: (0, 569)}, 653: {24: (0, 742)}, 654: {50: (1, {'@': 93}), 56: (1, {'@': 93}), 47: (1, {'@': 93}), 43: (1, {'@': 93}), 57: (1, {'@': 93}), 41: (1, {'@': 93}), 54: (1, {'@': 93}), 64: (1, {'@': 93}), 51: (1, {'@': 93}), 49: (1, {'@': 93}), 48: (1, {'@': 93}), 59: (1, {'@': 93}), 1: (1, {'@': 93}), 42: (1, {'@': 93}), 18: (1, {'@': 93}), 40: (1, {'@': 93}), 55: (1, {'@': 93}), 44: (1, {'@': 93}), 53: (1, {'@': 93}), 46: (1, {'@': 93}), 34: (1, {'@': 93}), 36: (1, {'@': 93}), 35: (1, {'@': 93}), 37: (1, {'@': 93}), 58: (1, {'@': 93}), 33: (1, {'@': 93}), 60: (1, {'@': 93}), 24: (1, {'@': 93}), 20: (1, {'@': 93}), 61: (1, {'@': 93}), 62: (1, {'@': 93}), 63: (1, {'@': 93})}, 655: {50: (1, {'@': 266}), 56: (1, {'@': 266}), 47: (1, {'@': 266}), 43: (1, {'@': 266}), 57: (1, {'@': 266}), 41: (1, {'@': 266}), 54: (1, {'@': 266}), 64: (1, {'@': 266}), 51: (1, {'@': 266}), 49: (1, {'@': 266}), 48: (1, {'@': 266}), 59: (1, {'@': 266}), 1: (1, {'@': 266}), 42: (1, {'@': 266}), 18: (1, {'@': 266}), 40: (1, {'@': 266}), 55: (1, {'@': 266}), 44: (1, {'@': 266}), 53: (1, {'@': 266}), 46: (1, {'@': 266}), 34: (1, {'@': 266}), 36: (1, {'@': 266}), 35: (1, {'@': 266}), 37: (1, {'@': 266}), 58: (1, {'@': 266}), 33: (1, {'@': 266}), 60: (1, {'@': 266}), 24: (1, {'@': 266}), 20: (1, {'@': 266}), 61: (1, {'@': 266}), 62: (1, {'@': 266}), 63: (1, {'@': 266})}, 656: {0: (0, 53), 1: (0, 61), 8: (0, 222), 2: (0, 62), 3: (0, 516), 39: (0, 497), 4: (0, 520), 5: (0, 525), 6: (0, 530), 36: (0, 509), 7: (0, 535), 38: (0, 383), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 34: (0, 491), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 35: (0, 515), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 657: {35: (0, 515), 24: (0, 34), 65: (0, 49), 34: (0, 491), 39: (0, 497), 36: (0, 509), 61: (0, 556), 38: (0, 51)}, 658: {24: (0, 65)}, 659: {35: (0, 515), 37: (0, 559), 34: (0, 491), 38: (0, 621), 39: (0, 497), 36: (0, 509)}, 660: {50: (1, {'@': 197}), 56: (1, {'@': 197}), 47: (1, {'@': 197}), 43: (1, {'@': 197}), 57: (1, {'@': 197}), 41: (1, {'@': 197}), 54: (1, {'@': 197}), 64: (1, {'@': 197}), 51: (1, {'@': 197}), 49: (1, {'@': 197}), 48: (1, {'@': 197}), 59: (1, {'@': 197}), 1: (1, {'@': 197}), 42: (1, {'@': 197}), 18: (1, {'@': 197}), 40: (1, {'@': 197}), 55: (1, {'@': 197}), 44: (1, {'@': 197}), 53: (1, {'@': 197}), 46: (1, {'@': 197}), 34: (1, {'@': 197}), 36: (1, {'@': 197}), 35: (1, {'@': 197}), 37: (1, {'@': 197}), 58: (1, {'@': 197}), 33: (1, {'@': 197}), 60: (1, {'@': 197}), 24: (1, {'@': 197}), 20: (1, {'@': 197}), 61: (1, {'@': 197}), 62: (1, {'@': 197}), 63: (1, {'@': 197})}, 661: {41: (0, 510), 43: (0, 423), 54: (0, 218), 49: (0, 487), 44: (0, 425), 51: (0, 199), 45: (0, 455), 46: (0, 442), 52: (0, 203), 53: (0, 214), 55: (0, 224), 47: (0, 452), 48: (0, 440), 42: (0, 536), 50: (0, 270), 18: (0, 277), 58: (1, {'@': 414}), 34: (1, {'@': 414}), 35: (1, {'@': 414}), 36: (1, {'@': 414}), 24: (1, {'@': 414})}, 662: {1: (1, {'@': 393}), 15: (1, {'@': 393}), 6: (1, {'@': 393}), 10: (1, {'@': 393}), 18: (1, {'@': 393}), 34: (1, {'@': 393}), 36: (1, {'@': 393}), 35: (1, {'@': 393}), 9: (1, {'@': 393}), 32: (1, {'@': 393}), 17: (1, {'@': 393}), 2: (1, {'@': 393}), 20: (1, {'@': 393})}, 663: {58: (0, 168)}, 664: {66: (0, 631)}, 665: {24: (0, 724)}, 666: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 702), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 667: {4: (0, 562), 20: (0, 519)}, 668: {50: (1, {'@': 137}), 56: (1, {'@': 137}), 47: (1, {'@': 137}), 43: (1, {'@': 137}), 57: (1, {'@': 137}), 41: (1, {'@': 137}), 54: (1, {'@': 137}), 64: (1, {'@': 137}), 51: (1, {'@': 137}), 49: (1, {'@': 137}), 48: (1, {'@': 137}), 59: (1, {'@': 137}), 1: (1, {'@': 137}), 42: (1, {'@': 137}), 18: (1, {'@': 137}), 40: (1, {'@': 137}), 55: (1, {'@': 137}), 44: (1, {'@': 137}), 53: (1, {'@': 137}), 46: (1, {'@': 137}), 34: (1, {'@': 137}), 36: (1, {'@': 137}), 35: (1, {'@': 137}), 37: (1, {'@': 137}), 58: (1, {'@': 137}), 33: (1, {'@': 137}), 60: (1, {'@': 137}), 24: (1, {'@': 137}), 20: (1, {'@': 137}), 61: (1, {'@': 137}), 62: (1, {'@': 137}), 63: (1, {'@': 137})}, 669: {33: (0, 96), 41: (0, 510), 85: (0, 152), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 38: (0, 1), 62: (0, 2), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 55: (0, 224), 42: (0, 536), 50: (0, 270), 18: (0, 277), 37: (1, {'@': 178})}, 670: {0: (0, 53), 8: (0, 690), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 671: {50: (1, {'@': 248}), 56: (1, {'@': 248}), 47: (1, {'@': 248}), 43: (1, {'@': 248}), 57: (1, {'@': 248}), 41: (1, {'@': 248}), 54: (1, {'@': 248}), 64: (1, {'@': 248}), 51: (1, {'@': 248}), 49: (1, {'@': 248}), 48: (1, {'@': 248}), 59: (1, {'@': 248}), 1: (1, {'@': 248}), 42: (1, {'@': 248}), 18: (1, {'@': 248}), 40: (1, {'@': 248}), 55: (1, {'@': 248}), 44: (1, {'@': 248}), 53: (1, {'@': 248}), 46: (1, {'@': 248}), 34: (1, {'@': 248}), 36: (1, {'@': 248}), 35: (1, {'@': 248}), 37: (1, {'@': 248}), 58: (1, {'@': 248}), 33: (1, {'@': 248}), 60: (1, {'@': 248}), 24: (1, {'@': 248}), 20: (1, {'@': 248}), 61: (1, {'@': 248}), 62: (1, {'@': 248}), 63: (1, {'@': 248})}, 672: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 420), 24: (0, 422), 36: (0, 509)}, 673: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 252), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 428), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 13: (0, 5), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 24: (0, 109), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 674: {50: (1, {'@': 314}), 56: (1, {'@': 314}), 47: (1, {'@': 314}), 43: (1, {'@': 314}), 57: (1, {'@': 314}), 41: (1, {'@': 314}), 54: (1, {'@': 314}), 64: (1, {'@': 314}), 51: (1, {'@': 314}), 49: (1, {'@': 314}), 48: (1, {'@': 314}), 59: (1, {'@': 314}), 1: (1, {'@': 314}), 42: (1, {'@': 314}), 18: (1, {'@': 314}), 40: (1, {'@': 314}), 55: (1, {'@': 314}), 44: (1, {'@': 314}), 53: (1, {'@': 314}), 46: (1, {'@': 314}), 34: (1, {'@': 314}), 36: (1, {'@': 314}), 35: (1, {'@': 314}), 37: (1, {'@': 314}), 58: (1, {'@': 314}), 33: (1, {'@': 314}), 60: (1, {'@': 314}), 24: (1, {'@': 314}), 20: (1, {'@': 314}), 61: (1, {'@': 314}), 62: (1, {'@': 314}), 63: (1, {'@': 314})}, 675: {50: (1, {'@': 232}), 56: (1, {'@': 232}), 47: (1, {'@': 232}), 43: (1, {'@': 232}), 57: (1, {'@': 232}), 41: (1, {'@': 232}), 54: (1, {'@': 232}), 64: (1, {'@': 232}), 51: (1, {'@': 232}), 49: (1, {'@': 232}), 48: (1, {'@': 232}), 59: (1, {'@': 232}), 1: (1, {'@': 232}), 42: (1, {'@': 232}), 18: (1, {'@': 232}), 40: (1, {'@': 232}), 55: (1, {'@': 232}), 44: (1, {'@': 232}), 53: (1, {'@': 232}), 46: (1, {'@': 232}), 34: (1, {'@': 232}), 36: (1, {'@': 232}), 35: (1, {'@': 232}), 37: (1, {'@': 232}), 58: (1, {'@': 232}), 33: (1, {'@': 232}), 60: (1, {'@': 232}), 24: (1, {'@': 232}), 20: (1, {'@': 232}), 61: (1, {'@': 232}), 62: (1, {'@': 232}), 63: (1, {'@': 232})}, 676: {50: (1, {'@': 150}), 56: (1, {'@': 150}), 47: (1, {'@': 150}), 43: (1, {'@': 150}), 57: (1, {'@': 150}), 41: (1, {'@': 150}), 54: (1, {'@': 150}), 64: (1, {'@': 150}), 51: (1, {'@': 150}), 49: (1, {'@': 150}), 48: (1, {'@': 150}), 59: (1, {'@': 150}), 1: (1, {'@': 150}), 42: (1, {'@': 150}), 18: (1, {'@': 150}), 40: (1, {'@': 150}), 55: (1, {'@': 150}), 44: (1, {'@': 150}), 53: (1, {'@': 150}), 46: (1, {'@': 150}), 34: (1, {'@': 150}), 36: (1, {'@': 150}), 35: (1, {'@': 150}), 37: (1, {'@': 150}), 58: (1, {'@': 150}), 33: (1, {'@': 150}), 60: (1, {'@': 150}), 24: (1, {'@': 150}), 20: (1, {'@': 150}), 61: (1, {'@': 150}), 62: (1, {'@': 150}), 63: (1, {'@': 150})}, 677: {35: (0, 515), 38: (0, 258), 34: (0, 491), 39: (0, 497), 37: (0, 279), 36: (0, 509)}, 678: {38: (0, 324), 35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 392}), 15: (1, {'@': 392}), 6: (1, {'@': 392}), 10: (1, {'@': 392}), 18: (1, {'@': 392}), 9: (1, {'@': 392}), 32: (1, {'@': 392}), 17: (1, {'@': 392}), 2: (1, {'@': 392}), 20: (1, {'@': 392})}, 679: {38: (0, 466), 41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 40: (0, 6), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 680: {1: (1, {'@': 401}), 15: (1, {'@': 401}), 6: (1, {'@': 401}), 10: (1, {'@': 401}), 18: (1, {'@': 401}), 34: (1, {'@': 401}), 36: (1, {'@': 401}), 35: (1, {'@': 401}), 9: (1, {'@': 401}), 32: (1, {'@': 401}), 17: (1, {'@': 401}), 2: (1, {'@': 401}), 20: (1, {'@': 401})}, 681: {24: (0, 418)}, 682: {37: (0, 645)}, 683: {50: (1, {'@': 195}), 56: (1, {'@': 195}), 47: (1, {'@': 195}), 43: (1, {'@': 195}), 57: (1, {'@': 195}), 41: (1, {'@': 195}), 54: (1, {'@': 195}), 64: (1, {'@': 195}), 51: (1, {'@': 195}), 49: (1, {'@': 195}), 48: (1, {'@': 195}), 59: (1, {'@': 195}), 1: (1, {'@': 195}), 42: (1, {'@': 195}), 18: (1, {'@': 195}), 40: (1, {'@': 195}), 55: (1, {'@': 195}), 44: (1, {'@': 195}), 53: (1, {'@': 195}), 46: (1, {'@': 195}), 34: (1, {'@': 195}), 36: (1, {'@': 195}), 35: (1, {'@': 195}), 37: (1, {'@': 195}), 58: (1, {'@': 195}), 33: (1, {'@': 195}), 60: (1, {'@': 195}), 24: (1, {'@': 195}), 20: (1, {'@': 195}), 61: (1, {'@': 195}), 62: (1, {'@': 195}), 63: (1, {'@': 195})}, 684: {63: (0, 155), 41: (0, 510), 42: (0, 536), 43: (0, 423), 44: (0, 425), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 54: (0, 218), 49: (0, 487), 51: (0, 199), 52: (0, 203), 53: (0, 214), 55: (0, 224), 50: (0, 270), 18: (0, 277)}, 685: {0: (0, 53), 1: (0, 61), 2: (0, 62), 3: (0, 516), 4: (0, 520), 5: (0, 525), 6: (0, 530), 7: (0, 535), 8: (0, 263), 9: (0, 419), 10: (0, 421), 11: (0, 424), 12: (0, 427), 14: (0, 431), 15: (0, 433), 16: (0, 436), 17: (0, 439), 18: (0, 512), 19: (0, 446), 20: (0, 519), 21: (0, 450), 22: (0, 453), 23: (0, 457), 25: (0, 462), 26: (0, 463), 27: (0, 468), 28: (0, 472), 29: (0, 476), 30: (0, 480), 31: (0, 484), 32: (0, 488)}, 686: {50: (1, {'@': 259}), 56: (1, {'@': 259}), 47: (1, {'@': 259}), 43: (1, {'@': 259}), 57: (1, {'@': 259}), 41: (1, {'@': 259}), 54: (1, {'@': 259}), 64: (1, {'@': 259}), 51: (1, {'@': 259}), 49: (1, {'@': 259}), 48: (1, {'@': 259}), 59: (1, {'@': 259}), 1: (1, {'@': 259}), 42: (1, {'@': 259}), 18: (1, {'@': 259}), 40: (1, {'@': 259}), 55: (1, {'@': 259}), 44: (1, {'@': 259}), 53: (1, {'@': 259}), 46: (1, {'@': 259}), 34: (1, {'@': 259}), 36: (1, {'@': 259}), 35: (1, {'@': 259}), 37: (1, {'@': 259}), 58: (1, {'@': 259}), 33: (1, {'@': 259}), 60: (1, {'@': 259}), 24: (1, {'@': 259}), 20: (1, {'@': 259}), 61: (1, {'@': 259}), 62: (1, {'@': 259}), 63: (1, {'@': 259})}, 687: {1: (1, {'@': 57}), 15: (1, {'@': 57}), 6: (1, {'@': 57}), 10: (1, {'@': 57}), 18: (1, {'@': 57}), 9: (1, {'@': 57}), 32: (1, {'@': 57}), 24: (1, {'@': 57}), 17: (1, {'@': 57}), 2: (1, {'@': 57}), 20: (1, {'@': 57})}, 688: {24: (0, 674)}, 689: {35: (0, 515), 34: (0, 491), 39: (0, 497), 36: (0, 509), 38: (0, 703), 1: (1, {'@': 362}), 15: (1, {'@': 362}), 6: (1, {'@': 362}), 10: (1, {'@': 362}), 18: (1, {'@': 362}), 9: (1, {'@': 362}), 32: (1, {'@': 362}), 17: (1, {'@': 362}), 2: (1, {'@': 362}), 20: (1, {'@': 362})}, 690: {41: (0, 510), 34: (0, 491), 42: (0, 536), 43: (0, 423), 39: (0, 497), 44: (0, 425), 40: (0, 113), 38: (0, 88), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 691: {35: (0, 515), 34: (0, 491), 61: (0, 556), 39: (0, 497), 38: (0, 432), 36: (0, 509), 65: (0, 434), 24: (0, 438)}, 692: {40: (0, 377)}, 693: {1: (1, {'@': 341}), 15: (1, {'@': 341}), 6: (1, {'@': 341}), 10: (1, {'@': 341}), 18: (1, {'@': 341}), 34: (1, {'@': 341}), 36: (1, {'@': 341}), 35: (1, {'@': 341}), 9: (1, {'@': 341}), 32: (1, {'@': 341}), 17: (1, {'@': 341}), 2: (1, {'@': 341}), 20: (1, {'@': 341})}, 694: {1: (1, {'@': 383}), 15: (1, {'@': 383}), 6: (1, {'@': 383}), 10: (1, {'@': 383}), 18: (1, {'@': 383}), 34: (1, {'@': 383}), 36: (1, {'@': 383}), 35: (1, {'@': 383}), 9: (1, {'@': 383}), 32: (1, {'@': 383}), 17: (1, {'@': 383}), 2: (1, {'@': 383}), 20: (1, {'@': 383})}, 695: {1: (1, {'@': 335}), 15: (1, {'@': 335}), 6: (1, {'@': 335}), 10: (1, {'@': 335}), 18: (1, {'@': 335}), 34: (1, {'@': 335}), 36: (1, {'@': 335}), 35: (1, {'@': 335}), 9: (1, {'@': 335}), 32: (1, {'@': 335}), 17: (1, {'@': 335}), 2: (1, {'@': 335}), 20: (1, {'@': 335})}, 696: {38: (0, 120), 41: (0, 510), 34: (0, 491), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 40: (0, 711), 54: (0, 218), 49: (0, 487), 50: (0, 270), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 42: (0, 536), 55: (0, 224), 18: (0, 277)}, 697: {1: (1, {'@': 385}), 15: (1, {'@': 385}), 6: (1, {'@': 385}), 10: (1, {'@': 385}), 18: (1, {'@': 385}), 34: (1, {'@': 385}), 36: (1, {'@': 385}), 35: (1, {'@': 385}), 9: (1, {'@': 385}), 32: (1, {'@': 385}), 17: (1, {'@': 385}), 2: (1, {'@': 385}), 20: (1, {'@': 385})}, 698: {1: (1, {'@': 337}), 15: (1, {'@': 337}), 6: (1, {'@': 337}), 10: (1, {'@': 337}), 18: (1, {'@': 337}), 34: (1, {'@': 337}), 36: (1, {'@': 337}), 35: (1, {'@': 337}), 9: (1, {'@': 337}), 32: (1, {'@': 337}), 17: (1, {'@': 337}), 2: (1, {'@': 337}), 20: (1, {'@': 337})}, 699: {1: (1, {'@': 351}), 15: (1, {'@': 351}), 6: (1, {'@': 351}), 10: (1, {'@': 351}), 18: (1, {'@': 351}), 34: (1, {'@': 351}), 36: (1, {'@': 351}), 35: (1, {'@': 351}), 9: (1, {'@': 351}), 32: (1, {'@': 351}), 17: (1, {'@': 351}), 2: (1, {'@': 351}), 20: (1, {'@': 351})}, 700: {1: (1, {'@': 347}), 15: (1, {'@': 347}), 6: (1, {'@': 347}), 10: (1, {'@': 347}), 18: (1, {'@': 347}), 34: (1, {'@': 347}), 36: (1, {'@': 347}), 35: (1, {'@': 347}), 9: (1, {'@': 347}), 32: (1, {'@': 347}), 17: (1, {'@': 347}), 2: (1, {'@': 347}), 20: (1, {'@': 347})}, 701: {1: (1, {'@': 333}), 15: (1, {'@': 333}), 6: (1, {'@': 333}), 10: (1, {'@': 333}), 18: (1, {'@': 333}), 34: (1, {'@': 333}), 36: (1, {'@': 333}), 35: (1, {'@': 333}), 9: (1, {'@': 333}), 32: (1, {'@': 333}), 17: (1, {'@': 333}), 2: (1, {'@': 333}), 20: (1, {'@': 333})}, 702: {41: (0, 510), 34: (0, 491), 42: (0, 536), 39: (0, 497), 43: (0, 423), 44: (0, 425), 36: (0, 509), 38: (0, 392), 45: (0, 455), 46: (0, 442), 47: (0, 452), 48: (0, 440), 49: (0, 487), 50: (0, 270), 40: (0, 394), 51: (0, 199), 35: (0, 515), 52: (0, 203), 53: (0, 214), 54: (0, 218), 55: (0, 224), 18: (0, 277)}, 703: {1: (1, {'@': 361}), 15: (1, {'@': 361}), 6: (1, {'@': 361}), 10: (1, {'@': 361}), 18: (1, {'@': 361}), 34: (1, {'@': 361}), 36: (1, {'@': 361}), 35: (1, {'@': 361}), 9: (1, {'@': 361}), 32: (1, {'@': 361}), 17: (1, {'@': 361}), 2: (1, {'@': 361}), 20: (1, {'@': 361})}, 704: {40: (0, 376)}, 705: {50: (1, {'@': 307}), 56: (1, {'@': 307}), 47: (1, {'@': 307}), 43: (1, {'@': 307}), 57: (1, {'@': 307}), 41: (1, {'@': 307}), 54: (1, {'@': 307}), 64: (1, {'@': 307}), 51: (1, {'@': 307}), 49: (1, {'@': 307}), 48: (1, {'@': 307}), 59: (1, {'@': 307}), 1: (1, {'@': 307}), 42: (1, {'@': 307}), 18: (1, {'@': 307}), 40: (1, {'@': 307}), 55: (1, {'@': 307}), 44: (1, {'@': 307}), 53: (1, {'@': 307}), 46: (1, {'@': 307}), 34: (1, {'@': 307}), 36: (1, {'@': 307}), 35: (1, {'@': 307}), 37: (1, {'@': 307}), 58: (1, {'@': 307}), 33: (1, {'@': 307}), 60: (1, {'@': 307}), 24: (1, {'@': 307}), 20: (1, {'@': 307}), 61: (1, {'@': 307}), 62: (1, {'@': 307}), 63: (1, {'@': 307})}, 706: {24: (0, 505)}, 707: {35: (0, 515), 38: (0, 387), 34: (0, 491), 39: (0, 497), 36: (0, 509), 1: (1, {'@': 344}), 15: (1, {'@': 344}), 6: (1, {'@': 344}), 10: (1, {'@': 344}), 18: (1, {'@': 344}), 9: (1, {'@': 344}), 32: (1, {'@': 344}), 17: (1, {'@': 344}), 2: (1, {'@': 344}), 20: (1, {'@': 344})}, 708: {50: (1, {'@': 221}), 56: (1, {'@': 221}), 47: (1, {'@': 221}), 43: (1, {'@': 221}), 57: (1, {'@': 221}), 41: (1, {'@': 221}), 54: (1, {'@': 221}), 64: (1, {'@': 221}), 51: (1, {'@': 221}), 49: (1, {'@': 221}), 48: (1, {'@': 221}), 59: (1, {'@': 221}), 1: (1, {'@': 221}), 42: (1, {'@': 221}), 18: (1, {'@': 221}), 40: (1, {'@': 221}), 55: (1, {'@': 221}), 44: (1, {'@': 221}), 53: (1, {'@': 221}), 46: (1, {'@': 221}), 34: (1, {'@': 221}), 36: (1, {'@': 221}), 35: (1, {'@': 221}), 37: (1, {'@': 221}), 58: (1, {'@': 221}), 33: (1, {'@': 221}), 60: (1, {'@': 221}), 24: (1, {'@': 221}), 20: (1, {'@': 221}), 61: (1, {'@': 221}), 62: (1, {'@': 221}), 63: (1, {'@': 221})}, 709: {50: (1, {'@': 306}), 56: (1, {'@': 306}), 47: (1, {'@': 306}), 43: (1, {'@': 306}), 57: (1, {'@': 306}), 41: (1, {'@': 306}), 54: (1, {'@': 306}), 64: (1, {'@': 306}), 51: (1, {'@': 306}), 49: (1, {'@': 306}), 48: (1, {'@': 306}), 59: (1, {'@': 306}), 1: (1, {'@': 306}), 42: (1, {'@': 306}), 18: (1, {'@': 306}), 40: (1, {'@': 306}), 55: (1, {'@': 306}), 44: (1, {'@': 306}), 53: (1, {'@': 306}), 46: (1, {'@': 306}), 34: (1, {'@': 306}), 36: (1, {'@': 306}), 35: (1, {'@': 306}), 37: (1, {'@': 306}), 58: (1, {'@': 306}), 33: (1, {'@': 306}), 60: (1, {'@': 306}), 24: (1, {'@': 306}), 20: (1, {'@': 306}), 61: (1, {'@': 306}), 62: (1, {'@': 306}), 63: (1, {'@': 306})}, 710: {50: (1, {'@': 309}), 56: (1, {'@': 309}), 47: (1, {'@': 309}), 43: (1, {'@': 309}), 57: (1, {'@': 309}), 41: (1, {'@': 309}), 54: (1, {'@': 309}), 64: (1, {'@': 309}), 51: (1, {'@': 309}), 49: (1, {'@': 309}), 48: (1, {'@': 309}), 59: (1, {'@': 309}), 1: (1, {'@': 309}), 42: (1, {'@': 309}), 18: (1, {'@': 309}), 40: (1, {'@': 309}), 55: (1, {'@': 309}), 44: (1, {'@': 309}), 53: (1, {'@': 309}), 46: (1, {'@': 309}), 34: (1, {'@': 309}), 36: (1, {'@': 309}), 35: (1, {'@': 309}), 37: (1, {'@': 309}), 58: (1, {'@': 309}), 33: (1, {'@': 309}), 60: (1, {'@': 309}), 24: (1, {'@': 309}), 20: (1, {'@': 309}), 61: (1, {'@': 309}), 62: (1, {'@': 309}), 63: (1, {'@': 309})}, 711: {35: (0, 515), 34: (0, 491), 39: (0, 497), 38: (0, 389), 36: (0, 509), 1: (1, {'@': 340}), 15: (1, {'@': 340}), 6: (1, {'@': 340}), 10: (1, {'@': 340}), 18: (1, {'@': 340}), 9: (1, {'@': 340}), 32: (1, {'@': 340}), 17: (1, {'@': 340}), 2: (1, {'@': 340}), 20: (1, {'@': 340})}, 712: {50: (1, {'@': 312}), 56: (1, {'@': 312}), 47: (1, {'@': 312}), 43: (1, {'@': 312}), 57: (1, {'@': 312}), 41: (1, {'@': 312}), 54: (1, {'@': 312}), 64: (1, {'@': 312}), 51: (1, {'@': 312}), 49: (1, {'@': 312}), 48: (1, {'@': 312}), 59: (1, {'@': 312}), 1: (1, {'@': 312}), 42: (1, {'@': 312}), 18: (1, {'@': 312}), 40: (1, {'@': 312}), 55: (1, {'@': 312}), 44: (1, {'@': 312}), 53: (1, {'@': 312}), 46: (1, {'@': 312}), 34: (1, {'@': 312}), 36: (1, {'@': 312}), 35: (1, {'@': 312}), 37: (1, {'@': 312}), 58: (1, {'@': 312}), 33: (1, {'@': 312}), 60: (1, {'@': 312}), 24: (1, {'@': 312}), 20: (1, {'@': 312}), 61: (1, {'@': 312}), 62: (1, {'@': 312}), 63: (1, {'@': 312})}, 713: {50: (1, {'@': 286}), 56: (1, {'@': 286}), 47: (1, {'@': 286}), 43: (1, {'@': 286}), 57: (1, {'@': 286}), 41: (1, {'@': 286}), 54: (1, {'@': 286}), 64: (1, {'@': 286}), 51: (1, {'@': 286}), 49: (1, {'@': 286}), 48: (1, {'@': 286}), 59: (1, {'@': 286}), 1: (1, {'@': 286}), 42: (1, {'@': 286}), 18: (1, {'@': 286}), 40: (1, {'@': 286}), 55: (1, {'@': 286}), 44: (1, {'@': 286}), 53: (1, {'@': 286}), 46: (1, {'@': 286}), 34: (1, {'@': 286}), 36: (1, {'@': 286}), 35: (1, {'@': 286}), 37: (1, {'@': 286}), 58: (1, {'@': 286}), 33: (1, {'@': 286}), 60: (1, {'@': 286}), 24: (1, {'@': 286}), 20: (1, {'@': 286}), 61: (1, {'@': 286}), 62: (1, {'@': 286}), 63: (1, {'@': 286})}, 714: {50: (1, {'@': 285}), 56: (1, {'@': 285}), 47: (1, {'@': 285}), 43: (1, {'@': 285}), 57: (1, {'@': 285}), 41: (1, {'@': 285}), 54: (1, {'@': 285}), 64: (1, {'@': 285}), 51: (1, {'@': 285}), 49: (1, {'@': 285}), 48: (1, {'@': 285}), 59: (1, {'@': 285}), 1: (1, {'@': 285}), 42: (1, {'@': 285}), 18: (1, {'@': 285}), 40: (1, {'@': 285}), 55: (1, {'@': 285}), 44: (1, {'@': 285}), 53: (1, {'@': 285}), 46: (1, {'@': 285}), 34: (1, {'@': 285}), 36: (1, {'@': 285}), 35: (1, {'@': 285}), 37: (1, {'@': 285}), 58: (1, {'@': 285}), 33: (1, {'@': 285}), 60: (1, {'@': 285}), 24: (1, {'@': 285}), 20: (1, {'@': 285}), 61: (1, {'@': 285}), 62: (1, {'@': 285}), 63: (1, {'@': 285})}, 715: {1: (1, {'@': 357}), 15: (1, {'@': 357}), 6: (1, {'@': 357}), 10: (1, {'@': 357}), 18: (1, {'@': 357}), 34: (1, {'@': 357}), 36: (1, {'@': 357}), 35: (1, {'@': 357}), 9: (1, {'@': 357}), 32: (1, {'@': 357}), 17: (1, {'@': 357}), 2: (1, {'@': 357}), 20: (1, {'@': 357})}, 716: {24: (0, 717)}, 717: {50: (1, {'@': 284}), 56: (1, {'@': 284}), 47: (1, {'@': 284}), 43: (1, {'@': 284}), 57: (1, {'@': 284}), 41: (1, {'@': 284}), 54: (1, {'@': 284}), 64: (1, {'@': 284}), 51: (1, {'@': 284}), 49: (1, {'@': 284}), 48: (1, {'@': 284}), 59: (1, {'@': 284}), 1: (1, {'@': 284}), 42: (1, {'@': 284}), 18: (1, {'@': 284}), 40: (1, {'@': 284}), 55: (1, {'@': 284}), 44: (1, {'@': 284}), 53: (1, {'@': 284}), 46: (1, {'@': 284}), 34: (1, {'@': 284}), 36: (1, {'@': 284}), 35: (1, {'@': 284}), 37: (1, {'@': 284}), 58: (1, {'@': 284}), 33: (1, {'@': 284}), 60: (1, {'@': 284}), 24: (1, {'@': 284}), 20: (1, {'@': 284}), 61: (1, {'@': 284}), 62: (1, {'@': 284}), 63: (1, {'@': 284})}, 718: {50: (1, {'@': 282}), 56: (1, {'@': 282}), 47: (1, {'@': 282}), 43: (1, {'@': 282}), 57: (1, {'@': 282}), 41: (1, {'@': 282}), 54: (1, {'@': 282}), 64: (1, {'@': 282}), 51: (1, {'@': 282}), 49: (1, {'@': 282}), 48: (1, {'@': 282}), 59: (1, {'@': 282}), 1: (1, {'@': 282}), 42: (1, {'@': 282}), 18: (1, {'@': 282}), 40: (1, {'@': 282}), 55: (1, {'@': 282}), 44: (1, {'@': 282}), 53: (1, {'@': 282}), 46: (1, {'@': 282}), 34: (1, {'@': 282}), 36: (1, {'@': 282}), 35: (1, {'@': 282}), 37: (1, {'@': 282}), 58: (1, {'@': 282}), 33: (1, {'@': 282}), 60: (1, {'@': 282}), 24: (1, {'@': 282}), 20: (1, {'@': 282}), 61: (1, {'@': 282}), 62: (1, {'@': 282}), 63: (1, {'@': 282})}, 719: {50: (1, {'@': 279}), 56: (1, {'@': 279}), 47: (1, {'@': 279}), 43: (1, {'@': 279}), 57: (1, {'@': 279}), 41: (1, {'@': 279}), 54: (1, {'@': 279}), 64: (1, {'@': 279}), 51: (1, {'@': 279}), 49: (1, {'@': 279}), 48: (1, {'@': 279}), 59: (1, {'@': 279}), 1: (1, {'@': 279}), 42: (1, {'@': 279}), 18: (1, {'@': 279}), 40: (1, {'@': 279}), 55: (1, {'@': 279}), 44: (1, {'@': 279}), 53: (1, {'@': 279}), 46: (1, {'@': 279}), 34: (1, {'@': 279}), 36: (1, {'@': 279}), 35: (1, {'@': 279}), 37: (1, {'@': 279}), 58: (1, {'@': 279}), 33: (1, {'@': 279}), 60: (1, {'@': 279}), 24: (1, {'@': 279}), 20: (1, {'@': 279}), 61: (1, {'@': 279}), 62: (1, {'@': 279}), 63: (1, {'@': 279})}, 720: {24: (0, 726)}, 721: {24: (0, 143)}, 722: {35: (0, 515), 38: (0, 721), 34: (0, 491), 39: (0, 497), 24: (0, 723), 36: (0, 509)}, 723: {50: (1, {'@': 278}), 56: (1, {'@': 278}), 47: (1, {'@': 278}), 43: (1, {'@': 278}), 57: (1, {'@': 278}), 41: (1, {'@': 278}), 54: (1, {'@': 278}), 64: (1, {'@': 278}), 51: (1, {'@': 278}), 49: (1, {'@': 278}), 48: (1, {'@': 278}), 59: (1, {'@': 278}), 1: (1, {'@': 278}), 42: (1, {'@': 278}), 18: (1, {'@': 278}), 40: (1, {'@': 278}), 55: (1, {'@': 278}), 44: (1, {'@': 278}), 53: (1, {'@': 278}), 46: (1, {'@': 278}), 34: (1, {'@': 278}), 36: (1, {'@': 278}), 35: (1, {'@': 278}), 37: (1, {'@': 278}), 58: (1, {'@': 278}), 33: (1, {'@': 278}), 60: (1, {'@': 278}), 24: (1, {'@': 278}), 20: (1, {'@': 278}), 61: (1, {'@': 278}), 62: (1, {'@': 278}), 63: (1, {'@': 278})}, 724: {50: (1, {'@': 246}), 56: (1, {'@': 246}), 47: (1, {'@': 246}), 43: (1, {'@': 246}), 57: (1, {'@': 246}), 41: (1, {'@': 246}), 54: (1, {'@': 246}), 64: (1, {'@': 246}), 51: (1, {'@': 246}), 49: (1, {'@': 246}), 48: (1, {'@': 246}), 59: (1, {'@': 246}), 1: (1, {'@': 246}), 42: (1, {'@': 246}), 18: (1, {'@': 246}), 40: (1, {'@': 246}), 55: (1, {'@': 246}), 44: (1, {'@': 246}), 53: (1, {'@': 246}), 46: (1, {'@': 246}), 34: (1, {'@': 246}), 36: (1, {'@': 246}), 35: (1, {'@': 246}), 37: (1, {'@': 246}), 58: (1, {'@': 246}), 33: (1, {'@': 246}), 60: (1, {'@': 246}), 24: (1, {'@': 246}), 20: (1, {'@': 246}), 61: (1, {'@': 246}), 62: (1, {'@': 246}), 63: (1, {'@': 246})}, 725: {24: (0, 719)}, 726: {50: (1, {'@': 281}), 56: (1, {'@': 281}), 47: (1, {'@': 281}), 43: (1, {'@': 281}), 57: (1, {'@': 281}), 41: (1, {'@': 281}), 54: (1, {'@': 281}), 64: (1, {'@': 281}), 51: (1, {'@': 281}), 49: (1, {'@': 281}), 48: (1, {'@': 281}), 59: (1, {'@': 281}), 1: (1, {'@': 281}), 42: (1, {'@': 281}), 18: (1, {'@': 281}), 40: (1, {'@': 281}), 55: (1, {'@': 281}), 44: (1, {'@': 281}), 53: (1, {'@': 281}), 46: (1, {'@': 281}), 34: (1, {'@': 281}), 36: (1, {'@': 281}), 35: (1, {'@': 281}), 37: (1, {'@': 281}), 58: (1, {'@': 281}), 33: (1, {'@': 281}), 60: (1, {'@': 281}), 24: (1, {'@': 281}), 20: (1, {'@': 281}), 61: (1, {'@': 281}), 62: (1, {'@': 281}), 63: (1, {'@': 281})}, 727: {50: (1, {'@': 280}), 56: (1, {'@': 280}), 47: (1, {'@': 280}), 43: (1, {'@': 280}), 57: (1, {'@': 280}), 41: (1, {'@': 280}), 54: (1, {'@': 280}), 64: (1, {'@': 280}), 51: (1, {'@': 280}), 49: (1, {'@': 280}), 48: (1, {'@': 280}), 59: (1, {'@': 280}), 1: (1, {'@': 280}), 42: (1, {'@': 280}), 18: (1, {'@': 280}), 40: (1, {'@': 280}), 55: (1, {'@': 280}), 44: (1, {'@': 280}), 53: (1, {'@': 280}), 46: (1, {'@': 280}), 34: (1, {'@': 280}), 36: (1, {'@': 280}), 35: (1, {'@': 280}), 37: (1, {'@': 280}), 58: (1, {'@': 280}), 33: (1, {'@': 280}), 60: (1, {'@': 280}), 24: (1, {'@': 280}), 20: (1, {'@': 280}), 61: (1, {'@': 280}), 62: (1, {'@': 280}), 63: (1, {'@': 280})}, 728: {50: (1, {'@': 291}), 56: (1, {'@': 291}), 47: (1, {'@': 291}), 43: (1, {'@': 291}), 57: (1, {'@': 291}), 41: (1, {'@': 291}), 54: (1, {'@': 291}), 64: (1, {'@': 291}), 51: (1, {'@': 291}), 49: (1, {'@': 291}), 48: (1, {'@': 291}), 59: (1, {'@': 291}), 1: (1, {'@': 291}), 42: (1, {'@': 291}), 18: (1, {'@': 291}), 40: (1, {'@': 291}), 55: (1, {'@': 291}), 44: (1, {'@': 291}), 53: (1, {'@': 291}), 46: (1, {'@': 291}), 34: (1, {'@': 291}), 36: (1, {'@': 291}), 35: (1, {'@': 291}), 37: (1, {'@': 291}), 58: (1, {'@': 291}), 33: (1, {'@': 291}), 60: (1, {'@': 291}), 24: (1, {'@': 291}), 20: (1, {'@': 291}), 61: (1, {'@': 291}), 62: (1, {'@': 291}), 63: (1, {'@': 291})}, 729: {50: (1, {'@': 263}), 56: (1, {'@': 263}), 47: (1, {'@': 263}), 43: (1, {'@': 263}), 57: (1, {'@': 263}), 41: (1, {'@': 263}), 54: (1, {'@': 263}), 64: (1, {'@': 263}), 51: (1, {'@': 263}), 49: (1, {'@': 263}), 48: (1, {'@': 263}), 59: (1, {'@': 263}), 1: (1, {'@': 263}), 42: (1, {'@': 263}), 18: (1, {'@': 263}), 40: (1, {'@': 263}), 55: (1, {'@': 263}), 44: (1, {'@': 263}), 53: (1, {'@': 263}), 46: (1, {'@': 263}), 34: (1, {'@': 263}), 36: (1, {'@': 263}), 35: (1, {'@': 263}), 37: (1, {'@': 263}), 58: (1, {'@': 263}), 33: (1, {'@': 263}), 60: (1, {'@': 263}), 24: (1, {'@': 263}), 20: (1, {'@': 263}), 61: (1, {'@': 263}), 62: (1, {'@': 263}), 63: (1, {'@': 263})}, 730: {50: (1, {'@': 298}), 56: (1, {'@': 298}), 47: (1, {'@': 298}), 43: (1, {'@': 298}), 57: (1, {'@': 298}), 41: (1, {'@': 298}), 54: (1, {'@': 298}), 64: (1, {'@': 298}), 51: (1, {'@': 298}), 49: (1, {'@': 298}), 48: (1, {'@': 298}), 59: (1, {'@': 298}), 1: (1, {'@': 298}), 42: (1, {'@': 298}), 18: (1, {'@': 298}), 40: (1, {'@': 298}), 55: (1, {'@': 298}), 44: (1, {'@': 298}), 53: (1, {'@': 298}), 46: (1, {'@': 298}), 34: (1, {'@': 298}), 36: (1, {'@': 298}), 35: (1, {'@': 298}), 37: (1, {'@': 298}), 58: (1, {'@': 298}), 33: (1, {'@': 298}), 60: (1, {'@': 298}), 24: (1, {'@': 298}), 20: (1, {'@': 298}), 61: (1, {'@': 298}), 62: (1, {'@': 298}), 63: (1, {'@': 298})}, 731: {50: (1, {'@': 256}), 56: (1, {'@': 256}), 47: (1, {'@': 256}), 43: (1, {'@': 256}), 57: (1, {'@': 256}), 41: (1, {'@': 256}), 54: (1, {'@': 256}), 64: (1, {'@': 256}), 51: (1, {'@': 256}), 49: (1, {'@': 256}), 48: (1, {'@': 256}), 59: (1, {'@': 256}), 1: (1, {'@': 256}), 42: (1, {'@': 256}), 18: (1, {'@': 256}), 40: (1, {'@': 256}), 55: (1, {'@': 256}), 44: (1, {'@': 256}), 53: (1, {'@': 256}), 46: (1, {'@': 256}), 34: (1, {'@': 256}), 36: (1, {'@': 256}), 35: (1, {'@': 256}), 37: (1, {'@': 256}), 58: (1, {'@': 256}), 33: (1, {'@': 256}), 60: (1, {'@': 256}), 24: (1, {'@': 256}), 20: (1, {'@': 256}), 61: (1, {'@': 256}), 62: (1, {'@': 256}), 63: (1, {'@': 256})}, 732: {50: (1, {'@': 295}), 56: (1, {'@': 295}), 47: (1, {'@': 295}), 43: (1, {'@': 295}), 57: (1, {'@': 295}), 41: (1, {'@': 295}), 54: (1, {'@': 295}), 64: (1, {'@': 295}), 51: (1, {'@': 295}), 49: (1, {'@': 295}), 48: (1, {'@': 295}), 59: (1, {'@': 295}), 1: (1, {'@': 295}), 42: (1, {'@': 295}), 18: (1, {'@': 295}), 40: (1, {'@': 295}), 55: (1, {'@': 295}), 44: (1, {'@': 295}), 53: (1, {'@': 295}), 46: (1, {'@': 295}), 34: (1, {'@': 295}), 36: (1, {'@': 295}), 35: (1, {'@': 295}), 37: (1, {'@': 295}), 58: (1, {'@': 295}), 33: (1, {'@': 295}), 60: (1, {'@': 295}), 24: (1, {'@': 295}), 20: (1, {'@': 295}), 61: (1, {'@': 295}), 62: (1, {'@': 295}), 63: (1, {'@': 295})}, 733: {50: (1, {'@': 251}), 56: (1, {'@': 251}), 47: (1, {'@': 251}), 43: (1, {'@': 251}), 57: (1, {'@': 251}), 41: (1, {'@': 251}), 54: (1, {'@': 251}), 64: (1, {'@': 251}), 51: (1, {'@': 251}), 49: (1, {'@': 251}), 48: (1, {'@': 251}), 59: (1, {'@': 251}), 1: (1, {'@': 251}), 42: (1, {'@': 251}), 18: (1, {'@': 251}), 40: (1, {'@': 251}), 55: (1, {'@': 251}), 44: (1, {'@': 251}), 53: (1, {'@': 251}), 46: (1, {'@': 251}), 34: (1, {'@': 251}), 36: (1, {'@': 251}), 35: (1, {'@': 251}), 37: (1, {'@': 251}), 58: (1, {'@': 251}), 33: (1, {'@': 251}), 60: (1, {'@': 251}), 24: (1, {'@': 251}), 20: (1, {'@': 251}), 61: (1, {'@': 251}), 62: (1, {'@': 251}), 63: (1, {'@': 251})}, 734: {50: (1, {'@': 293}), 56: (1, {'@': 293}), 47: (1, {'@': 293}), 43: (1, {'@': 293}), 57: (1, {'@': 293}), 41: (1, {'@': 293}), 54: (1, {'@': 293}), 64: (1, {'@': 293}), 51: (1, {'@': 293}), 49: (1, {'@': 293}), 48: (1, {'@': 293}), 59: (1, {'@': 293}), 1: (1, {'@': 293}), 42: (1, {'@': 293}), 18: (1, {'@': 293}), 40: (1, {'@': 293}), 55: (1, {'@': 293}), 44: (1, {'@': 293}), 53: (1, {'@': 293}), 46: (1, {'@': 293}), 34: (1, {'@': 293}), 36: (1, {'@': 293}), 35: (1, {'@': 293}), 37: (1, {'@': 293}), 58: (1, {'@': 293}), 33: (1, {'@': 293}), 60: (1, {'@': 293}), 24: (1, {'@': 293}), 20: (1, {'@': 293}), 61: (1, {'@': 293}), 62: (1, {'@': 293}), 63: (1, {'@': 293})}, 735: {50: (1, {'@': 253}), 56: (1, {'@': 253}), 47: (1, {'@': 253}), 43: (1, {'@': 253}), 57: (1, {'@': 253}), 41: (1, {'@': 253}), 54: (1, {'@': 253}), 64: (1, {'@': 253}), 51: (1, {'@': 253}), 49: (1, {'@': 253}), 48: (1, {'@': 253}), 59: (1, {'@': 253}), 1: (1, {'@': 253}), 42: (1, {'@': 253}), 18: (1, {'@': 253}), 40: (1, {'@': 253}), 55: (1, {'@': 253}), 44: (1, {'@': 253}), 53: (1, {'@': 253}), 46: (1, {'@': 253}), 34: (1, {'@': 253}), 36: (1, {'@': 253}), 35: (1, {'@': 253}), 37: (1, {'@': 253}), 58: (1, {'@': 253}), 33: (1, {'@': 253}), 60: (1, {'@': 253}), 24: (1, {'@': 253}), 20: (1, {'@': 253}), 61: (1, {'@': 253}), 62: (1, {'@': 253}), 63: (1, {'@': 253})}, 736: {24: (0, 398)}, 737: {50: (1, {'@': 270}), 56: (1, {'@': 270}), 47: (1, {'@': 270}), 43: (1, {'@': 270}), 57: (1, {'@': 270}), 41: (1, {'@': 270}), 54: (1, {'@': 270}), 64: (1, {'@': 270}), 51: (1, {'@': 270}), 49: (1, {'@': 270}), 48: (1, {'@': 270}), 59: (1, {'@': 270}), 1: (1, {'@': 270}), 42: (1, {'@': 270}), 18: (1, {'@': 270}), 40: (1, {'@': 270}), 55: (1, {'@': 270}), 44: (1, {'@': 270}), 53: (1, {'@': 270}), 46: (1, {'@': 270}), 34: (1, {'@': 270}), 36: (1, {'@': 270}), 35: (1, {'@': 270}), 37: (1, {'@': 270}), 58: (1, {'@': 270}), 33: (1, {'@': 270}), 60: (1, {'@': 270}), 24: (1, {'@': 270}), 20: (1, {'@': 270}), 61: (1, {'@': 270}), 62: (1, {'@': 270}), 63: (1, {'@': 270})}, 738: {24: (0, 728)}, 739: {50: (1, {'@': 250}), 56: (1, {'@': 250}), 47: (1, {'@': 250}), 43: (1, {'@': 250}), 57: (1, {'@': 250}), 41: (1, {'@': 250}), 54: (1, {'@': 250}), 64: (1, {'@': 250}), 51: (1, {'@': 250}), 49: (1, {'@': 250}), 48: (1, {'@': 250}), 59: (1, {'@': 250}), 1: (1, {'@': 250}), 42: (1, {'@': 250}), 18: (1, {'@': 250}), 40: (1, {'@': 250}), 55: (1, {'@': 250}), 44: (1, {'@': 250}), 53: (1, {'@': 250}), 46: (1, {'@': 250}), 34: (1, {'@': 250}), 36: (1, {'@': 250}), 35: (1, {'@': 250}), 37: (1, {'@': 250}), 58: (1, {'@': 250}), 33: (1, {'@': 250}), 60: (1, {'@': 250}), 24: (1, {'@': 250}), 20: (1, {'@': 250}), 61: (1, {'@': 250}), 62: (1, {'@': 250}), 63: (1, {'@': 250})}, 740: {50: (1, {'@': 292}), 56: (1, {'@': 292}), 47: (1, {'@': 292}), 43: (1, {'@': 292}), 57: (1, {'@': 292}), 41: (1, {'@': 292}), 54: (1, {'@': 292}), 64: (1, {'@': 292}), 51: (1, {'@': 292}), 49: (1, {'@': 292}), 48: (1, {'@': 292}), 59: (1, {'@': 292}), 1: (1, {'@': 292}), 42: (1, {'@': 292}), 18: (1, {'@': 292}), 40: (1, {'@': 292}), 55: (1, {'@': 292}), 44: (1, {'@': 292}), 53: (1, {'@': 292}), 46: (1, {'@': 292}), 34: (1, {'@': 292}), 36: (1, {'@': 292}), 35: (1, {'@': 292}), 37: (1, {'@': 292}), 58: (1, {'@': 292}), 33: (1, {'@': 292}), 60: (1, {'@': 292}), 24: (1, {'@': 292}), 20: (1, {'@': 292}), 61: (1, {'@': 292}), 62: (1, {'@': 292}), 63: (1, {'@': 292})}, 741: {50: (1, {'@': 237}), 56: (1, {'@': 237}), 47: (1, {'@': 237}), 43: (1, {'@': 237}), 57: (1, {'@': 237}), 41: (1, {'@': 237}), 54: (1, {'@': 237}), 64: (1, {'@': 237}), 51: (1, {'@': 237}), 49: (1, {'@': 237}), 48: (1, {'@': 237}), 59: (1, {'@': 237}), 1: (1, {'@': 237}), 42: (1, {'@': 237}), 18: (1, {'@': 237}), 40: (1, {'@': 237}), 55: (1, {'@': 237}), 44: (1, {'@': 237}), 53: (1, {'@': 237}), 46: (1, {'@': 237}), 34: (1, {'@': 237}), 36: (1, {'@': 237}), 35: (1, {'@': 237}), 37: (1, {'@': 237}), 58: (1, {'@': 237}), 33: (1, {'@': 237}), 60: (1, {'@': 237}), 24: (1, {'@': 237}), 20: (1, {'@': 237}), 61: (1, {'@': 237}), 62: (1, {'@': 237}), 63: (1, {'@': 237})}, 742: {50: (1, {'@': 265}), 56: (1, {'@': 265}), 47: (1, {'@': 265}), 43: (1, {'@': 265}), 57: (1, {'@': 265}), 41: (1, {'@': 265}), 54: (1, {'@': 265}), 64: (1, {'@': 265}), 51: (1, {'@': 265}), 49: (1, {'@': 265}), 48: (1, {'@': 265}), 59: (1, {'@': 265}), 1: (1, {'@': 265}), 42: (1, {'@': 265}), 18: (1, {'@': 265}), 40: (1, {'@': 265}), 55: (1, {'@': 265}), 44: (1, {'@': 265}), 53: (1, {'@': 265}), 46: (1, {'@': 265}), 34: (1, {'@': 265}), 36: (1, {'@': 265}), 35: (1, {'@': 265}), 37: (1, {'@': 265}), 58: (1, {'@': 265}), 33: (1, {'@': 265}), 60: (1, {'@': 265}), 24: (1, {'@': 265}), 20: (1, {'@': 265}), 61: (1, {'@': 265}), 62: (1, {'@': 265}), 63: (1, {'@': 265})}, 743: {50: (1, {'@': 239}), 56: (1, {'@': 239}), 47: (1, {'@': 239}), 43: (1, {'@': 239}), 57: (1, {'@': 239}), 41: (1, {'@': 239}), 54: (1, {'@': 239}), 64: (1, {'@': 239}), 51: (1, {'@': 239}), 49: (1, {'@': 239}), 48: (1, {'@': 239}), 59: (1, {'@': 239}), 1: (1, {'@': 239}), 42: (1, {'@': 239}), 18: (1, {'@': 239}), 40: (1, {'@': 239}), 55: (1, {'@': 239}), 44: (1, {'@': 239}), 53: (1, {'@': 239}), 46: (1, {'@': 239}), 34: (1, {'@': 239}), 36: (1, {'@': 239}), 35: (1, {'@': 239}), 37: (1, {'@': 239}), 58: (1, {'@': 239}), 33: (1, {'@': 239}), 60: (1, {'@': 239}), 24: (1, {'@': 239}), 20: (1, {'@': 239}), 61: (1, {'@': 239}), 62: (1, {'@': 239}), 63: (1, {'@': 239})}, 744: {50: (1, {'@': 264}), 56: (1, {'@': 264}), 47: (1, {'@': 264}), 43: (1, {'@': 264}), 57: (1, {'@': 264}), 41: (1, {'@': 264}), 54: (1, {'@': 264}), 64: (1, {'@': 264}), 51: (1, {'@': 264}), 49: (1, {'@': 264}), 48: (1, {'@': 264}), 59: (1, {'@': 264}), 1: (1, {'@': 264}), 42: (1, {'@': 264}), 18: (1, {'@': 264}), 40: (1, {'@': 264}), 55: (1, {'@': 264}), 44: (1, {'@': 264}), 53: (1, {'@': 264}), 46: (1, {'@': 264}), 34: (1, {'@': 264}), 36: (1, {'@': 264}), 35: (1, {'@': 264}), 37: (1, {'@': 264}), 58: (1, {'@': 264}), 33: (1, {'@': 264}), 60: (1, {'@': 264}), 24: (1, {'@': 264}), 20: (1, {'@': 264}), 61: (1, {'@': 264}), 62: (1, {'@': 264}), 63: (1, {'@': 264})}, 745: {50: (1, {'@': 236}), 56: (1, {'@': 236}), 47: (1, {'@': 236}), 43: (1, {'@': 236}), 57: (1, {'@': 236}), 41: (1, {'@': 236}), 54: (1, {'@': 236}), 64: (1, {'@': 236}), 51: (1, {'@': 236}), 49: (1, {'@': 236}), 48: (1, {'@': 236}), 59: (1, {'@': 236}), 1: (1, {'@': 236}), 42: (1, {'@': 236}), 18: (1, {'@': 236}), 40: (1, {'@': 236}), 55: (1, {'@': 236}), 44: (1, {'@': 236}), 53: (1, {'@': 236}), 46: (1, {'@': 236}), 34: (1, {'@': 236}), 36: (1, {'@': 236}), 35: (1, {'@': 236}), 37: (1, {'@': 236}), 58: (1, {'@': 236}), 33: (1, {'@': 236}), 60: (1, {'@': 236}), 24: (1, {'@': 236}), 20: (1, {'@': 236}), 61: (1, {'@': 236}), 62: (1, {'@': 236}), 63: (1, {'@': 236})}, 746: {24: (0, 729)}, 747: {24: (0, 400)}, 748: {50: (1, {'@': 267}), 56: (1, {'@': 267}), 47: (1, {'@': 267}), 43: (1, {'@': 267}), 57: (1, {'@': 267}), 41: (1, {'@': 267}), 54: (1, {'@': 267}), 64: (1, {'@': 267}), 51: (1, {'@': 267}), 49: (1, {'@': 267}), 48: (1, {'@': 267}), 59: (1, {'@': 267}), 1: (1, {'@': 267}), 42: (1, {'@': 267}), 18: (1, {'@': 267}), 40: (1, {'@': 267}), 55: (1, {'@': 267}), 44: (1, {'@': 267}), 53: (1, {'@': 267}), 46: (1, {'@': 267}), 34: (1, {'@': 267}), 36: (1, {'@': 267}), 35: (1, {'@': 267}), 37: (1, {'@': 267}), 58: (1, {'@': 267}), 33: (1, {'@': 267}), 60: (1, {'@': 267}), 24: (1, {'@': 267}), 20: (1, {'@': 267}), 61: (1, {'@': 267}), 62: (1, {'@': 267}), 63: (1, {'@': 267})}}, 'start_states': {'start': 426}, 'end_states': {'start': 500}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': True, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'STRING_LIT', 'pattern': {'value': '"(?:(?:\\$\\{(?:(?:\\$\\{[^}]+\\}|(?:(?!\\${)([^}]))+))+\\}|(?:(?:(?!\\${)([^"\\\\]|\\\\.))+)+))*"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'DECIMAL', 'pattern': {'value': '[0-9]', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'EXP_MARK', 'pattern': {'value': '(?:e|E)(?:(?:\\+|\\-))?', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': '__IGNORE_0', 'pattern': {'value': '[ \t]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': '__IGNORE_1', 'pattern': {'value': '\\/\\*(.|\n)*?(\\*\\/)', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': '__ANON_0', 'pattern': {'value': '\n', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': '__ANON_1', 'pattern': {'value': '#.*\n', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': '__ANON_2', 'pattern': {'value': '\\/\\/.*\n', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': '__ANON_3', 'pattern': {'value': '[a-zA-Z_][a-zA-Z0-9_-]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': '__ANON_4', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': '__ANON_5', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': '__ANON_6', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': '__ANON_7', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_8', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_9', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_10', 'pattern': {'value': '<<(?P<heredoc>[a-zA-Z][a-zA-Z0-9._-]+)\n(?:.|\n)+?\n+\\s*(?P=heredoc)', 'flags': [], '_width': [9, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_11', 'pattern': {'value': '<<-(?P<heredoc_trim>[a-zA-Z][a-zA-Z0-9._-]+)\n(?:.|\n)+?\n+\\s*(?P=heredoc_trim)', 'flags': [], '_width': [10, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_12', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_13', 'pattern': {'value': '.*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_14', 'pattern': {'value': '[*]', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': '__ANON_15', 'pattern': {'value': '=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 44: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'body', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'body', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': Token('RULE', 'body'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': Token('RULE', 'body'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': Token('RULE', 'attribute'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': Token('RULE', 'attribute'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': Token('RULE', 'block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': Token('RULE', 'block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': Token('RULE', 'block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': Token('RULE', 'block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': Token('RULE', 'new_line_and_or_comma'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': Token('RULE', 'new_line_and_or_comma'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': Token('RULE', 'new_line_and_or_comma'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': Token('RULE', 'new_line_or_comment'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': Token('RULE', 'identifier'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': Token('RULE', 'expression'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': Token('RULE', 'expression'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operation', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': Token('RULE', 'expression'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': Token('RULE', 'conditional'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': Token('RULE', 'operation'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unary_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': Token('RULE', 'operation'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_op', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': Token('RULE', 'unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': Token('RULE', 'unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr_term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': Token('RULE', 'binary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'binary_term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MORETHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', 'binary_operator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', 'binary_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_operator', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', 'binary_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'binary_operator', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'float_lit', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int_lit', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING_LIT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'tuple', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'object', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_call', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'index_expr_term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr_expr_term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'heredoc_template', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'heredoc_template_trim', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attr_splat_expr_term', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'full_splat_expr_term', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_tuple_expr', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', 'expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_object_expr', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', 'int_lit'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', 'float_lit'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, {'name': 'EXP_MARK', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', 'float_lit'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'float_lit'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, {'name': 'EXP_MARK', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_5', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_5', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': '__object_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'object'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'object_elem'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'object_elem'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'object_elem'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'object_elem'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'heredoc_template'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'heredoc_template_trim'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'function_call'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__tuple_star_4', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'index_expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'index', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'get_attr_expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', 'attr_splat_expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'attr_splat', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', 'full_splat_expr_term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_term', '__type__': 'NonTerminal'}, {'name': 'full_splat', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', 'index'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', 'index'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'index'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'index'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'index'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'get_attr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'attr_splat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__attr_splat_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', 'attr_splat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', 'full_splat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__full_splat_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', 'full_splat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'for_tuple_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 30, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 31, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 32, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 33, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 34, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 35, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 36, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 37, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 38, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 39, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 40, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 41, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 42, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 43, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 44, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 45, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 46, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 47, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 48, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 49, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 50, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 51, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 52, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 53, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 54, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 55, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 56, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 57, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 58, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 59, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 60, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 61, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 62, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 63, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 64, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 65, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 66, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 67, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 68, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 69, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 70, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 71, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 72, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 73, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 74, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 75, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 76, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 77, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 78, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 79, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 80, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 81, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 82, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 83, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 84, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 85, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 86, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 87, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 88, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 89, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 90, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 91, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 92, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 93, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 94, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 95, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 96, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 97, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 98, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 99, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 100, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 101, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 102, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 103, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 104, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 105, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 106, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 107, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 108, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 109, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'for_cond', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 110, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'for_object_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'for_intro', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 111, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 30, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 31, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 32, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 33, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 34, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 35, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 36, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 37, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 38, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 39, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 40, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 41, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 42, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 43, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 44, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 45, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 46, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 47, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 48, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 49, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 50, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 51, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 52, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 53, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 54, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 55, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 56, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 57, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 58, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 59, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 60, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 61, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 62, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 63, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 64, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 65, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 66, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 67, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 68, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 69, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 70, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 71, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 72, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 73, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 74, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 75, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 76, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 77, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}], 'order': 78, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': Token('RULE', 'for_intro'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}], 'order': 79, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': Token('RULE', 'for_cond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': Token('RULE', 'for_cond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}, {'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': '__body_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__body_star_0', '__type__': 'NonTerminal'}, {'name': 'block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING_LIT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': '__block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__block_star_1', '__type__': 'NonTerminal'}, {'name': 'STRING_LIT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__new_line_or_comment_plus_2', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DECIMAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__int_lit_plus_3', '__type__': 'NonTerminal'}, {'name': 'DECIMAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 436: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 437: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'new_line_or_comment', '__type__': 'NonTerminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 438: {'origin': {'name': '__tuple_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__tuple_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 439: {'origin': {'name': '__object_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 440: {'origin': {'name': '__object_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__object_star_5', '__type__': 'NonTerminal'}, {'name': 'new_line_and_or_comma', '__type__': 'NonTerminal'}, {'name': 'object_elem', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 441: {'origin': {'name': '__attr_splat_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 442: {'origin': {'name': '__attr_splat_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__attr_splat_star_6', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 443: {'origin': {'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 444: {'origin': {'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'index', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 445: {'origin': {'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, {'name': 'get_attr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 446: {'origin': {'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__full_splat_star_7', '__type__': 'NonTerminal'}, {'name': 'index', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
